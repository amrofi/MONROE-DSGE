//any parameter (MLV not included) that is equations of other parameters must be shown here.
//otherwise dynare will not update them during estimation.
//in simulation, if we give values to final parameters (using the calibration mod file) but not to the underlying parameters, we should comment out hierarchical equations
xi             = 1 / ( 1 + exp(-logit_xi             ));
rhoGN          = 1 / ( 1 + exp(-logit_rhoGN          ));
rhoZ           = 1 / ( 1 + exp(-logit_rhoZ           ));
rhodeltaItilde = 1 / ( 1 + exp(-logit_rhodeltaItilde ));
rhoscriptFI    = 1 / ( 1 + exp(-logit_rhoscriptFI    ));
rhodeltaD      = 1 / ( 1 + exp(-logit_rhodeltaD      ));
rhokappa0      = 1 / ( 1 + exp(-logit_rhokappa0      ));
rhokappah      = 1 / ( 1 + exp(-logit_rhokappah      ));
rhokappaT      = 1 / ( 1 + exp(-logit_rhokappaT      ));
rhokappaNT     = 1 / ( 1 + exp(-logit_rhokappaNT     ));
rhokappaW      = 1 / ( 1 + exp(-logit_rhokappaW      ));
rhokappaST     = 1 / ( 1 + exp(-logit_rhokappaST     ));
rhokappaSNT    = 1 / ( 1 + exp(-logit_rhokappaSNT    ));
rhokappaSW     = 1 / ( 1 + exp(-logit_rhokappaSW     ));
rhokappaD      = 1 / ( 1 + exp(-logit_rhokappaD      ));
rhokappaNDCG   = 1 / ( 1 + exp(-logit_rhokappaNDCG   ));
rhokappaK      = 1 / ( 1 + exp(-logit_rhokappaK      ));
rhokappaH      = 1 / ( 1 + exp(-logit_rhokappaH      ));
alphaCP  = 1 / ( 1 + exp(-logit_alphaCP ));
alphaCD  = 1 / ( 1 + exp(-logit_alphaCD ));
alphah   = 1 / ( 1 + exp(-logit_alphah  ));
alphaKP  = 1 / ( 1 + exp(-logit_alphaKP ));
alphaHP  = 1 / ( 1 + exp(-logit_alphaHP ));
alphaD   = 1 / ( 1 + exp(-logit_alphaD  ));
alphaND  = 1 / ( 1 + exp(-logit_alphaND ));
alphaHW  = 1 / ( 1 + exp(-logit_alphaHW ));
alphaHL  = 1 / ( 1 + exp(-logit_alphaHL ));
alphaK   = 1 / ( 1 + exp(-logit_alphaK  ));
alphaKL  = 1 / ( 1 + exp(-logit_alphaKL ));
alphaHLX = 1 / ( 1 + exp(-logit_alphaHLX));
alphaY   = 1 / ( 1 + exp(-logit_alphaY  ));
alphaNC  = 1 / ( 1 + exp(-logit_alphaNC ));

//nuW    = nuPriorALL * nuPriorS0ALL  * nuPriorWALL   ;
//nuT    = nuPriorALL * nuPriorS0ALL  * nuPriorTALL   ;
//nuNT   = nuPriorALL * nuPriorS0ALL  * nuPriorNTALL  ;
//nuSW   = nuPriorALL * nuPriorSS0ALL * nuPriorWALL   ;
//nuST   = nuPriorALL * nuPriorSS0ALL * nuPriorTALL   ;
//nuSNT  = nuPriorALL * nuPriorSS0ALL * nuPriorNTALL  ;
//nuD    = nuPriorALL * nuPriorS1ALL  * nuPriorDi     ;
//nuNDCG = nuPriorALL * nuPriorS1ALL  * nuPriorNDCGi  ;
//nuK    = nuPriorALL * nuPriorS1ALL  * nuPriorKi     ;
//nuH    = nuPriorALL * nuPriorS1ALL  * nuPriorHi     ;
//nuh    = nuPriorALL                 * nuPriorhi     ;
//
//eKLT      =      eKLPriorALL     *   eKLTPriori    ;
//eHLXT     =      eHLXPriorALL    *   eHLXTPriori   ;
//eYT       =      eYPriorALL      *   eYTPriori     ;
//eKLNT     =      eKLPriorALL     *   eKLNTPriori   ;
//eHLXNT    =      eHLXPriorALL    *   eHLXNTPriori  ;
//eYNT      =      eYPriorALL      *   eYNTPriori    ;
//eKLW      =      eKLPriorALL     *   eKLWPriori    ;
//eHLXW     =      eHLXPriorALL    *   eHLXWPriori   ;
//eYW       =      eYPriorALL      *   eYWPriori     ;
//
//rhoOmegaALL      =1 / ( 1 + exp( - rhoOmegaPriorALL -                           rhoOmegaPriorALLi      ));     sigmaOmegaALL      =sigmaOmegaPriorALL *                             sigmaOmegaPriorALLi      ;
//rhoOmegaS0ALL    =1 / ( 1 + exp( - rhoOmegaPriorALL -                           rhoOmegaPriorS0ALLi    ));     sigmaOmegaS0ALL    =sigmaOmegaPriorALL *                             sigmaOmegaPriorS0ALLi    ;
//rhoOmegaTALL     =1 / ( 1 + exp( - rhoOmegaPriorALL - rhoOmegaPriorS0ALL     -  rhoOmegaPriorTALLi     ));     sigmaOmegaTALL     =sigmaOmegaPriorALL * sigmaOmegaPriorS0ALL     *  sigmaOmegaPriorTALLi     ;
//rhoOmegaNTALL    =1 / ( 1 + exp( - rhoOmegaPriorALL - rhoOmegaPriorS0ALL     -  rhoOmegaPriorNTALLi    ));     sigmaOmegaNTALL    =sigmaOmegaPriorALL * sigmaOmegaPriorS0ALL     *  sigmaOmegaPriorNTALLi    ;
//rhoOmegaWALL     =1 / ( 1 + exp( - rhoOmegaPriorALL - rhoOmegaPriorS0ALL     -  rhoOmegaPriorWALLi     ));     sigmaOmegaWALL     =sigmaOmegaPriorALL * sigmaOmegaPriorS0ALL     *  sigmaOmegaPriorWALLi     ;
//rhoOmegaKKALL    =1 / ( 1 + exp( - rhoOmegaPriorALL - rhoOmegaPriorStepALL   -  rhoOmegaPriorKKALLi    ));     sigmaOmegaKKALL    =sigmaOmegaPriorALL * sigmaOmegaPriorStepALL   *  sigmaOmegaPriorKKALLi    ;
//rhoOmegaHLALL    =1 / ( 1 + exp( - rhoOmegaPriorALL - rhoOmegaPriorStepALL   -  rhoOmegaPriorHLALLi    ));     sigmaOmegaHLALL    =sigmaOmegaPriorALL * sigmaOmegaPriorStepALL   *  sigmaOmegaPriorHLALLi    ;
//rhoOmegaKLALL    =1 / ( 1 + exp( - rhoOmegaPriorALL - rhoOmegaPriorStepALL   -  rhoOmegaPriorKLALLi    ));     sigmaOmegaKLALL    =sigmaOmegaPriorALL * sigmaOmegaPriorStepALL   *  sigmaOmegaPriorKLALLi    ;
//rhoOmegaHLXALL   =1 / ( 1 + exp( - rhoOmegaPriorALL - rhoOmegaPriorStepALL   -  rhoOmegaPriorHLXALLi   ));     sigmaOmegaHLXALL   =sigmaOmegaPriorALL * sigmaOmegaPriorStepALL   *  sigmaOmegaPriorHLXALLi   ;
//rhoOmegaHLXKLALL =1 / ( 1 + exp( - rhoOmegaPriorALL - rhoOmegaPriorStepALL   -  rhoOmegaPriorHLXKLALLi ));     sigmaOmegaHLXKLALL =sigmaOmegaPriorALL * sigmaOmegaPriorStepALL   *  sigmaOmegaPriorHLXKLALLi ;
//rhoOmegaS1ALL    =1 / ( 1 + exp( - rhoOmegaPriorALL -                           rhoOmegaPriorS1ALLi    ));     sigmaOmegaS1ALL    =sigmaOmegaPriorALL *                             sigmaOmegaPriorS1ALLi    ;
//rhoOmegaKALL     =1 / ( 1 + exp( - rhoOmegaPriorALL - rhoOmegaPriorS1ALL     -  rhoOmegaPriorKALLi     ));     sigmaOmegaKALL     =sigmaOmegaPriorALL * sigmaOmegaPriorS1ALL     *  sigmaOmegaPriorKALLi     ;
//rhoOmegaHALL     =1 / ( 1 + exp( - rhoOmegaPriorALL - rhoOmegaPriorS1ALL     -  rhoOmegaPriorHALLi     ));     sigmaOmegaHALL     =sigmaOmegaPriorALL * sigmaOmegaPriorS1ALL     *  sigmaOmegaPriorHALLi     ;
//rhoOmegaCALL     =1 / ( 1 + exp( - rhoOmegaPriorALL - rhoOmegaPriorS1ALL     -  rhoOmegaPriorCALLi     ));     sigmaOmegaCALL     =sigmaOmegaPriorALL * sigmaOmegaPriorS1ALL     *  sigmaOmegaPriorCALLi     ;
//rhoOmegaDi       =1 / ( 1 + exp( - rhoOmegaPriorALL -                           rhoOmegaPriorDii       ));     sigmaOmegaDi       =sigmaOmegaPriorALL *                             sigmaOmegaPriorDii       ;
//rhoOmegaPALL     =1 / ( 1 + exp( - rhoOmegaPriorALL - rhoOmegaPriorPGALL     -  rhoOmegaPriorPALLi     ));     sigmaOmegaPALL     =sigmaOmegaPriorALL * sigmaOmegaPriorPGALL     *  sigmaOmegaPriorPALLi     ;
//rhoOmegaGALL     =1 / ( 1 + exp( - rhoOmegaPriorALL - rhoOmegaPriorPGALL     -  rhoOmegaPriorGALLi     ));     sigmaOmegaGALL     =sigmaOmegaPriorALL * sigmaOmegaPriorPGALL     *  sigmaOmegaPriorGALLi     ;
//rhoOmegaDemandALL=1 / ( 1 + exp( - rhoOmegaPriorALL -                           rhoOmegaPriorDemandALLi));     sigmaOmegaDemandALL=sigmaOmegaPriorALL *                             sigmaOmegaPriorDemandALLi;
//rhoOmegahi       =1 / ( 1 + exp( - rhoOmegaPriorALL -                           rhoOmegaPriorhii       ));     sigmaOmegahi       =sigmaOmegaPriorALL *                             sigmaOmegaPriorhii       ;
//rhoOmegaCPi      =1 / ( 1 + exp( - rhoOmegaPriorALL -                           rhoOmegaPriorCPii      ));     sigmaOmegaCPi      =sigmaOmegaPriorALL *                             sigmaOmegaPriorCPii      ;
//rhoOmegaCi       =1 / ( 1 + exp( - rhoOmegaPriorALL -                           rhoOmegaPriorCii       ));     sigmaOmegaCi       =sigmaOmegaPriorALL *                             sigmaOmegaPriorCii       ;
//rhoOmegaTradeALL =1 / ( 1 + exp( - rhoOmegaPriorALL -                           rhoOmegaPriorTradeALLi ));     sigmaOmegaTradeALL =sigmaOmegaPriorALL *                             sigmaOmegaPriorTradeALLi ;
//rhoOmegaYi       =1 / ( 1 + exp( - rhoOmegaPriorALL -                           rhoOmegaPriorYii       ));     sigmaOmegaYi       =sigmaOmegaPriorALL *                             sigmaOmegaPriorYii       ;
//rhoOmegaTCi      =1 / ( 1 + exp( - rhoOmegaPriorALL -                           rhoOmegaPriorTCii      ));     sigmaOmegaTCi      =sigmaOmegaPriorALL *                             sigmaOmegaPriorTCii      ;
//rhoOmegaWPi      =1 / ( 1 + exp( - rhoOmegaPriorALL -                           rhoOmegaPriorWPii      ));     sigmaOmegaWPi      =sigmaOmegaPriorALL *                             sigmaOmegaPriorWPii      ;
//rhoOmegaWCi      =1 / ( 1 + exp( - rhoOmegaPriorALL -                           rhoOmegaPriorWCii      ));     sigmaOmegaWCi      =sigmaOmegaPriorALL *                             sigmaOmegaPriorWCii      ;
//
//phiLtauKG = phiLtauSG1PriorALL + phiLtauKGPriori ;
//phiLtauHG = phiLtauSG1PriorALL + phiLtauHGPriori ;
//phiLtauCG = phiLtauSG1PriorALL + phiLtauCGPriori ;
//phiLtaub  = phiLtaulbPriorALL  + phiLtaubPriori  ;
//phiLtaul  = phiLtaulbPriorALL  + phiLtaulPriori  ;
//
//phiYtauKG = phiYtauSG1PriorALL + phiYtauKGPriori ;
//phiYtauHG = phiYtauSG1PriorALL + phiYtauHGPriori ;
//phiYtauCG = phiYtauSG1PriorALL + phiYtauCGPriori ;
//phiYtaub  = phiYtaulbPriorALL  + phiYtaubPriori  ;
//phiYtaul  = phiYtaulbPriorALL  + phiYtaulPriori  ;
//
//phiuiotaTX   =  phiutauPriorALL     +   phiuiotaPriorALL    + phiuiotaTXPriori   ;
//phiuiotaTM   =  phiutauPriorALL     +   phiuiotaPriorALL    + phiuiotaTMPriori   ;
//phiuiotaWX   =  phiutauPriorALL     +   phiuiotaPriorALL    + phiuiotaWXPriori   ;
//phiuiotaWM   =  phiutauPriorALL     +   phiuiotaPriorALL    + phiuiotaWMPriori   ;
//phiutauKG    =                          phiutauSG1PriorALL  + phiutauKGPriori    ;
//phiutauHG    =                          phiutauSG1PriorALL  + phiutauHGPriori    ;
//phiutauCG    =                          phiutauSG1PriorALL  + phiutauCGPriori    ;
//phiutaub     =  phiutauPriorALL     +   phiutaulbPriorALL   + phiutaubPriori     ;
//phiutaul     =  phiutauPriorALL     +   phiutaulbPriorALL   + phiutaulPriori     ;
//phiutauD     =  phiutauPriorALL     +   phiutauCPriorALL    + phiutauDPriori     ;
//phiutauND    =  phiutauPriorALL     +   phiutauCPriorALL    + phiutauNDPriori    ;
//phiutauNT    =  phiutauPriorALL     +                       + phiutauNTPriori    ;
//phiutauLa    =  phiutauPriorALL     +   phiutauLPriorALL    + phiutauLaPriori    ;
//phiutauLb    =  phiutauPriorALL     +   phiutauLPriorALL    + phiutauLbPriori    ;
//phiutauHW    =  phiutauPriorALL     +   phiutauHPriorALL    + phiutauWPriorALL   ;
//phiutauHT    =  phiutauPriorALL     +   phiutauHPriorALL    + phiutauTPriorALL   ;
//phiutauHNT   =  phiutauPriorALL     +   phiutauHPriorALL    + phiutauNTPriorALL  ;
//phiutauKW    =  phiutauPriorALL     +   phiutauKPriorALL    + phiutauWPriorALL   ;
//phiutauKT    =  phiutauPriorALL     +   phiutauKPriorALL    + phiutauTPriorALL   ;
//phiutauKNT   =  phiutauPriorALL     +   phiutauKPriorALL    + phiutauNTPriorALL  ;
//phiutauXW    =  phiutauPriorALL     +   phiutauXPriorALL    + phiutauWPriorALL   ;
//phiutauXT    =  phiutauPriorALL     +   phiutauXPriorALL    + phiutauTPriorALL   ;
//phiutauXNT   =  phiutauPriorALL     +   phiutauXPriorALL    + phiutauNTPriorALL  ;
//
//phiiotaTX       = 1 / ( 1 + exp( - phiiotaPriorALL - phiiotaTXPriori ))     ;
//phiiotaTM       = 1 / ( 1 + exp( - phiiotaPriorALL - phiiotaTMPriori ))     ;
//phiiotaWX       = 1 / ( 1 + exp( - phiiotaPriorALL - phiiotaWXPriori ))     ;
//phiiotaWM       = 1 / ( 1 + exp( - phiiotaPriorALL - phiiotaWMPriori ))     ;
//phitauD         = 1 / ( 1 + exp( - phitauCPriorALL - phitauDPriori   ))     ;
//phitauND        = 1 / ( 1 + exp( - phitauCPriorALL - phitauNDPriori  ))     ;
//phitauHW        = 1 / ( 1 + exp( - phitauHPriorALL - phitauWPriorALL   ))     ;
//phitauHT        = 1 / ( 1 + exp( - phitauHPriorALL - phitauTPriorALL   ))     ;
//phitauHNT       = 1 / ( 1 + exp( - phitauHPriorALL - phitauNTPriorALL  ))     ;
//phitauKW        = 1 / ( 1 + exp( - phitauKPriorALL - phitauWPriorALL   ))     ;
//phitauKT        = 1 / ( 1 + exp( - phitauKPriorALL - phitauTPriorALL   ))     ;
//phitauKNT       = 1 / ( 1 + exp( - phitauKPriorALL - phitauNTPriorALL  ))     ;
//phitauscriptXW  = 1 / ( 1 + exp( - phitauXPriorALL - phitauWPriorALL   ))     ;
//phitauscriptXT  = 1 / ( 1 + exp( - phitauXPriorALL - phitauTPriorALL   ))     ;
//phitauscriptXNT = 1 / ( 1 + exp( - phitauXPriorALL - phitauNTPriorALL  ))     ;
//
//tauKG_          =  1 / ( 1 + exp(   -   tauSG1PriorALL_  - tauKGPriori_ ));
//tauHG_          =  1 / ( 1 + exp(   -   tauSG1PriorALL_  - tauHGPriori_ ));
//tauCG_          =  1 / ( 1 + exp(   -   tauSG1PriorALL_  - tauCGPriori_ ));
//taub_           =  tauPriorALL_     +   taulbPriorALL_   + taubPriori_     ;
//taul_           =  tauPriorALL_     +   taulbPriorALL_   + taulPriori_     ;
//tauD_           =  tauPriorALL_     +   tauCPriorALL_    + tauDPriori_     ;
//tauND_          =  tauPriorALL_     +   tauCPriorALL_    + tauNDPriori_    ;
//tauNT_          =  tauPriorALL_     +                    + tauNTPriori_    ;
//tauLa_          =  tauPriorALL_     +   tauLPriorALL_    + tauLaPriori_    ;
//tauLb_          =  1 / ( 1 + exp(   -   tauPriorALL_     - tauLPriorALL_   - tauLbPriori_ ))    ;
//tauHW_          =  tauPriorALL_     +   tauHPriorALL_    + tauWPriorALL_   ;
//tauHT_          =  tauPriorALL_     +   tauHPriorALL_    + tauTPriorALL_   ;
//tauHNT_         =  tauPriorALL_     +   tauHPriorALL_    + tauNTPriorALL_  ;
//tauKW_          =  tauPriorALL_     +   tauKPriorALL_    + tauWPriorALL_   ;
//tauKT_          =  tauPriorALL_     +   tauKPriorALL_    + tauTPriorALL_   ;
//tauKNT_         =  tauPriorALL_     +   tauKPriorALL_    + tauNTPriorALL_  ;
//tauscriptXW_    =  tauPriorALL_     +   tauXPriorALL_    + tauWPriorALL_   ;
//tauscriptXT_    =  tauPriorALL_     +   tauXPriorALL_    + tauTPriorALL_   ;
//tauscriptXNT_   =  tauPriorALL_     +   tauXPriorALL_    + tauNTPriorALL_  ;
//
//sigmauKG      = sigmauPriorALL * sigmauSG1PriorALL   * sigmauKGPriori  ;
//sigmauHG      = sigmauPriorALL * sigmauSG1PriorALL   * sigmauHGPriori  ;
//sigmauCG      = sigmauPriorALL * sigmauSG1PriorALL   * sigmauCGPriori  ;
//sigmaub       = sigmauPriorALL * sigmaulbPriorALL    * sigmaubPriori   ;
//sigmaul       = sigmauPriorALL * sigmaulbPriorALL    * sigmaulPriori   ;
//sigmauD       = sigmauPriorALL * sigmauCPriorALL     * sigmauDPriori   ;
//sigmauND      = sigmauPriorALL * sigmauCPriorALL     * sigmauNDPriori  ;
//sigmauNT      = sigmauPriorALL                       * sigmauNTPriori  ;
//sigmauTX      = sigmauPriorALL * sigmauiotaPriorALL  * sigmauTXPriori  ;
//sigmauTM      = sigmauPriorALL * sigmauiotaPriorALL  * sigmauTMPriori  ;
//sigmauWX      = sigmauPriorALL * sigmauiotaPriorALL  * sigmauWXPriori  ;
//sigmauWM      = sigmauPriorALL * sigmauiotaPriorALL  * sigmauWMPriori  ;
//sigmauLa      = sigmauPriorALL * sigmauLPriorALL     * sigmauLaPriori  ;
//sigmauLb      = sigmauPriorALL * sigmauLPriorALL     * sigmauLbPriori  ;
//sigmauALL     = sigmauPriorALL                       * sigmauALLPriori     ;
//sigmauS1ALL   = sigmauPriorALL                       * sigmauS1ALLPriori   ;
//sigmauiotaALL = sigmauPriorALL                       * sigmauiotaALLPriori ;
//sigmaulbALL   = sigmauPriorALL                       * sigmaulbALLPriori   ;
//sigmauCALL    = sigmauPriorALL                       * sigmauCALLPriori    ;
//sigmauLALL    = sigmauPriorALL                       * sigmauLALLPriori    ;
//sigmauHALL    = sigmauPriorALL * sigmauPriorHKXALL   * sigmauHALLPriori    ;
//sigmauKALL    = sigmauPriorALL * sigmauPriorHKXALL   * sigmauKALLPriori    ;
//sigmauXALL    = sigmauPriorALL * sigmauPriorHKXALL   * sigmauXALLPriori    ;
//sigmauTALL    = sigmauPriorALL * sigmauPriorS0ALL    * sigmauTALLPriori    ;
//sigmauNTALL   = sigmauPriorALL * sigmauPriorS0ALL    * sigmauNTALLPriori   ;
//sigmauWALL    = sigmauPriorALL * sigmauPriorS0ALL    * sigmauWALLPriori    ;

log_nuW = 0.62732299999999996398258872432052157819271087646484375 + 0.057041596931537576209425566275967867113649845123291015625 * InternalPrior_8 + 0.03293298134342935445939559713224298320710659027099609375 * InternalPrior_9 + 0.0196775112981440424009260681259547709487378597259521484375 * InternalPrior_23 + 0.1135330647873120935020807564796996302902698516845703125 * InternalPrior_47 - 0.0819615006133074530669802015836467035114765167236328125 * InternalPrior_52 + 0.327584143979313291428212551181786693632602691650390625 * InternalPrior_90;
nuW = exp( log_nuW );
log_nuT = 0.62732299999999996398258872432052157819271087646484375 - 0.05704159693153758314831947018319624476134777069091796875 * InternalPrior_8 + 0.0329329813434293405816077893177862279117107391357421875 * InternalPrior_9 + 0.0196775112981440424009260681259547709487378597259521484375 * InternalPrior_23 + 0.1135330647873120935020807564796996302902698516845703125 * InternalPrior_47 - 0.0819615006133074530669802015836467035114765167236328125 * InternalPrior_52 + 0.327584143979313291428212551181786693632602691650390625 * InternalPrior_90;
nuT = exp( log_nuT );
log_nuNT = 0.62732299999999996398258872432052157819271087646484375 - 0.06586596268685872279657900207894272170960903167724609375 * InternalPrior_9 + 0.0196775112981438411730028548163318191654980182647705078125 * InternalPrior_23 + 0.11353306478731213513544417992306989617645740509033203125 * InternalPrior_47 - 0.08196150061330755021149485628484399057924747467041015625 * InternalPrior_52 + 0.327584143979313180405910088666132651269435882568359375 * InternalPrior_90;
nuNT = exp( log_nuNT );
log_nuSW = 0.62732299999999996398258872432052157819271087646484375 + 0.057041596931537590087213374090424622409045696258544921875 * InternalPrior_8 + 0.03293298134342943772612244401898351497948169708251953125 * InternalPrior_9 + 0.0196775112981440181147974044506554491817951202392578125 * InternalPrior_23 - 0.1135330647873120935020807564796996302902698516845703125 * InternalPrior_47 - 0.08196150061330743918919239376918994821608066558837890625 * InternalPrior_52 + 0.327584143979313235917061319923959672451019287109375 * InternalPrior_90;
nuSW = exp( log_nuSW );
log_nuST = 0.62732299999999996398258872432052157819271087646484375 - 0.05704159693153758314831947018319624476134777069091796875 * InternalPrior_8 + 0.032932981343429444665016347926211892627179622650146484375 * InternalPrior_9 + 0.0196775112981440181147974044506554491817951202392578125 * InternalPrior_23 - 0.11353306478731210737986856429415638558566570281982421875 * InternalPrior_47 - 0.08196150061330743918919239376918994821608066558837890625 * InternalPrior_52 + 0.327584143979313235917061319923959672451019287109375 * InternalPrior_90;
nuST = exp( log_nuST );
log_nuSNT = 0.62732299999999996398258872432052157819271087646484375 - 0.06586596268685886157445708022351027466356754302978515625 * InternalPrior_9 + 0.0196775112981439730119870290536709944717586040496826171875 * InternalPrior_23 - 0.1135330647873120935020807564796996302902698516845703125 * InternalPrior_47 - 0.08196150061330743918919239376918994821608066558837890625 * InternalPrior_52 + 0.327584143979313235917061319923959672451019287109375 * InternalPrior_90;
nuSNT = exp( log_nuSNT );
log_nuD = 0.62732299999999996398258872432052157819271087646484375 + 0.035434983320321460087409803918490069918334484100341796875 * InternalPrior_3 - 0.0035405228865649572382590104524524576845578849315643310546875 * InternalPrior_4 - 0.06010359661058763125485171485706814564764499664306640625 * InternalPrior_5 + 0.01439941153500980119961383252302766777575016021728515625 * InternalPrior_23 + 0.12395840265546796687967656680484651587903499603271484375 * InternalPrior_52 + 0.3334526967184403556387906064628623425960540771484375 * InternalPrior_90;
nuD = exp( log_nuD );
log_nuNDCG = 0.62732299999999996398258872432052157819271087646484375 + 0.03836485239785070167073399716173298656940460205078125 * InternalPrior_3 + 0.033662076269444785037165956964599899947643280029296875 * InternalPrior_4 + 0.047703442144893477838696327353318338282406330108642578125 * InternalPrior_5 + 0.01439941153500980119961383252302766777575016021728515625 * InternalPrior_23 + 0.12395840265546798075746437461930327117443084716796875 * InternalPrior_52 + 0.3334526967184403556387906064628623425960540771484375 * InternalPrior_90;
nuNDCG = exp( log_nuNDCG );
log_nuK = 0.62732299999999996398258872432052157819271087646484375 - 0.01391318535351873143801615384518299833871424198150634765625 * InternalPrior_3 - 0.06459946304271967087995420797597034834325313568115234375 * InternalPrior_4 + 0.0226704282857850027144142046608976670540869235992431640625 * InternalPrior_5 + 0.01439941153500971272871655770586585276760160923004150390625 * InternalPrior_23 + 0.1239584026554678697351619121036492288112640380859375 * InternalPrior_52 + 0.3334526967184403556387906064628623425960540771484375 * InternalPrior_90;
nuK = exp( log_nuK );
log_nuH = 0.62732299999999996398258872432052157819271087646484375 - 0.059886650364653480627108450562445796094834804534912109375 * InternalPrior_3 + 0.0344779096598398504536220343652530573308467864990234375 * InternalPrior_4 - 0.01027027382009083368574753336588400998152792453765869140625 * InternalPrior_5 + 0.0143994115350092599658893277592142112553119659423828125 * InternalPrior_23 + 0.12395840265546780034622287303136545233428478240966796875 * InternalPrior_52 + 0.33345269671844002257188321891590021550655364990234375 * InternalPrior_90;
nuH = exp( log_nuH );
log_nuh = 0.62736300000000000398614474761416204273700714111328125 - 0.186075446618824302813521853749989531934261322021484375 * InternalPrior_23 - 0.0136346732460102641748544982647217693738639354705810546875 * InternalPrior_52 + 0.311069169239061082965491777940769679844379425048828125 * InternalPrior_90;
nuh = exp( log_nuh );
log_eKLT = -0.11155199999999999838085074088667170144617557525634765625 + 0.0306145426831129496836325643016607500612735748291015625 * InternalPrior_33 + 0.11271536985424478183315244450568570755422115325927734375 * InternalPrior_34 + 0.1298459314760274929678729449733509682118892669677734375 * InternalPrior_35 - 0.027240064801643253111773645969151402823626995086669921875 * InternalPrior_36 - 0.0049361627996979511034947307734910282306373119354248046875 * InternalPrior_37 - 0.0086684304883436202882052157292491756379604339599609375 * InternalPrior_38 + 0.43790533969493139476725218628416769206523895263671875 * InternalPrior_81;
eKLT = exp( log_eKLT );
log_eHLXT = -0.11155199999999999838085074088667170144617557525634765625 + 0.08162291050727986385648904388290247879922389984130859375 * InternalPrior_33 - 0.04901282239390468420392465986878960393369197845458984375 * InternalPrior_34 + 0.036666847234142686817737200044575729407370090484619140625 * InternalPrior_35 + 0.10102706441369412038167041600900120101869106292724609375 * InternalPrior_36 - 0.034353120016665052161020099674715311266481876373291015625 * InternalPrior_37 - 0.0977132575598149977214035288852755911648273468017578125 * InternalPrior_38 - 0.437905339694931561300705880057648755609989166259765625 * InternalPrior_82;
eHLXT = exp( log_eHLXT );
log_eYT = -0.11155199999999999838085074088667170144617557525634765625 + 0.02436741344070035564239873338010511361062526702880859375 * InternalPrior_33 + 0.0218298133335490147921564840771679882891476154327392578125 * InternalPrior_34 + 0.0097695918380007844283863249756905133835971355438232421875 * InternalPrior_35 + 0.117487577978376833698348491452634334564208984375 * InternalPrior_36 + 0.057422423772800608443578340711610508151352405548095703125 * InternalPrior_37 + 0.11435504808642975305144062758699874393641948699951171875 * InternalPrior_38 + 0.437905339694931339256100955026340670883655548095703125 * InternalPrior_80;
eYT = exp( log_eYT );
log_eKLNT = -0.11155199999999999838085074088667170144617557525634765625 + 0.027812740727368411020048455384312546811997890472412109375 * InternalPrior_33 + 0.045390050993346163499264633856000727973878383636474609375 * InternalPrior_34 - 0.1624402524997984598176259396495879627764225006103515625 * InternalPrior_35 + 0.0310945424301117025189800102680237614549696445465087890625 * InternalPrior_36 - 0.028681846005596887960731322664287290535867214202880859375 * InternalPrior_37 - 0.01825758744454465676287924225107417441904544830322265625 * InternalPrior_38 + 0.43790533969493139476725218628416769206523895263671875 * InternalPrior_81;
eKLNT = exp( log_eKLNT );
log_eHLXNT = -0.11155199999999999838085074088667170144617557525634765625 + 0.083244546691033705076989690496702678501605987548828125 * InternalPrior_33 - 0.01179991739891421594077502987829575431533157825469970703125 * InternalPrior_34 - 0.0267843115944151610730017409878200851380825042724609375 * InternalPrior_35 - 0.11780599450611707601499489328489289619028568267822265625 * InternalPrior_36 + 0.02554933838407398571934692199647543020546436309814453125 * InternalPrior_37 + 0.095006243380231836237470588457654230296611785888671875 * InternalPrior_38 - 0.437905339694931561300705880057648755609989166259765625 * InternalPrior_82;
eHLXNT = exp( log_eHLXNT );
log_eYNT = -0.11155199999999999838085074088667170144617557525634765625 - 0.00153443656673739954772461846488340597716160118579864501953125 * InternalPrior_33 + 0.00130021126215426846388367732032520507345907390117645263671875 * InternalPrior_34 - 0.0190863566176166961352311801647374522872269153594970703125 * InternalPrior_35 - 0.06923786239677708065354266864233068190515041351318359375 * InternalPrior_36 + 0.10945834001415578884408574822373338975012302398681640625 * InternalPrior_37 - 0.11916440502473324425380951652186922729015350341796875 * InternalPrior_38 + 0.437905339694931339256100955026340670883655548095703125 * InternalPrior_80;
eYNT = exp( log_eYNT );
log_eKLW = -0.11155199999999999838085074088667170144617557525634765625 - 0.058427283410481374581468827500430052168667316436767578125 * InternalPrior_33 - 0.1581054208475909106379475588255445472896099090576171875 * InternalPrior_34 + 0.032594321023770959910859090769008616916835308074951171875 * InternalPrior_35 - 0.0038544776284685257350393072783845127560198307037353515625 * InternalPrior_36 + 0.033618008805294863350354717113077640533447265625 * InternalPrior_37 + 0.0269260179328882527649557943050240282900631427764892578125 * InternalPrior_38 + 0.43790533969493150578955464879982173442840576171875 * InternalPrior_81;
eKLW = exp( log_eKLW );
log_eHLXW = -0.11155199999999999838085074088667170144617557525634765625 - 0.164867457198313582811266542194061912596225738525390625 * InternalPrior_33 + 0.060812739792818877593294502048593130894005298614501953125 * InternalPrior_34 - 0.00988253563972754829614064675524787162430584430694580078125 * InternalPrior_35 + 0.0167789300924229556333244772758916951715946197509765625 * InternalPrior_36 + 0.00880378163259105950277927377101150341331958770751953125 * InternalPrior_37 + 0.002707014179583176229082486230481663369573652744293212890625 * InternalPrior_38 - 0.437905339694931228233798492510686628520488739013671875 * InternalPrior_82;
eHLXW = exp( log_eHLXW );
log_eYW = -0.11155199999999999838085074088667170144617557525634765625 - 0.02283297687396292074968329188777715899050235748291015625 * InternalPrior_33 - 0.0231300245957032669930075741149266832508146762847900390625 * InternalPrior_34 + 0.0093167647796159082373979032354327500797808170318603515625 * InternalPrior_35 - 0.048249715581599732228124111088618519715964794158935546875 * InternalPrior_36 - 0.1668807637869564042265579928425722755491733551025390625 * InternalPrior_37 + 0.004809356938303585744798329670857128803618252277374267578125 * InternalPrior_38 + 0.43790533969493150578955464879982173442840576171875 * InternalPrior_80;
eYW = exp( log_eYW );
logit_rhoOmegaALL = 0 - 0.1185660716828807748068896898985258303582668304443359375 * InternalPrior_54 + 0.1329091136577977838584274650202132761478424072265625 * InternalPrior_55 - 0.01116199877838544400610043538790705497376620769500732421875 * InternalPrior_56 + 0.041049717802148756595759238052778528071939945220947265625 * InternalPrior_57 + 0.058616864942055924014852053005597554147243499755859375 * InternalPrior_58 - 0.0880243566628239049176585240275016985833644866943359375 * InternalPrior_59 + 0.03503232252589427719868808708270080387592315673828125 * InternalPrior_60 - 0.01299697479452978192415724123520703869871795177459716796875 * InternalPrior_61 + 0.353553390593273786368655464684707112610340118408203125 * InternalPrior_62 - 0.11820986946116540661222416019882075488567352294921875 * InternalPrior_63 - 0.064750449725017145130578910539043135941028594970703125 * InternalPrior_64 - 0.203691463244607351423809404877829365432262420654296875 * InternalPrior_65 - 0.107151162627516283176731803905568085610866546630859375 * InternalPrior_79 - 0.08517474249027422172897416885462007485330104827880859375 * InternalPrior_83 - 0.06914192051758709378628253716669860295951366424560546875 * InternalPrior_88 + 0.997854726724886287314575383788906037807464599609375 * InternalPrior_151;
rhoOmegaALL = 1 / ( 1 + exp( -( logit_rhoOmegaALL ) ) );
logit_rhoOmegaS0ALL = 0 - 0.1185660716828807748068896898985258303582668304443359375 * InternalPrior_54 + 0.1329091136577977838584274650202132761478424072265625 * InternalPrior_55 - 0.01116199877838544400610043538790705497376620769500732421875 * InternalPrior_56 + 0.041049717802148728840183622423865017481148242950439453125 * InternalPrior_57 + 0.0586168649420558962592764373766840435564517974853515625 * InternalPrior_58 - 0.0880243566628237938953560615118476562201976776123046875 * InternalPrior_59 + 0.03503232252589427719868808708270080387592315673828125 * InternalPrior_60 - 0.01299697479452979580194504904966379399411380290985107421875 * InternalPrior_61 - 0.3535533905932737308575042334268800914287567138671875 * InternalPrior_62 - 0.11820986946116540661222416019882075488567352294921875 * InternalPrior_63 - 0.064750449725017145130578910539043135941028594970703125 * InternalPrior_64 - 0.203691463244607351423809404877829365432262420654296875 * InternalPrior_65 - 0.107151162627516283176731803905568085610866546630859375 * InternalPrior_79 - 0.08517474249027422172897416885462007485330104827880859375 * InternalPrior_83 - 0.06914192051758709378628253716669860295951366424560546875 * InternalPrior_88 + 0.997854726724886287314575383788906037807464599609375 * InternalPrior_151;
rhoOmegaS0ALL = 1 / ( 1 + exp( -( logit_rhoOmegaS0ALL ) ) );
logit_rhoOmegaTALL = 0 - 0.0644467033593771054800214415081427432596683502197265625 * InternalPrior_24 + 0.08251809828745003405625624282038188539445400238037109375 * InternalPrior_25 + 0.049215007667042710848281927837888360954821109771728515625 * InternalPrior_26 - 0.0853693466097320274865722922186250798404216766357421875 * InternalPrior_27 - 0.0154554486592222324603529415298908133991062641143798828125 * InternalPrior_28 + 0.04864692416393150142805978930482524447143077850341796875 * InternalPrior_29 - 0.027919299857216965665696051246413844637572765350341796875 * InternalPrior_30 - 0.0125705460046114415872953173902715207077562808990478515625 * InternalPrior_31 + 0.04950868784685986956350944865334895439445972442626953125 * InternalPrior_32 + 0.0771369717148846778531634527098503895103931427001953125 * InternalPrior_79 + 0.2392977228867872174777886584706720896065235137939453125 * InternalPrior_83 - 0.362859017617953583112466731108725070953369140625 * InternalPrior_87 - 0.1750531450604813354932076663317275233566761016845703125 * InternalPrior_88 + 1.0187293803984243112381591345183551311492919921875 * InternalPrior_151;
rhoOmegaTALL = 1 / ( 1 + exp( -( logit_rhoOmegaTALL ) ) );
logit_rhoOmegaNTALL = 0 - 0.01279963140743472886640130781188418040983378887176513671875 * InternalPrior_24 - 0.1588505405333463793571269206950091756880283355712890625 * InternalPrior_25 - 0.00035398166018649050192090843580672299140132963657379150390625 * InternalPrior_26 - 0.01302311673261502544818313253927044570446014404296875 * InternalPrior_27 - 0.00932790330037686597763890716805690317414700984954833984375 * InternalPrior_28 - 0.0246811358303865475971594634074790519662201404571533203125 * InternalPrior_29 + 0.01394780401186602146468285212677074014209210872650146484375 * InternalPrior_30 + 0.00789534127705025269572391977135339402593672275543212890625 * InternalPrior_31 - 0.01210657283558681622526176369092354434542357921600341796875 * InternalPrior_32 + 0.0771369717148846778531634527098503895103931427001953125 * InternalPrior_79 + 0.2392977228867871619666374272128450684249401092529296875 * InternalPrior_83 - 0.362859017617953638623617962366552092134952545166015625 * InternalPrior_87 - 0.1750531450604813354932076663317275233566761016845703125 * InternalPrior_88 + 1.0187293803984243112381591345183551311492919921875 * InternalPrior_151;
rhoOmegaNTALL = 1 / ( 1 + exp( -( logit_rhoOmegaNTALL ) ) );
logit_rhoOmegaWALL = 0 + 0.0772463347668117805699949940390069968998432159423828125 * InternalPrior_24 + 0.07633244224589637305644629350354080088436603546142578125 * InternalPrior_25 - 0.04886102600685622576737188182960380800068378448486328125 * InternalPrior_26 + 0.098392463342347025179179809128982014954090118408203125 * InternalPrior_27 + 0.0247833519595990724171397090458413003943860530853271484375 * InternalPrior_28 - 0.0239657883335449885253698454334880807437002658843994140625 * InternalPrior_29 + 0.013971495845350935527395819235607632435858249664306640625 * InternalPrior_30 + 0.004675204727561201034635729456567787565290927886962890625 * InternalPrior_31 - 0.037402115011273051603524208985618315637111663818359375 * InternalPrior_32 + 0.0771369717148846778531634527098503895103931427001953125 * InternalPrior_79 + 0.2392977228867871619666374272128450684249401092529296875 * InternalPrior_83 - 0.362859017617953638623617962366552092134952545166015625 * InternalPrior_87 - 0.1750531450604813354932076663317275233566761016845703125 * InternalPrior_88 + 1.0187293803984243112381591345183551311492919921875 * InternalPrior_151;
rhoOmegaWALL = 1 / ( 1 + exp( -( logit_rhoOmegaWALL ) ) );
logit_rhoOmegaKKALL = 0 + 0.00530234651648040823668228682663539075292646884918212890625 * InternalPrior_24 + 0.00614727748292062496637822022194086457602679729461669921875 * InternalPrior_25 + 0.000564993183139929182334793011932561057619750499725341796875 * InternalPrior_26 + 0.004545317631922574271030601522625147481448948383331298828125 * InternalPrior_27 - 0.0372237684174917815571603796342969872057437896728515625 * InternalPrior_28 - 0.11480924036348690020492568919507903046905994415283203125 * InternalPrior_29 - 0.12455795601577508702195729028971982188522815704345703125 * InternalPrior_30 + 0.0171150977105944956946359525318257510662078857421875 * InternalPrior_31 + 0.03922671776715670743929109676173538900911808013916015625 * InternalPrior_32 + 0.029754008664379320847626075874359230510890483856201171875 * InternalPrior_79 + 0.052856526256150317133464255903163575567305088043212890625 * InternalPrior_83 + 0.418458680318301190492746854943106882274150848388671875 * InternalPrior_88 + 1.038851875614035247252786575700156390666961669921875 * InternalPrior_151;
rhoOmegaKKALL = 1 / ( 1 + exp( -( logit_rhoOmegaKKALL ) ) );
logit_rhoOmegaHLALL = 0 + 0.03791242343153876370731580891515477560460567474365234375 * InternalPrior_24 - 0.01207755119735827269156214214262945461086928844451904296875 * InternalPrior_25 - 0.0103782631118391442670567670347736566327512264251708984375 * InternalPrior_26 + 0.01457982745016461745279912065598182380199432373046875 * InternalPrior_27 + 0.00455495687256085406147132488285933504812419414520263671875 * InternalPrior_28 + 0.06533414134429070541099093816228560172021389007568359375 * InternalPrior_29 + 0.05145246527615403298039353785497951321303844451904296875 * InternalPrior_30 + 0.1144972363490148470344109910001861862838268280029296875 * InternalPrior_31 + 0.10025083651055087530234999348976998589932918548583984375 * InternalPrior_32 + 0.0297540086643793798282242590858004405163228511810302734375 * InternalPrior_79 + 0.05285652625615035182793377543930546380579471588134765625 * InternalPrior_83 + 0.418458680318301190492746854943106882274150848388671875 * InternalPrior_88 + 1.038851875614035247252786575700156390666961669921875 * InternalPrior_151;
rhoOmegaHLALL = 1 / ( 1 + exp( -( logit_rhoOmegaHLALL ) ) );
logit_rhoOmegaKLALL = 0 + 0.01392258393300072581710846719715846120379865169525146484375 * InternalPrior_24 - 0.00833211933939523481662536852354605798609554767608642578125 * InternalPrior_25 - 0.034478960866740814006359272525514825247228145599365234375 * InternalPrior_26 - 0.055211908504536215402946908170633832924067974090576171875 * InternalPrior_27 + 0.1444995854099182797103395614612963981926441192626953125 * InternalPrior_28 - 3.8721450556911127054669774505413215592852793633937835693359375e-05 * InternalPrior_29 + 0.0080277921967713827822166194891906343400478363037109375 * InternalPrior_30 - 0.0809627507583103867006002474226988852024078369140625 * InternalPrior_31 + 0.00019929847795381358641249314178622853432898409664630889892578125 * InternalPrior_32 + 0.0297540086643793520726486434568869299255311489105224609375 * InternalPrior_79 + 0.05285652625615033795014596762484870851039886474609375 * InternalPrior_83 + 0.4184586803183012460038980862009339034557342529296875 * InternalPrior_88 + 1.038851875614035247252786575700156390666961669921875 * InternalPrior_151;
rhoOmegaKLALL = 1 / ( 1 + exp( -( logit_rhoOmegaKLALL ) ) );
logit_rhoOmegaHLXALL = 0 - 0.027560341033809943045440604691975750029087066650390625 * InternalPrior_24 + 0.00174971995723246522523586232722436761832796037197113037109375 * InternalPrior_25 + 0.1438023808364084776822977573829120956361293792724609375 * InternalPrior_26 + 0.06680904397739099997988176937724347226321697235107421875 * InternalPrior_27 - 0.004949640091952665910124409265335998497903347015380859375 * InternalPrior_28 + 0.01277043365075655224905037954385988996364176273345947265625 * InternalPrior_29 + 0.03219258206795216903373102468322031199932098388671875 * InternalPrior_30 - 0.0187219567308466207367079192636083462275564670562744140625 * InternalPrior_31 - 0.0672334446096372884138503422946087084710597991943359375 * InternalPrior_32 + 0.0297540086643793520726486434568869299255311489105224609375 * InternalPrior_79 + 0.05285652625615033795014596762484870851039886474609375 * InternalPrior_83 + 0.4184586803183012460038980862009339034557342529296875 * InternalPrior_88 + 1.038851875614035247252786575700156390666961669921875 * InternalPrior_151;
rhoOmegaHLXALL = 1 / ( 1 + exp( -( logit_rhoOmegaHLXALL ) ) );
logit_rhoOmegaHLXKLALL = 0 - 0.02957701284720991308230253480360261164605617523193359375 * InternalPrior_24 + 0.0125126730966004205691799455735235824249684810638427734375 * InternalPrior_25 - 0.0995101500409684425196843449157313443720340728759765625 * InternalPrior_26 - 0.030722280554941978902849797350427252240478992462158203125 * InternalPrior_27 - 0.10688113377303472273371909295747173018753528594970703125 * InternalPrior_28 + 0.0367433868189965540107522201651590876281261444091796875 * InternalPrior_29 + 0.0328851164748974744700404926334158517420291900634765625 * InternalPrior_30 - 0.03192762657045235263897353661377565003931522369384765625 * InternalPrior_31 - 0.07244340814602413802791858188356854952871799468994140625 * InternalPrior_32 + 0.0297540086643793520726486434568869299255311489105224609375 * InternalPrior_79 + 0.05285652625615033795014596762484870851039886474609375 * InternalPrior_83 + 0.4184586803183012460038980862009339034557342529296875 * InternalPrior_88 + 1.038851875614035247252786575700156390666961669921875 * InternalPrior_151;
rhoOmegaHLXKLALL = 1 / ( 1 + exp( -( logit_rhoOmegaHLXKLALL ) ) );
logit_rhoOmegaS1ALL = 0 - 0.07507164864282944716222800707328133285045623779296875 * InternalPrior_54 + 0.09960562850004406332260487033636309206485748291015625 * InternalPrior_55 - 0.0306041368390080163741640006946909124962985515594482421875 * InternalPrior_56 - 0.036817067129036130934682802262614131905138492584228515625 * InternalPrior_57 - 0.135685346615879998122267124927020631730556488037109375 * InternalPrior_58 + 0.0280685207202719284869107951863043126650154590606689453125 * InternalPrior_59 - 0.10025381469756687591310395646360120736062526702880859375 * InternalPrior_60 - 0.0297028855451873692594677578426853870041668415069580078125 * InternalPrior_61 + 0.393354331376929045038792764898971654474735260009765625 * InternalPrior_63 + 0.10473418220161934133471959285088814795017242431640625 * InternalPrior_64 - 0.1307354758261550509157444821539684198796749114990234375 * InternalPrior_65 - 0.10715116262751601949876345543088973499834537506103515625 * InternalPrior_79 - 0.08517474249027405519552047508113901130855083465576171875 * InternalPrior_83 - 0.06914192051758705215291911372332833707332611083984375 * InternalPrior_88 + 0.9978547267248860652699704587575979530811309814453125 * InternalPrior_151;
rhoOmegaS1ALL = 1 / ( 1 + exp( -( logit_rhoOmegaS1ALL ) ) );
logit_rhoOmegaKALL = 0 + 0.01321756273587495165988681122826164937578141689300537109375 * InternalPrior_24 - 0.025248456713556292896338817399737308733165264129638671875 * InternalPrior_25 - 0.00914818145908278222699916426563504501245915889739990234375 * InternalPrior_26 + 0.022270374312334563493553929447443806566298007965087890625 * InternalPrior_27 + 0.02048606708372481544078169690692448057234287261962890625 * InternalPrior_28 + 0.10139424599694890627432641849736683070659637451171875 * InternalPrior_29 - 0.1107669226783098981314878983539529144763946533203125 * InternalPrior_30 + 0.01900289767333880608379814702857402153313159942626953125 * InternalPrior_31 - 0.04408997611815003436763760191752226091921329498291015625 * InternalPrior_32 + 0.0771369717148842060083779870183207094669342041015625 * InternalPrior_79 + 0.239297722886786357054944573974353261291980743408203125 * InternalPrior_83 + 0.36285901761795458231318889374961145222187042236328125 * InternalPrior_87 - 0.175053145060481363248783281960641033947467803955078125 * InternalPrior_88 + 1.018729380398423867148949284455738961696624755859375 * InternalPrior_151;
rhoOmegaKALL = 1 / ( 1 + exp( -( logit_rhoOmegaKALL ) ) );
logit_rhoOmegaHALL = 0 + 0.09051910267891273564888621194768347777426242828369140625 * InternalPrior_24 + 0.018304182653347385312248007949165184982120990753173828125 * InternalPrior_25 + 0.041399825088438778342148083311258233152329921722412109375 * InternalPrior_26 - 0.08992244754181932808734245554660446941852569580078125 * InternalPrior_27 - 0.026832606809654720170232877762828138656914234161376953125 * InternalPrior_28 - 0.05858134973460270289447038294383673928678035736083984375 * InternalPrior_29 + 0.05860229907853253816796268438338302075862884521484375 * InternalPrior_30 + 0.01526614699379868524131698137580315233208239078521728515625 * InternalPrior_31 - 0.022778838836605079520847283447437803260982036590576171875 * InternalPrior_32 + 0.0771369717148842337639536026472342200577259063720703125 * InternalPrior_79 + 0.239297722886786357054944573974353261291980743408203125 * InternalPrior_83 + 0.36285901761795458231318889374961145222187042236328125 * InternalPrior_87 - 0.1750531450604813354932076663317275233566761016845703125 * InternalPrior_88 + 1.018729380398423867148949284455738961696624755859375 * InternalPrior_151;
rhoOmegaHALL = 1 / ( 1 + exp( -( logit_rhoOmegaHALL ) ) );
logit_rhoOmegaCALL = 0 - 0.10373666541478765434902697961661033332347869873046875 * InternalPrior_24 + 0.006944274060208885900047359740483443601988255977630615234375 * InternalPrior_25 - 0.032251643629356015197107154790501226671040058135986328125 * InternalPrior_26 + 0.067652073229484799288258045635302551090717315673828125 * InternalPrior_27 + 0.006346539725929900392642490913885922054760158061981201171875 * InternalPrior_28 - 0.04281289626234617562428041992461658082902431488037109375 * InternalPrior_29 + 0.0521646235997773877191008295994834043085575103759765625 * InternalPrior_30 - 0.03426904466713749652928555633479845710098743438720703125 * InternalPrior_31 + 0.06686881495475509307180317364327493123710155487060546875 * InternalPrior_32 + 0.0771369717148842337639536026472342200577259063720703125 * InternalPrior_79 + 0.239297722886786357054944573974353261291980743408203125 * InternalPrior_83 + 0.36285901761795458231318889374961145222187042236328125 * InternalPrior_87 - 0.1750531450604813354932076663317275233566761016845703125 * InternalPrior_88 + 1.018729380398423867148949284455738961696624755859375 * InternalPrior_151;
rhoOmegaCALL = 1 / ( 1 + exp( -( logit_rhoOmegaCALL ) ) );
logit_rhoOmegaDi = 0 - 0.00803933047155168216402199021786145749501883983612060546875 * InternalPrior_54 + 0.061186313142081609484090876094342092983424663543701171875 * InternalPrior_55 + 0.06249867820891925884740913943460327573120594024658203125 * InternalPrior_56 - 0.1612464648655567156509960113908164203166961669921875 * InternalPrior_57 - 0.0178748782654701045269352022160092019475996494293212890625 * InternalPrior_58 + 0.0945171458083726434562521490079234354197978973388671875 * InternalPrior_59 + 0.08517584395864240265350275649325340054929256439208984375 * InternalPrior_60 + 0.04946155896704655663409511134886997751891613006591796875 * InternalPrior_61 - 0.1559853835582016567951058050311985425651073455810546875 * InternalPrior_63 + 0.3905712425378091712246941824560053646564483642578125 * InternalPrior_64 + 0.034965984810473700605815139397236634977161884307861328125 * InternalPrior_65 - 0.10715116262751551989840237411044654436409473419189453125 * InternalPrior_79 - 0.08517474249027397192879362819439847953617572784423828125 * InternalPrior_83 - 0.06914192051758705215291911372332833707332611083984375 * InternalPrior_88 + 0.99785472672488584322536553372628986835479736328125 * InternalPrior_151;
rhoOmegaDi = 1 / ( 1 + exp( -( logit_rhoOmegaDi ) ) );
logit_rhoOmegaPALL = 0 + 0.060383817376493210959953472638517268933355808258056640625 * InternalPrior_24 - 0.018670402952302100896275760533171705901622772216796875 * InternalPrior_25 + 0.01540022071849264130583012644137852475978434085845947265625 * InternalPrior_26 + 0.0225131527114290873325952446748488000594079494476318359375 * InternalPrior_27 - 0.045526893417830595345296984532978967763483524322509765625 * InternalPrior_28 + 0.0311574541701356115541710067873282241635024547576904296875 * InternalPrior_29 - 0.005558818543912174940657688892997612128965556621551513671875 * InternalPrior_30 - 0.09127392541079536181225506652481271885335445404052734375 * InternalPrior_31 + 0.062095788193020119705156645295573980547487735748291015625 * InternalPrior_32 + 0.378577129978694471024169843076379038393497467041015625 * InternalPrior_79 - 0.31335902765860035312783793415292166173458099365234375 * InternalPrior_83 - 0.10242032081522293995856642823127913288772106170654296875 * InternalPrior_88 + 1.0089576573504250855961572597152553498744964599609375 * InternalPrior_151;
rhoOmegaPALL = 1 / ( 1 + exp( -( logit_rhoOmegaPALL ) ) );
logit_rhoOmegaGALL = 0 - 0.060383817376493266471104703896344290114939212799072265625 * InternalPrior_24 + 0.0186704029523020904879349046723291394300758838653564453125 * InternalPrior_25 - 0.01540022071849264130583012644137852475978434085845947265625 * InternalPrior_26 - 0.02251315271142907692425438881400623358786106109619140625 * InternalPrior_27 + 0.0455268934178305884064030806257505901157855987548828125 * InternalPrior_28 - 0.0311574541701356289014057665553991682827472686767578125 * InternalPrior_29 + 0.00555881854391217407329595090459406492300331592559814453125 * InternalPrior_30 + 0.09127392541079536181225506652481271885335445404052734375 * InternalPrior_31 - 0.06209578819302012664405054920280235819518566131591796875 * InternalPrior_32 + 0.378577129978694471024169843076379038393497467041015625 * InternalPrior_79 - 0.31335902765860035312783793415292166173458099365234375 * InternalPrior_83 - 0.10242032081522293995856642823127913288772106170654296875 * InternalPrior_88 + 1.0089576573504250855961572597152553498744964599609375 * InternalPrior_151;
rhoOmegaGALL = 1 / ( 1 + exp( -( logit_rhoOmegaGALL ) ) );
logit_rhoOmegaDemandALL = 0 - 0.00889528587573966411650161489887977950274944305419921875 * InternalPrior_54 + 0.0623984134601502926642524471390061080455780029296875 * InternalPrior_55 + 0.1052253071549365814885135250733583234250545501708984375 * InternalPrior_56 - 0.03455073984222038763203244116084533743560314178466796875 * InternalPrior_57 - 0.03518862142150717964295125739226932637393474578857421875 * InternalPrior_58 + 0.397800580811249970825116406558663584291934967041015625 * InternalPrior_59 - 0.05371480549282757477325134232160053215920925140380859375 * InternalPrior_60 + 0.08032541795372698245625286972426692955195903778076171875 * InternalPrior_61 - 0.04640363915900939939529479261182132177054882049560546875 * InternalPrior_63 - 0.20731539157515133098286241875030100345611572265625 * InternalPrior_64 + 0.024009585284520629233639965605107136070728302001953125 * InternalPrior_65 - 0.10715116262751563092070483662610058672726154327392578125 * InternalPrior_79 - 0.08517474249027391641764239693657145835459232330322265625 * InternalPrior_83 - 0.06914192051758705215291911372332833707332611083984375 * InternalPrior_88 + 0.99785472672488584322536553372628986835479736328125 * InternalPrior_151;
rhoOmegaDemandALL = 1 / ( 1 + exp( -( logit_rhoOmegaDemandALL ) ) );
logit_rhoOmegahi = 0 + 0.045326690102081068634021221441798843443393707275390625 * InternalPrior_54 + 0.0160632347040748878208571426284834160469472408294677734375 * InternalPrior_55 - 0.2252760987302409312338369318240438587963581085205078125 * InternalPrior_56 + 0.214157689661344907694484618332353420555591583251953125 * InternalPrior_57 - 0.2010642055059254917903643899990129284560680389404296875 * InternalPrior_58 + 0.0172529728393083330029167399288780870847404003143310546875 * InternalPrior_59 + 0.269515837676693070790179262985475361347198486328125 * InternalPrior_60 + 0.073151732039431538456852877061464823782444000244140625 * InternalPrior_61 + 0.0038699180156793176223184449469272294663824141025543212890625 * InternalPrior_63 - 0.0163764527738599341422087718456168659031391143798828125 * InternalPrior_64 + 0.1133413022110492940353054791557951830327510833740234375 * InternalPrior_65 - 0.1071511626275150341758291006044601090252399444580078125 * InternalPrior_79 - 0.08517474249027363886188624064743635244667530059814453125 * InternalPrior_83 - 0.0691419205175869411306166512076742947101593017578125 * InternalPrior_88 + 0.99785472672488551015845814617932774126529693603515625 * InternalPrior_151;
rhoOmegahi = 1 / ( 1 + exp( -( logit_rhoOmegahi ) ) );
logit_rhoOmegaCPi = 0 + 0.045745199219597541817616814796565449796617031097412109375 * InternalPrior_54 + 0.0154626366596967747268909221247668028809130191802978515625 * InternalPrior_55 - 0.0214488336917460220565345707655069418251514434814453125 * InternalPrior_56 - 0.0070676131063605422688578272527593071572482585906982421875 * InternalPrior_57 - 0.0290118438545131536454579901374017936177551746368408203125 * InternalPrior_58 + 0.0133686745528612087319242363037119503132998943328857421875 * InternalPrior_59 - 0.044263984661138351672793334046218660660088062286376953125 * InternalPrior_60 - 0.45383036834439127726881224589305929839611053466796875 * InternalPrior_61 - 0.05604783382466849150915777499903924763202667236328125 * InternalPrior_63 - 0.0211343790583567621432781180601523374207317829132080078125 * InternalPrior_64 + 0.124087779397960284999413715922855772078037261962890625 * InternalPrior_65 - 0.1071511626275150341758291006044601090252399444580078125 * InternalPrior_79 - 0.08517474249027363886188624064743635244667530059814453125 * InternalPrior_83 - 0.0691419205175869411306166512076742947101593017578125 * InternalPrior_88 + 0.99785472672488551015845814617932774126529693603515625 * InternalPrior_151;
rhoOmegaCPi = 1 / ( 1 + exp( -( logit_rhoOmegaCPi ) ) );
logit_rhoOmegaCi = 0 + 0.044322408668313113822012638820524443872272968292236328125 * InternalPrior_54 + 0.0178756665190540064980240231307107023894786834716796875 * InternalPrior_55 - 0.1052768304371851371126211915907333604991436004638671875 * InternalPrior_56 - 0.201971420476547702804737127735279500484466552734375 * InternalPrior_57 - 0.1903651210996909759476380941123352386057376861572265625 * InternalPrior_58 - 0.186953567517946783738125304807908833026885986328125 * InternalPrior_59 - 0.227959486257003296483247822834528051316738128662109375 * InternalPrior_60 + 0.1344375244727667173538776523855631239712238311767578125 * InternalPrior_61 - 0.106278533888511994565106988375191576778888702392578125 * InternalPrior_63 - 0.1014070841252887322792020086126285605132579803466796875 * InternalPrior_64 + 0.11747993493852477986383320285312947817146778106689453125 * InternalPrior_65 - 0.10715116262751502029804129279000335372984409332275390625 * InternalPrior_79 - 0.0851747424902736527396740484618931077420711517333984375 * InternalPrior_83 - 0.06914192051758695500840445902213105000555515289306640625 * InternalPrior_88 + 0.99785472672488551015845814617932774126529693603515625 * InternalPrior_151;
rhoOmegaCi = 1 / ( 1 + exp( -( logit_rhoOmegaCi ) ) );
logit_rhoOmegaTradeALL = 0 + 0.045430891381428924191698826007268507964909076690673828125 * InternalPrior_54 + 0.0172409172937041839379634922124751028604805469512939453125 * InternalPrior_55 - 0.1733849469142259014375895276316441595554351806640625 * InternalPrior_56 + 0.185600400406595589242186861156369559466838836669921875 * InternalPrior_57 + 0.29654280633904883668350294101401232182979583740234375 * InternalPrior_58 + 0.037627342846236651319191679476716672070324420928955078125 * InternalPrior_59 - 0.2162739325598036776998611685485229827463626861572265625 * InternalPrior_60 + 0.079309721861274107279626832678331993520259857177734375 * InternalPrior_61 + 0.021597564028307196515310550921640242449939250946044921875 * InternalPrior_63 + 0.09367486391846104043512610815014340914785861968994140625 * InternalPrior_64 + 0.110629261459400940470487739730742760002613067626953125 * InternalPrior_65 - 0.10715116262751477049786075212978175841271877288818359375 * InternalPrior_79 - 0.08517474249027374988418870316309039480984210968017578125 * InternalPrior_83 - 0.0691419205175869411306166512076742947101593017578125 * InternalPrior_88 + 0.9978547267248856211807606086949817836284637451171875 * InternalPrior_151;
rhoOmegaTradeALL = 1 / ( 1 + exp( -( logit_rhoOmegaTradeALL ) ) );
logit_rhoOmegaYi = 0 + 0.048938133585130126623763402449185377918183803558349609375 * InternalPrior_54 + 0.0205287758085896665516401071727159433066844940185546875 * InternalPrior_55 + 0.0135669840687313685012593822420967626385390758514404296875 * InternalPrior_56 - 0.2370314438987908001177373762402567081153392791748046875 * InternalPrior_57 + 0.2365267919173210942052065774987568147480487823486328125 * InternalPrior_58 - 0.08214159038349118369115586801854078657925128936767578125 * InternalPrior_59 + 0.2316707127401091692586732051495346240699291229248046875 * InternalPrior_60 + 0.030492520383353323432107373491817270405590534210205078125 * InternalPrior_61 + 0.1560650656938767089076947058856603689491748809814453125 * InternalPrior_63 - 0.12366102875484046019760597800996038131415843963623046875 * InternalPrior_64 + 0.12100933390346670093240533105927170254290103912353515625 * InternalPrior_65 - 0.10715116262751415987519720829368452541530132293701171875 * InternalPrior_79 - 0.08517474249027302823922269681133911944925785064697265625 * InternalPrior_83 - 0.0691419205175873019530996543835499323904514312744140625 * InternalPrior_88 + 0.9978547267248856211807606086949817836284637451171875 * InternalPrior_151;
rhoOmegaYi = 1 / ( 1 + exp( -( logit_rhoOmegaYi ) ) );
logit_rhoOmegaTCi = 0 + 0.045555872009598270822028354132271488197147846221923828125 * InternalPrior_54 + 0.0270696641290025345749636898062817635945975780487060546875 * InternalPrior_55 + 0.375564977469915628471852642178419046103954315185546875 * InternalPrior_56 + 0.2018065994764264292626876340364105999469757080078125 * InternalPrior_57 - 0.04200415973606920483351956363549106754362583160400390625 * InternalPrior_58 - 0.151343712423294363134118611924350261688232421875 * InternalPrior_59 - 0.0183179318532363764882031631486825062893331050872802734375 * InternalPrior_60 + 0.057092070412650665345299927366795600391924381256103515625 * InternalPrior_61 + 0.0380627530725642093667460130745894275605678558349609375 * InternalPrior_63 + 0.00586763805755450944257045620133794727735221385955810546875 * InternalPrior_64 + 0.1282132929145159139228127287424285896122455596923828125 * InternalPrior_65 - 0.107151162627514728864497328686411492526531219482421875 * InternalPrior_79 - 0.0851747424902732086504641983992769382894039154052734375 * InternalPrior_83 - 0.0691419205175863582635287230004905723035335540771484375 * InternalPrior_88 + 0.99785472672488551015845814617932774126529693603515625 * InternalPrior_151;
rhoOmegaTCi = 1 / ( 1 + exp( -( logit_rhoOmegaTCi ) ) );
logit_rhoOmegaWPi = 0 + 0.344722883454007089643056360728223808109760284423828125 * InternalPrior_54 - 0.221348172700893408570976816918118856847286224365234375 * InternalPrior_55 + 0.01368536366225838775412260162056554690934717655181884765625 * InternalPrior_56 - 0.00399505367416812424974370543395707500167191028594970703125 * InternalPrior_57 - 0.00116329804162581423344902109562326586456038057804107666015625 * InternalPrior_58 + 0.0061578504966396212239043705949370632879436016082763671875 * InternalPrior_59 + 0.00234454290918969208978861473724464303813874721527099609375 * InternalPrior_60 + 0.00176124422771496073718278108088952649268321692943572998046875 * InternalPrior_61 - 0.0107908607645448607892380010753186070360243320465087890625 * InternalPrior_63 + 0.0044982077880578764939034641656689927913248538970947265625 * InternalPrior_64 - 0.250105084724063508883062922905082814395427703857421875 * InternalPrior_65 - 0.107151162627511953306935765795060433447360992431640625 * InternalPrior_79 - 0.0851747424902682681580046164526720531284809112548828125 * InternalPrior_83 - 0.0691419205175860807077725667113554663956165313720703125 * InternalPrior_88 + 0.99785472672488462198003844605409540235996246337890625 * InternalPrior_151;
rhoOmegaWPi = 1 / ( 1 + exp( -( logit_rhoOmegaWPi ) ) );
logit_rhoOmegaWCi = 0 - 0.29090367006426642859651110484264791011810302734375 * InternalPrior_54 - 0.3819013048311072910934171886765398085117340087890625 * InternalPrior_55 + 0.007773533604416759702770978179842131794430315494537353515625 * InternalPrior_56 - 0.00098432215598447136452320282984373989165760576725006103515625 * InternalPrior_57 + 0.0020541464002010061985770139614260187954641878604888916015625 * InternalPrior_58 + 0.00169449557543907732004573318818074767477810382843017578125 * InternalPrior_59 + 0.0020123731851539009181373263146497265552170574665069580078125 * InternalPrior_60 + 0.0034954131606734569100158882548612382379360496997833251953125 * InternalPrior_61 - 0.0010236420700890608119493219163587127695791423320770263671875 * InternalPrior_63 + 4.91012340293729983406630090758682172236149199306964874267578125e-05 * InternalPrior_64 + 0.01448701211951943131073239356965132174082100391387939453125 * InternalPrior_65 - 0.107151162627513951708380091076833195984363555908203125 * InternalPrior_79 - 0.0851747424902740413177326672666822560131549835205078125 * InternalPrior_83 - 0.069141920517586885619465419949847273528575897216796875 * InternalPrior_88 + 0.99785472672488595424766799624194391071796417236328125 * InternalPrior_151;
rhoOmegaWCi = 1 / ( 1 + exp( -( logit_rhoOmegaWCi ) ) );
log_sigmaOmegaALL = -8.0955422999999999689180185669101774692535400390625 - 0.63760403988225788918242642466793768107891082763671875 * InternalPrior_99 + 1.69883815421962225400420720688998699188232421875 * InternalPrior_100 - 0.6029318548505544494986452264129184186458587646484375 * InternalPrior_101 + 1.1046104890400645359704867587424814701080322265625 * InternalPrior_102 + 0.042834546233434245277038598942453972995281219482421875 * InternalPrior_108 - 0.00128415015234107179366296325184748639003373682498931884765625 * InternalPrior_145 + 0.00210599132874759488454063927065362804569303989410400390625 * InternalPrior_146 - 0.003817918010179486600075282609623172902502119541168212890625 * InternalPrior_148 + 0.0545007939169952770885885229290579445660114288330078125 * InternalPrior_149;
sigmaOmegaALL = exp( log_sigmaOmegaALL );
log_sigmaOmegaS0ALL = -9.2122422999999997728082234971225261688232421875 - 0.022120490856237511045900845374490018002688884735107421875 * InternalPrior_102 - 0.0726275096981637002802045799398911185562610626220703125 * InternalPrior_108 - 0.1448428597720038124574415405731997452676296234130859375 * InternalPrior_142 - 1.992873747290512920216087877633981406688690185546875 * InternalPrior_143 - 1.1643807127092717923488862652448005974292755126953125 * InternalPrior_145 + 0.5146665864527875111633647975395433604717254638671875 * InternalPrior_146 - 0.260641735098657456592974313025479204952716827392578125 * InternalPrior_148 + 0.55514395814248052030137614565319381654262542724609375 * InternalPrior_149;
sigmaOmegaS0ALL = exp( log_sigmaOmegaS0ALL );
log_sigmaOmegaTALL = -9.2103845999999993665596775826998054981231689453125 - 0.0219383147817364433651565747140921303071081638336181640625 * InternalPrior_102 - 0.07106797142236311037866158812903449870645999908447265625 * InternalPrior_108 - 0.34866041057553343041064408680540509521961212158203125 * InternalPrior_109 - 0.78898984978233610565467870401334948837757110595703125 * InternalPrior_110 + 0.2417397197408064635215652060651336796581745147705078125 * InternalPrior_111 - 0.5573316239864734011888458553585223853588104248046875 * InternalPrior_112 + 0.00882486881157125598040824598911058274097740650177001953125 * InternalPrior_113 + 1.6310009004984558078632517208461649715900421142578125 * InternalPrior_114 + 0.00614096877931744576650796574313062592409551143646240234375 * InternalPrior_115 - 0.062040659903266348607075997279025614261627197265625 * InternalPrior_116 + 0.45688922048297353484258565003983676433563232421875 * InternalPrior_117 + 0.182689343172508511514706697198562324047088623046875 * InternalPrior_145 - 0.5244367062619283981206308453693054616451263427734375 * InternalPrior_146 - 0.999821368785031694415010861121118068695068359375 * InternalPrior_147 - 0.57616690766547495883287410833872854709625244140625 * InternalPrior_148 + 0.600014823495349514104191257501952350139617919921875 * InternalPrior_149;
sigmaOmegaTALL = exp( log_sigmaOmegaTALL );
log_sigmaOmegaNTALL = -9.2103845999999993665596775826998054981231689453125 - 0.0219383147817364433651565747140921303071081638336181640625 * InternalPrior_102 - 0.07106797142236311037866158812903449870645999908447265625 * InternalPrior_108 - 0.50550020922489025121393524386803619563579559326171875 * InternalPrior_109 + 1.6266769706460306732509479843429289758205413818359375 * InternalPrior_110 + 0.12078457547077188494188959566599805839359760284423828125 * InternalPrior_111 + 0.809978638491892777295788619085215032100677490234375 * InternalPrior_112 + 0.212273250247893674469423785922117531299591064453125 * InternalPrior_113 - 0.12101920270228816445268194001982919871807098388671875 * InternalPrior_114 + 0.01228067831521767981628467936161541729234158992767333984375 * InternalPrior_115 - 0.0457078560625182872545479995096684433519840240478515625 * InternalPrior_116 - 0.59312198278773087256610097028897143900394439697265625 * InternalPrior_117 + 0.182689343172508511514706697198562324047088623046875 * InternalPrior_145 - 0.5244367062619283981206308453693054616451263427734375 * InternalPrior_146 - 0.9998213687850323605488256362150423228740692138671875 * InternalPrior_147 - 0.57616690766547495883287410833872854709625244140625 * InternalPrior_148 + 0.600014823495349514104191257501952350139617919921875 * InternalPrior_149;
sigmaOmegaNTALL = exp( log_sigmaOmegaNTALL );
log_sigmaOmegaWALL = -9.2103845999999993665596775826998054981231689453125 - 0.0219383147817364433651565747140921303071081638336181640625 * InternalPrior_102 - 0.07106797142236311037866158812903449870645999908447265625 * InternalPrior_108 + 0.85416061980031887657105471589602530002593994140625 * InternalPrior_109 - 0.83768712086367980163004176574759185314178466796875 * InternalPrior_110 - 0.362524295211706315544830658836872316896915435791015625 * InternalPrior_111 - 0.252647014505500866476950250216759741306304931640625 * InternalPrior_112 - 0.221098119059593367641269878731691278517246246337890625 * InternalPrior_113 - 1.5099816977961848518674514707527123391628265380859375 * InternalPrior_114 - 0.0184216470945825043503685236601086216978728771209716796875 * InternalPrior_115 + 0.1077485159659068714166352265237946994602680206298828125 * InternalPrior_116 + 0.1362327623047223379426640121891978196799755096435546875 * InternalPrior_117 + 0.182689343172508511514706697198562324047088623046875 * InternalPrior_145 - 0.5244367062619283981206308453693054616451263427734375 * InternalPrior_146 - 0.99982136878501803867180797169567085802555084228515625 * InternalPrior_147 - 0.57616690766547495883287410833872854709625244140625 * InternalPrior_148 + 0.600014823495349514104191257501952350139617919921875 * InternalPrior_149;
sigmaOmegaWALL = exp( log_sigmaOmegaWALL );
log_sigmaOmegaKKALL = -9.2103845999999993665596775826998054981231689453125 - 0.0216907296718517363098843730995213263668119907379150390625 * InternalPrior_102 - 0.06901403918470368215043464488189783878624439239501953125 * InternalPrior_108 + 0.205279647701667122827728917400236241519451141357421875 * InternalPrior_109 + 0.607201185146081012788954467396251857280731201171875 * InternalPrior_110 - 0.14429887387051676395088861681870184838771820068359375 * InternalPrior_111 + 0.373027343164438363043444724098662845790386199951171875 * InternalPrior_112 - 0.51512238783897412730539144831709563732147216796875 * InternalPrior_113 + 0.003296654760989135846127595641519292257726192474365234375 * InternalPrior_114 + 0.815405186695411732245020175469107925891876220703125 * InternalPrior_115 + 0.3683356629053575748145021862001158297061920166015625 * InternalPrior_116 + 1.7738317659250555369254698234726674854755401611328125 * InternalPrior_117 + 0.070172662223023929417564659161143936216831207275390625 * InternalPrior_145 - 0.13807324233280227065989720358629710972309112548828125 * InternalPrior_146 + 0.8500367918736253525224810800864361226558685302734375 * InternalPrior_148 + 0.67571093196806863989678504367475397884845733642578125 * InternalPrior_149;
sigmaOmegaKKALL = exp( log_sigmaOmegaKKALL );
log_sigmaOmegaHLALL = -9.2103845999999993665596775826998054981231689453125 - 0.0216907296718517363098843730995213263668119907379150390625 * InternalPrior_102 - 0.06901403918470368215043464488189783878624439239501953125 * InternalPrior_108 + 0.34995940759532684349863984607509337365627288818359375 * InternalPrior_109 + 0.50745247945894511598652343309368006885051727294921875 * InternalPrior_110 + 0.30828278862987634756365196153637953102588653564453125 * InternalPrior_111 - 1.593477258232500748391657907632179558277130126953125 * InternalPrior_112 + 0.52588222799888140190915919447434134781360626220703125 * InternalPrior_113 - 0.047798911837381184708473114142179838381707668304443359375 * InternalPrior_114 + 0.91369216279113241174769655117415823042392730712890625 * InternalPrior_115 + 0.058149308970372591554021113324779435060918331146240234375 * InternalPrior_116 - 0.8074423890775956902388088565203361213207244873046875 * InternalPrior_117 + 0.070172662223023929417564659161143936216831207275390625 * InternalPrior_145 - 0.13807324233280227065989720358629710972309112548828125 * InternalPrior_146 + 0.8500367918736253525224810800864361226558685302734375 * InternalPrior_148 + 0.67571093196806863989678504367475397884845733642578125 * InternalPrior_149;
sigmaOmegaHLALL = exp( log_sigmaOmegaHLALL );
log_sigmaOmegaKLALL = -9.2103845999999993665596775826998054981231689453125 - 0.0216907296718517363098843730995213263668119907379150390625 * InternalPrior_102 - 0.06901403918470368215043464488189783878624439239501953125 * InternalPrior_108 - 0.555445767011915503275076844147406518459320068359375 * InternalPrior_109 - 1.1093686330003837969826463449862785637378692626953125 * InternalPrior_110 - 0.03792744136957169887036656064083217643201351165771484375 * InternalPrior_111 + 1.21718677288992882523643856984563171863555908203125 * InternalPrior_112 - 0.138782140653611218983343178479117341339588165283203125 * InternalPrior_113 + 0.044137687794673134689116267281860928051173686981201171875 * InternalPrior_114 + 0.86517379423551987738250090842484496533870697021484375 * InternalPrior_115 + 0.2155513059431137523613841722180950455367565155029296875 * InternalPrior_116 - 0.97201073005519289527143200757564045488834381103515625 * InternalPrior_117 + 0.070172662223023929417564659161143936216831207275390625 * InternalPrior_145 - 0.13807324233280227065989720358629710972309112548828125 * InternalPrior_146 + 0.8500367918736253525224810800864361226558685302734375 * InternalPrior_148 + 0.67571093196806863989678504367475397884845733642578125 * InternalPrior_149;
sigmaOmegaKLALL = exp( log_sigmaOmegaKLALL );
log_sigmaOmegaHLXALL = -9.2103845999999993665596775826998054981231689453125 - 0.0216907296718516114097941027694105287082493305206298828125 * InternalPrior_102 - 0.069014039184703224183436987004824914038181304931640625 * InternalPrior_108 - 0.0069775347141264702777174733228093828074634075164794921875 * InternalPrior_109 - 0.0613763661378751435027112393072457052767276763916015625 * InternalPrior_110 + 1.4932634843217906794876626008772291243076324462890625 * InternalPrior_111 + 0.021677758569336236238456194769241847097873687744140625 * InternalPrior_112 - 0.6000126971232917494347702813684009015560150146484375 * InternalPrior_113 - 0.26426885269689626145606098361895419657230377197265625 * InternalPrior_114 - 1.3503682941646530935031478293240070343017578125 * InternalPrior_115 - 0.54326582725465322187829997346852906048297882080078125 * InternalPrior_116 + 0.0244003422281146471750634674435787019319832324981689453125 * InternalPrior_117 + 0.07017266222299149702745779677570681087672710418701171875 * InternalPrior_145 - 0.1380732423327704072590904615935869514942169189453125 * InternalPrior_146 + 0.85003679187362835012464756800909526646137237548828125 * InternalPrior_148 + 0.67571093196806486513850131814251653850078582763671875 * InternalPrior_149;
sigmaOmegaHLXALL = exp( log_sigmaOmegaHLXALL );
log_sigmaOmegaHLXKLALL = -9.2103845999999993665596775826998054981231689453125 - 0.0216907296718516114097941027694105287082493305206298828125 * InternalPrior_102 - 0.069014039184703224183436987004824914038181304931640625 * InternalPrior_108 + 0.00718424642904800896114902997169338050298392772674560546875 * InternalPrior_109 + 0.056091334533232929671076050226474762894213199615478515625 * InternalPrior_110 - 1.619319957711582436132857765187509357929229736328125 * InternalPrior_111 - 0.0184146163912025963294016861482305102981626987457275390625 * InternalPrior_112 + 0.72803499761699785874924373274552635848522186279296875 * InternalPrior_113 + 0.2646334219786157238019086435087956488132476806640625 * InternalPrior_114 - 1.2439028495574280253066490331548266112804412841796875 * InternalPrior_115 - 0.098770450564194478548785127713927067816257476806640625 * InternalPrior_116 - 0.0187789890203815292013533877479858347214758396148681640625 * InternalPrior_117 + 0.07017266222300332090267005469286232255399227142333984375 * InternalPrior_145 - 0.1380732423327831470682980352648883126676082611083984375 * InternalPrior_146 + 0.850036791873622465942617054679431021213531494140625 * InternalPrior_148 + 0.67571093196806486513850131814251653850078582763671875 * InternalPrior_149;
sigmaOmegaHLXKLALL = exp( log_sigmaOmegaHLXKLALL );
log_sigmaOmegaS1ALL = -9.2122422999999997728082234971225261688232421875 - 0.022120490856237511045900845374490018002688884735107421875 * InternalPrior_102 - 0.0726275096981637002802045799398911185562610626220703125 * InternalPrior_108 + 1.79830072157467579785361522226594388484954833984375 * InternalPrior_142 + 0.870999277525914106234949940699152648448944091796875 * InternalPrior_143 - 1.1643807127092717923488862652448005974292755126953125 * InternalPrior_145 + 0.5146665864527875111633647975395433604717254638671875 * InternalPrior_146 - 0.260641735098657456592974313025479204952716827392578125 * InternalPrior_148 + 0.55514395814248052030137614565319381654262542724609375 * InternalPrior_149;
sigmaOmegaS1ALL = exp( log_sigmaOmegaS1ALL );
log_sigmaOmegaKALL = -9.2103845999999993665596775826998054981231689453125 - 0.0219383147817364433651565747140921303071081638336181640625 * InternalPrior_102 - 0.07106797142236311037866158812903449870645999908447265625 * InternalPrior_108 + 1.4803581781031189823494287338689900934696197509765625 * InternalPrior_109 - 0.0225831555741029775530304135600090376101434230804443359375 * InternalPrior_110 + 0.406091236192893390022362609670381061732769012451171875 * InternalPrior_111 + 0.72366161648790516824902852022205479443073272705078125 * InternalPrior_112 + 0.8704604616361100166699316105223260819911956787109375 * InternalPrior_113 + 0.478167933667577871315046422751038335263729095458984375 * InternalPrior_114 + 0.1056009174920322646329395865905098617076873779296875 * InternalPrior_115 - 0.32834805596836857954912147761206142604351043701171875 * InternalPrior_116 - 0.01120166464767506121769091720352662377990782260894775390625 * InternalPrior_117 + 0.182689343172508511514706697198562324047088623046875 * InternalPrior_145 - 0.5244367062619283981206308453693054616451263427734375 * InternalPrior_146 + 0.99982136878488303555201355266035534441471099853515625 * InternalPrior_147 - 0.57616690766547495883287410833872854709625244140625 * InternalPrior_148 + 0.600014823495349514104191257501952350139617919921875 * InternalPrior_149;
sigmaOmegaKALL = exp( log_sigmaOmegaKALL );
log_sigmaOmegaHALL = -9.2103845999999993665596775826998054981231689453125 - 0.0219383147817364433651565747140921303071081638336181640625 * InternalPrior_102 - 0.07106797142236311037866158812903449870645999908447265625 * InternalPrior_108 - 1.4857557851426375084002984294784255325794219970703125 * InternalPrior_109 - 0.25315961728142311049083446050644852221012115478515625 * InternalPrior_110 + 0.15254613382839610213892456158646382391452789306640625 * InternalPrior_111 - 0.34905681166442104057523465598933398723602294921875 * InternalPrior_112 + 0.77541833535831716783803813086706213653087615966796875 * InternalPrior_113 - 0.75713301828800061432644952219561673700809478759765625 * InternalPrior_114 + 0.08889048467096637151652060993001214228570461273193359375 * InternalPrior_115 - 0.2300495775184751290343143637073808349668979644775390625 * InternalPrior_116 + 0.57791233978104450397239588710363022983074188232421875 * InternalPrior_117 + 0.182689343172508511514706697198562324047088623046875 * InternalPrior_145 - 0.5244367062619283981206308453693054616451263427734375 * InternalPrior_146 + 0.9998213687850350250840847365907393395900726318359375 * InternalPrior_147 - 0.57616690766547495883287410833872854709625244140625 * InternalPrior_148 + 0.600014823495349514104191257501952350139617919921875 * InternalPrior_149;
sigmaOmegaHALL = exp( log_sigmaOmegaHALL );
log_sigmaOmegaCALL = -9.2103845999999993665596775826998054981231689453125 - 0.0219383147817364433651565747140921303071081638336181640625 * InternalPrior_102 - 0.07106797142236311037866158812903449870645999908447265625 * InternalPrior_108 + 0.00539760703962302405833906249199571902863681316375732421875 * InternalPrior_109 + 0.275742772855510576146542689457419328391551971435546875 * InternalPrior_110 - 0.55863737002114499663463220713310874998569488525390625 * InternalPrior_111 - 0.3746048048234025262814839152269996702671051025390625 * InternalPrior_112 - 1.64587879699430406077453881152905523777008056640625 * InternalPrior_113 + 0.27896508462043667631036214515916071832180023193359375 * InternalPrior_114 - 0.1944914021630053391209713709031348116695880889892578125 * InternalPrior_115 + 0.55839763348670545806129439370124600827693939208984375 * InternalPrior_116 - 0.56671067513333428511401734795072115957736968994140625 * InternalPrior_117 + 0.182689343172508511514706697198562324047088623046875 * InternalPrior_145 - 0.5244367062619283981206308453693054616451263427734375 * InternalPrior_146 + 0.999821368785164477088756029843352735042572021484375 * InternalPrior_147 - 0.57616690766547495883287410833872854709625244140625 * InternalPrior_148 + 0.600014823495349514104191257501952350139617919921875 * InternalPrior_149;
sigmaOmegaCALL = exp( log_sigmaOmegaCALL );
log_sigmaOmegaDi = -9.2122422999999997728082234971225261688232421875 - 0.022120490856237511045900845374490018002688884735107421875 * InternalPrior_102 - 0.0726275096981637002802045799398911185562610626220703125 * InternalPrior_108 - 1.6534578618026720686629005285794846713542938232421875 * InternalPrior_142 + 1.12187446976459881398113793693482875823974609375 * InternalPrior_143 - 1.1643807127092717923488862652448005974292755126953125 * InternalPrior_145 + 0.5146665864527875111633647975395433604717254638671875 * InternalPrior_146 - 0.260641735098657456592974313025479204952716827392578125 * InternalPrior_148 + 0.55514395814248052030137614565319381654262542724609375 * InternalPrior_149;
sigmaOmegaDi = exp( log_sigmaOmegaDi );
log_sigmaOmegaPALL = -9.2103845999999993665596775826998054981231689453125 - 0.0220642390158193903160199766944060684181749820709228515625 * InternalPrior_102 - 0.0721414754797298218846890449640341103076934814453125 * InternalPrior_108 - 0.00796207340986099416924037797116397996433079242706298828125 * InternalPrior_109 + 0.04611481303562388334160715430698473937809467315673828125 * InternalPrior_110 - 0.390489532983909815033740642320481128990650177001953125 * InternalPrior_111 - 0.031314571246982551844251219108627992682158946990966796875 * InternalPrior_112 - 0.427711910626874469709690629315446130931377410888671875 * InternalPrior_113 + 0.01264149794933779567818188382943844771943986415863037109375 * InternalPrior_114 + 0.3889483697841686904439484351314604282379150390625 * InternalPrior_115 - 1.580902217959591293805488021462224423885345458984375 * InternalPrior_116 - 0.014796235788862154014733363283085054717957973480224609375 * InternalPrior_117 + 0.92133830179557729689321377009036950767040252685546875 * InternalPrior_145 + 1.3139659046291336519374226554646156728267669677734375 * InternalPrior_146 - 0.31332030104553698635072578326798975467681884765625 * InternalPrior_148 + 0.56818929257033634616647077564266510307788848876953125 * InternalPrior_149;
sigmaOmegaPALL = exp( log_sigmaOmegaPALL );
log_sigmaOmegaGALL = -9.2103845999999993665596775826998054981231689453125 - 0.0220642390158193903160199766944060684181749820709228515625 * InternalPrior_102 - 0.0721414754797298218846890449640341103076934814453125 * InternalPrior_108 + 0.00796207340986099763868732992477816878817975521087646484375 * InternalPrior_109 - 0.04611481303562380007488030742024420760571956634521484375 * InternalPrior_110 + 0.3904895329839079831657500108121894299983978271484375 * InternalPrior_111 + 0.03131457124698251714978169957248610444366931915283203125 * InternalPrior_112 + 0.42771191062687508033235417315154336392879486083984375 * InternalPrior_113 - 0.012641497949337436590422356630369904451072216033935546875 * InternalPrior_114 - 0.388948369784162750750766690543969161808490753173828125 * InternalPrior_115 + 1.580902217959593070162327421712689101696014404296875 * InternalPrior_116 + 0.0147962357888620950341351800716438447125256061553955078125 * InternalPrior_117 + 0.92133830179557729689321377009036950767040252685546875 * InternalPrior_145 + 1.3139659046291336519374226554646156728267669677734375 * InternalPrior_146 - 0.31332030104553698635072578326798975467681884765625 * InternalPrior_148 + 0.56818929257033634616647077564266510307788848876953125 * InternalPrior_149;
sigmaOmegaGALL = exp( log_sigmaOmegaGALL );
log_sigmaOmegaDemandALL = -8.76664230000000088693923316895961761474609375 - 0.03731211933952273407388844361776136793196201324462890625 * InternalPrior_102 - 1.0013228469861361613624239907949231564998626708984375 * InternalPrior_103 - 1.437497099232732722384753287769854068756103515625 * InternalPrior_104 + 1.111126632519096713025419376208446919918060302734375 * InternalPrior_105 - 0.562164424884739499788111061207018792629241943359375 * InternalPrior_106 - 0.021001072239188685319977167864635703153908252716064453125 * InternalPrior_107 + 0.956367598315065237102317041717469692230224609375 * InternalPrior_108 - 0.0032118265603431651877830432795235537923872470855712890625 * InternalPrior_145 + 0.00524380323592522033793184021988054155372083187103271484375 * InternalPrior_146 - 0.00935860866864044078916595736927774851210415363311767578125 * InternalPrior_148 + 0.1189599851911069816612354088647407479584217071533203125 * InternalPrior_149;
sigmaOmegaDemandALL = exp( log_sigmaOmegaDemandALL );
log_sigmaOmegahi = -8.0955422999999999689180185669101774692535400390625 - 0.637607753978404634409571372088976204395294189453125 * InternalPrior_99 - 1.3717632107591459789119880952057428658008575439453125 * InternalPrior_100 - 1.1695464305338265642575379388290457427501678466796875 * InternalPrior_101 + 1.1046104890400645359704867587424814701080322265625 * InternalPrior_102 + 0.04283454623343425915482640675691072829067707061767578125 * InternalPrior_108 - 0.00128415015234125567435141679339949405402876436710357666015625 * InternalPrior_145 + 0.0021059913287475146535798753433255114941857755184173583984375 * InternalPrior_146 - 0.0038179180101795035136291733834923434187658131122589111328125 * InternalPrior_148 + 0.05450079391699529096637633074351469986140727996826171875 * InternalPrior_149;
sigmaOmegahi = exp( log_sigmaOmegahi );
log_sigmaOmegaCPi = -8.76664230000000088693923316895961761474609375 - 0.037312119339522720196100635803304612636566162109375 * InternalPrior_102 + 0.80229087676757571134800173240364529192447662353515625 * InternalPrior_103 - 0.51337815110755313785517728319973684847354888916015625 * InternalPrior_104 - 0.7012456323995832629947244640788994729518890380859375 * InternalPrior_105 + 0.0743890254688374941149930918982136063277721405029296875 * InternalPrior_106 + 1.793212394638340700936396387987770140171051025390625 * InternalPrior_107 + 0.95636759831506512608001457920181564986705780029296875 * InternalPrior_108 - 0.0032118265603405132292691437356779715628363192081451416015625 * InternalPrior_145 + 0.00524380323592697761281300472546718083322048187255859375 * InternalPrior_146 - 0.00935860866864017711119760889459939789958298206329345703125 * InternalPrior_148 + 0.1189599851911069816612354088647407479584217071533203125 * InternalPrior_149;
sigmaOmegaCPi = exp( log_sigmaOmegaCPi );
log_sigmaOmegaCi = -8.76664230000000088693923316895961761474609375 - 0.037312119339522720196100635803304612636566162109375 * InternalPrior_102 - 0.91739499788192813145570880806189961731433868408203125 * InternalPrior_103 + 1.6449830997470409332805729718529619276523590087890625 * InternalPrior_104 + 0.70267610738756658417258904592017643153667449951171875 * InternalPrior_105 + 0.43698469919430582564245924004353582859039306640625 * InternalPrior_106 + 0.62275622318681456146549635377596132457256317138671875 * InternalPrior_107 + 0.95636759831506512608001457920181564986705780029296875 * InternalPrior_108 - 0.00321182656034295875568940203947931877337396144866943359375 * InternalPrior_145 + 0.005243803235926161425417557637729260022751986980438232421875 * InternalPrior_146 - 0.0093586086686397000622417152726484346203505992889404296875 * InternalPrior_148 + 0.1189599851911069816612354088647407479584217071533203125 * InternalPrior_149;
sigmaOmegaCi = exp( log_sigmaOmegaCi );
log_sigmaOmegaTradeALL = -8.76664230000000088693923316895961761474609375 - 0.037312119339522796523933578782816766761243343353271484375 * InternalPrior_102 + 1.698856989576076781389701864100061357021331787109375 * InternalPrior_103 + 0.27952091429775982600602901584352366626262664794921875 * InternalPrior_104 + 1.005789569508403591413525646203197538852691650390625 * InternalPrior_105 - 0.079260529500244369938144473053398542106151580810546875 * InternalPrior_106 - 0.79873382994804120738052688466268591582775115966796875 * InternalPrior_107 + 0.956367598315054134872070790152065455913543701171875 * InternalPrior_108 - 0.0032118265603464910863673598129253150545991957187652587890625 * InternalPrior_145 + 0.005243803235932956337272958791118071530945599079132080078125 * InternalPrior_146 - 0.0093586086686524884437066162945484393276274204254150390625 * InternalPrior_148 + 0.11895998519110632940520844158527324907481670379638671875 * InternalPrior_149;
sigmaOmegaTradeALL = exp( log_sigmaOmegaTradeALL );
log_sigmaOmegaYi = -8.0955422999999999689180185669101774692535400390625 - 0.63688562732399878196787312845117412507534027099609375 * InternalPrior_99 - 0.327165128401704030647323406810755841434001922607421875 * InternalPrior_100 + 1.7729795497878859666940343231544829905033111572265625 * InternalPrior_101 + 1.1046104890400634257474621335859410464763641357421875 * InternalPrior_102 + 0.042834546233435209783291242047198466025292873382568359375 * InternalPrior_108 - 0.00128415015234140616161295778141493428847752511501312255859375 * InternalPrior_145 + 0.002105991328748286171845816028280751197598874568939208984375 * InternalPrior_146 - 0.003817918010179878647580853368026509997434914112091064453125 * InternalPrior_148 + 0.054500793916995145249604348691718769259750843048095703125 * InternalPrior_149;
sigmaOmegaYi = exp( log_sigmaOmegaYi );
log_sigmaOmegaTCi = -8.76664230000000088693923316895961761474609375 - 0.037312119339523060201901927257495117373764514923095703125 * InternalPrior_102 - 0.306739942795864861668775347425253130495548248291015625 * InternalPrior_103 - 0.4503535186183709182472512111417017877101898193359375 * InternalPrior_104 - 0.8737944865436999553054420175612904131412506103515625 * InternalPrior_105 + 1.648831801274063924012125426088459789752960205078125 * InternalPrior_106 - 0.91708605675153143099720409736619330942630767822265625 * InternalPrior_107 + 0.95636759831510698148804294760338962078094482421875 * InternalPrior_108 - 0.00321182656034092739449903319837176240980625152587890625 * InternalPrior_145 + 0.005243803235923554136033164496666358900256454944610595703125 * InternalPrior_146 - 0.00935860866864023088762536417561932466924190521240234375 * InternalPrior_148 + 0.1189599851911058436826351680792868137359619140625 * InternalPrior_149;
sigmaOmegaTCi = exp( log_sigmaOmegaTCi );
log_sigmaOmegaWPi = -8.76664230000000088693923316895961761474609375 - 0.03731211933952373327461060625864774920046329498291015625 * InternalPrior_102 - 0.275690078679680095063986300374381244182586669921875 * InternalPrior_103 + 0.4767247549138591278250487448531202971935272216796875 * InternalPrior_104 - 1.2445521904716851935290833353064954280853271484375 * InternalPrior_105 - 1.5187805715522337823841780846123583614826202392578125 * InternalPrior_106 - 0.67914765888633699120191522524692118167877197265625 * InternalPrior_107 + 0.95636759831510398388587645968073047697544097900390625 * InternalPrior_108 - 0.0032118265603451917784838531844116005231626331806182861328125 * InternalPrior_145 + 0.005243803235922577486716189554272204986773431301116943359375 * InternalPrior_146 - 0.009358608668636060612389115931364358402788639068603515625 * InternalPrior_148 + 0.11895998519111024294137024526207824237644672393798828125 * InternalPrior_149;
sigmaOmegaWPi = exp( log_sigmaOmegaWPi );
log_sigmaOmegaWCi = -8.0955422999999999689180185669101774692535400390625 + 1.912097421184536738536507982644252479076385498046875 * InternalPrior_99 + 9.0184941227139497877361706823506892760633490979671478271484375e-05 * InternalPrior_100 - 0.000501264403503649401579178590537821946782059967517852783203125 * InternalPrior_101 + 1.104610489040136922511692318948917090892791748046875 * InternalPrior_102 + 0.042834546233434113438054424705114797689020633697509765625 * InternalPrior_108 - 0.00128415015234136452824953433804466840228997170925140380859375 * InternalPrior_145 + 0.0021059913287478988948298042060969237354584038257598876953125 * InternalPrior_146 - 0.0038179180101798365805365609304544705082662403583526611328125 * InternalPrior_148 + 0.054500793916994423604638342339967493899166584014892578125 * InternalPrior_149;
sigmaOmegaWCi = exp( log_sigmaOmegaWCi );
phiLtauKG = 0 - 0.04381514109493196695854777544809621758759021759033203125 * InternalPrior_39 + 0.1772330106879017319609914693501195870339870452880859375 * InternalPrior_44 + 0.46546051748062711173048455748357810080051422119140625 * InternalPrior_86;
phiLtauHG = 0 - 0.13158071909745572281025260963360778987407684326171875 * InternalPrior_39 - 0.12656153060256147835360707176732830703258514404296875 * InternalPrior_44 + 0.465460517480626834174728401194442994892597198486328125 * InternalPrior_86;
phiLtauCG = 0 + 0.1753958601923875926242857303805067203938961029052734375 * InternalPrior_39 - 0.050671480085340232790702685861106147058308124542236328125 * InternalPrior_44 + 0.465460517480627389286240713772713206708431243896484375 * InternalPrior_86;
phiLtaub = 0 - 0.1581090762733120269611930552855483256280422210693359375 * InternalPrior_41 + 0.474327228819936108639154781485558487474918365478515625 * InternalPrior_77;
phiLtaul = 0 + 0.1581090762733120269611930552855483256280422210693359375 * InternalPrior_41 + 0.474327228819936108639154781485558487474918365478515625 * InternalPrior_77;
phiYtauKG = 0 - 0.04381514109493196695854777544809621758759021759033203125 * InternalPrior_40 + 0.1772330106879017319609914693501195870339870452880859375 * InternalPrior_45 + 0.46546051748062711173048455748357810080051422119140625 * InternalPrior_85;
phiYtauHG = 0 - 0.13158071909745572281025260963360778987407684326171875 * InternalPrior_40 - 0.12656153060256147835360707176732830703258514404296875 * InternalPrior_45 + 0.465460517480626834174728401194442994892597198486328125 * InternalPrior_85;
phiYtauCG = 0 + 0.1753958601923875926242857303805067203938961029052734375 * InternalPrior_40 - 0.050671480085340232790702685861106147058308124542236328125 * InternalPrior_45 + 0.465460517480627389286240713772713206708431243896484375 * InternalPrior_85;
phiYtaub = 0 - 0.1581090762733120269611930552855483256280422210693359375 * InternalPrior_42 + 0.474327228819936108639154781485558487474918365478515625 * InternalPrior_76;
phiYtaul = 0 + 0.1581090762733120269611930552855483256280422210693359375 * InternalPrior_42 + 0.474327228819936108639154781485558487474918365478515625 * InternalPrior_76;
phiuiotaTX = 0 - 0.0256395577815503004914798879099180339835584163665771484375 * InternalPrior_16 - 0.0002236489724723271228616627848140296919154934585094451904296875 * InternalPrior_17 + 0.11787470042379745438498872545096674002707004547119140625 * InternalPrior_18 - 0.02409118567784819531230056099957437254488468170166015625 * InternalPrior_19 + 0.0615922182908725523997617301574791781604290008544921875 * InternalPrior_20 + 0.043769840947262002306406003526717540808022022247314453125 * InternalPrior_21 + 0.01015559889437156991520705417997305630706250667572021484375 * InternalPrior_53 + 0.062104808426829881395914156883009127341210842132568359375 * InternalPrior_68 + 0.288032227205502755484900490046129561960697174072265625 * InternalPrior_78 + 0.377273952417074676102259900289936922490596771240234375 * InternalPrior_98;
phiuiotaTM = 0 - 0.0256395577815503004914798879099180339835584163665771484375 * InternalPrior_16 - 0.00022364897247232601155443598717198483427637256681919097900390625 * InternalPrior_17 - 0.117874700423797496018352148894337005913257598876953125 * InternalPrior_18 - 0.0240911856778481918428536090459601837210357189178466796875 * InternalPrior_19 + 0.0615922182908725523997617301574791781604290008544921875 * InternalPrior_20 + 0.043769840947262002306406003526717540808022022247314453125 * InternalPrior_21 + 0.01015559889437156991520705417997305630706250667572021484375 * InternalPrior_53 + 0.062104808426829881395914156883009127341210842132568359375 * InternalPrior_68 + 0.288032227205502755484900490046129561960697174072265625 * InternalPrior_78 + 0.377273952417074676102259900289936922490596771240234375 * InternalPrior_98;
phiuiotaWX = 0 + 0.0286222927106852507994627643483909196220338344573974609375 * InternalPrior_16 + 0.11125448810663061960379849324453971348702907562255859375 * InternalPrior_17 - 0.0116972979109787982021639862750816973857581615447998046875 * InternalPrior_19 - 0.06212686963555520691659950216489960439503192901611328125 * InternalPrior_20 - 0.060401126040695467256380624121447908692061901092529296875 * InternalPrior_21 + 0.01015559889437157858882443406400852836668491363525390625 * InternalPrior_53 + 0.062104808426829895273701964697465882636606693267822265625 * InternalPrior_68 + 0.28803222720550281099605172130395658314228057861328125 * InternalPrior_78 + 0.377273952417074676102259900289936922490596771240234375 * InternalPrior_98;
phiuiotaWM = 0 + 0.0226568228524153501834970114714451483450829982757568359375 * InternalPrior_16 - 0.1108071901616859700201445093625807203352451324462890625 * InternalPrior_17 + 0.0598796692666751784184242524133878760039806365966796875 * InternalPrior_19 - 0.06105756694618987012734834252114524133503437042236328125 * InternalPrior_20 - 0.0271385558538285408258783348856013617478311061859130859375 * InternalPrior_21 + 0.01015559889437157858882443406400852836668491363525390625 * InternalPrior_53 + 0.062104808426829895273701964697465882636606693267822265625 * InternalPrior_68 + 0.28803222720550281099605172130395658314228057861328125 * InternalPrior_78 + 0.377273952417074676102259900289936922490596771240234375 * InternalPrior_98;
phiutauKG = 0 - 0.178037494391283690475802359287627041339874267578125 * InternalPrior_43 - 0.040422237166444573153167851842226809822022914886474609375 * InternalPrior_46 + 0.46546051748062688968587963245227001607418060302734375 * InternalPrior_84;
phiutauHG = 0 + 0.12402543145958232206904625627430505119264125823974609375 * InternalPrior_43 - 0.1339738743857590563823833917922456748783588409423828125 * InternalPrior_46 + 0.4654605174806272227527870199992321431636810302734375 * InternalPrior_84;
phiutauCG = 0 + 0.054012062931701375345650006920550367794930934906005859375 * InternalPrior_43 + 0.1743961115522036087188695319127873517572879791259765625 * InternalPrior_46 + 0.465460517480627056219333326225751079618930816650390625 * InternalPrior_84;
phiutaub = 0 - 0.11011575229768276462660736569887376390397548675537109375 * InternalPrior_16 + 0.0033149629070863433945304254990560366422869265079498291015625 * InternalPrior_17 + 0.0177699177106677673465551237086401670239865779876708984375 * InternalPrior_19 - 0.0137083947084900258095441216710241860710084438323974609375 * InternalPrior_20 - 0.035415915291184173196992190923992893658578395843505859375 * InternalPrior_21 + 0.032193911942004972692732422956396476365625858306884765625 * InternalPrior_53 + 0.10126131348557400324583710471415542997419834136962890625 * InternalPrior_66 - 0.27039381722069066871227960291435010731220245361328125 * InternalPrior_67 - 0.1863208332966060642998940011239028535783290863037109375 * InternalPrior_68 - 0.022293366788747714934970645117573440074920654296875 * InternalPrior_78 + 0.3414527784493064377357995908823795616626739501953125 * InternalPrior_98;
phiutaul = 0 + 0.11011575229768273687103175006996025331318378448486328125 * InternalPrior_16 - 0.0033149629070863100011035129455194692127406597137451171875 * InternalPrior_17 - 0.017769917710667791632683787383939488790929317474365234375 * InternalPrior_19 + 0.0137083947084900188706502177637958084233105182647705078125 * InternalPrior_20 + 0.035415915291184173196992190923992893658578395843505859375 * InternalPrior_21 + 0.032193911942004972692732422956396476365625858306884765625 * InternalPrior_53 + 0.10126131348557403100141272034306894056499004364013671875 * InternalPrior_66 - 0.270393817220690724223430834172177128493785858154296875 * InternalPrior_67 - 0.1863208332966060642998940011239028535783290863037109375 * InternalPrior_68 - 0.022293366788747714934970645117573440074920654296875 * InternalPrior_78 + 0.3414527784493064377357995908823795616626739501953125 * InternalPrior_98;
phiutauD = 0 + 0.000532633498494062130983184299992672094958834350109100341796875 * InternalPrior_16 + 0.039439884304248717938889967626892030239105224609375 * InternalPrior_17 + 0.0989237358680119804876795797099475748836994171142578125 * InternalPrior_19 + 0.0032263834149399250698919683344456643681041896343231201171875 * InternalPrior_20 + 0.050421639794828075620269913770243874751031398773193359375 * InternalPrior_21 + 0.032193911942004944937156807327482965774834156036376953125 * InternalPrior_53 - 0.284798571482150986167170003682258538901805877685546875 * InternalPrior_66 + 0.047502038711258375014434562899623415432870388031005859375 * InternalPrior_67 - 0.1863208332966061198110452323817298747599124908447265625 * InternalPrior_68 - 0.0222933667887476975877358853495024959556758403778076171875 * InternalPrior_78 + 0.3414527784493064377357995908823795616626739501953125 * InternalPrior_98;
phiutauND = 0 - 0.000532633498494054324727542404360747241298668086528778076171875 * InternalPrior_16 - 0.039439884304248738755571679348577163182199001312255859375 * InternalPrior_17 - 0.09892373586801196660989177189549081958830356597900390625 * InternalPrior_19 - 0.003226383414939914227870243479401324293576180934906005859375 * InternalPrior_20 - 0.05042163979482804092580039423410198651254177093505859375 * InternalPrior_21 + 0.032193911942004944937156807327482965774834156036376953125 * InternalPrior_53 - 0.284798571482150986167170003682258538901805877685546875 * InternalPrior_66 + 0.047502038711258277869919908198426128365099430084228515625 * InternalPrior_67 - 0.1863208332966061198110452323817298747599124908447265625 * InternalPrior_68 - 0.0222933667887476975877358853495024959556758403778076171875 * InternalPrior_78 + 0.3414527784493064377357995908823795616626739501953125 * InternalPrior_98;
phiutauNT = 0 - 0.373728829634923709335225794347934424877166748046875 * InternalPrior_53 - 0.062063556941882778994479252787641598843038082122802734375 * InternalPrior_68 - 0.01448326184778804016917153063559453585185110569000244140625 * InternalPrior_78 + 0.325962316726458756210860201463219709694385528564453125 * InternalPrior_98;
phiutauLa = 0 - 0.021095303822112450309322895236618933267891407012939453125 * InternalPrior_16 - 6.534853470618800304510476184560729961958713829517364501953125e-05 * InternalPrior_17 - 0.03675844792908254665686484941033995710313320159912109375 * InternalPrior_19 - 0.0781577047035971472777049484648159705102443695068359375 * InternalPrior_20 + 0.0773926261831967832183210020957631058990955352783203125 * InternalPrior_21 + 0.032193911942004958814944615141939721070230007171630859375 * InternalPrior_53 + 0.183537257996577107821423169298213906586170196533203125 * InternalPrior_66 + 0.222891778509432481047980445509892888367176055908203125 * InternalPrior_67 - 0.186320833296605925522015922979335300624370574951171875 * InternalPrior_68 - 0.02229336678874770105718283730311668477952480316162109375 * InternalPrior_78 + 0.3414527784493064377357995908823795616626739501953125 * InternalPrior_98;
phiutauLb = 0 + 0.0210953038221124537787698471902331220917403697967529296875 * InternalPrior_16 + 6.5348534706172471848983906994590142858214676380157470703125e-05 * InternalPrior_17 + 0.03675844792908257441244046503925346769392490386962890625 * InternalPrior_19 + 0.0781577047035971472777049484648159705102443695068359375 * InternalPrior_20 - 0.0773926261831968387294722333535901270806789398193359375 * InternalPrior_21 + 0.032193911942004958814944615141939721070230007171630859375 * InternalPrior_53 + 0.183537257996577107821423169298213906586170196533203125 * InternalPrior_66 + 0.2228917785094323977812535986231523565948009490966796875 * InternalPrior_67 - 0.18632083329660587001086469172150827944278717041015625 * InternalPrior_68 - 0.022293366788747707996076741210345062427222728729248046875 * InternalPrior_78 + 0.3414527784493064377357995908823795616626739501953125 * InternalPrior_98;
phiutauHW = 0 - 0.004332164566544939761361110441839628037996590137481689453125 * InternalPrior_48 - 0.13604101961112691210331604452221654355525970458984375 * InternalPrior_49 + 0.01225244971237893221172043922706507146358489990234375 * InternalPrior_53 + 0.09315681215473316234554346237928257323801517486572265625 * InternalPrior_68 - 0.2149981373098611425742632263791165314614772796630859375 * InternalPrior_69 - 0.166971577281753436050593109030160121619701385498046875 * InternalPrior_70 - 0.116141014420165722409450381746864877641201019287109375 * InternalPrior_78 + 0.36763205418099065280301829261588864028453826904296875 * InternalPrior_98;
phiutauHT = 0 + 0.1199810612232455053760560303999227471649646759033203125 * InternalPrior_48 + 0.0642687452375606815824227169287041760981082916259765625 * InternalPrior_49 + 0.01225244971237893394644391520387216587550938129425048828125 * InternalPrior_53 + 0.09315681215473316234554346237928257323801517486572265625 * InternalPrior_68 - 0.214998137309861669930199923328473232686519622802734375 * InternalPrior_69 - 0.166971577281753436050593109030160121619701385498046875 * InternalPrior_70 - 0.116141014420165722409450381746864877641201019287109375 * InternalPrior_78 + 0.367632054180990763825320755131542682647705078125 * InternalPrior_98;
phiutauHNT = 0 - 0.11564889665670062546265484115792787633836269378662109375 * InternalPrior_48 + 0.071772274373566258276468943222425878047943115234375 * InternalPrior_49 + 0.01225244971237880904635364487376136821694672107696533203125 * InternalPrior_53 + 0.0931568121547331207121800389359123073518276214599609375 * InternalPrior_68 - 0.214998137309861669930199923328473232686519622802734375 * InternalPrior_69 - 0.1669715772817534082950174934012466110289096832275390625 * InternalPrior_70 - 0.11614101442016573628723818956132163293659687042236328125 * InternalPrior_78 + 0.36763205418099065280301829261588864028453826904296875 * InternalPrior_98;
phiutauKW = 0 - 0.004332164566544912005785494812926117447204887866973876953125 * InternalPrior_48 - 0.1360410196111270508811941226667840965092182159423828125 * InternalPrior_49 + 0.01225244971237893741589086715748635469935834407806396484375 * InternalPrior_53 + 0.09315681215473296805651415297688799910247325897216796875 * InternalPrior_68 + 0.25210069629088549536533037098706699907779693603515625 * InternalPrior_69 - 0.1027080600357989370596811795621761120855808258056640625 * InternalPrior_70 - 0.11614101442016570853166257393240812234580516815185546875 * InternalPrior_78 + 0.367632054180990763825320755131542682647705078125 * InternalPrior_98;
phiutauKT = 0 + 0.119981061223245422109329183513182215392589569091796875 * InternalPrior_48 + 0.06426874523756091750481544977446901611983776092529296875 * InternalPrior_49 + 0.01225244971237886802695182808520257822237908840179443359375 * InternalPrior_53 + 0.093156812154733092956604423306998796761035919189453125 * InternalPrior_68 + 0.2521006962908856063876328335027210414409637451171875 * InternalPrior_69 - 0.1027080600357989370596811795621761120855808258056640625 * InternalPrior_70 - 0.11614101442016566689829915048903785645961761474609375 * InternalPrior_78 + 0.367632054180990763825320755131542682647705078125 * InternalPrior_98;
phiutauKNT = 0 - 0.11564889665670059770707922552901436574757099151611328125 * InternalPrior_48 + 0.0717722743735663415431957901091664098203182220458984375 * InternalPrior_49 + 0.0122524497123788038421832169433400849811732769012451171875 * InternalPrior_53 + 0.09315681215473299581208976860580150969326496124267578125 * InternalPrior_68 + 0.252100696290885772921086527276202104985713958740234375 * InternalPrior_69 - 0.102708060035798742770651870159781537950038909912109375 * InternalPrior_70 - 0.11614101442016570853166257393240812234580516815185546875 * InternalPrior_78 + 0.367632054180990763825320755131542682647705078125 * InternalPrior_98;
phiutauXW = 0 - 0.00433216456654487991340118924199487082660198211669921875 * InternalPrior_48 - 0.13604101961112691210331604452221654355525970458984375 * InternalPrior_49 + 0.01225244971237888884363353980688771116547286510467529296875 * InternalPrior_53 + 0.0931568121547342864463558953502797521650791168212890625 * InternalPrior_68 - 0.037102558981023971151902429710389696992933750152587890625 * InternalPrior_69 + 0.269679637317551568198581435353844426572322845458984375 * InternalPrior_70 - 0.11614101442016581955396503644806216470897197723388671875 * InternalPrior_78 + 0.36763205418099065280301829261588864028453826904296875 * InternalPrior_98;
phiutauXT = 0 + 0.1199810612232452833314511053686146624386310577392578125 * InternalPrior_48 + 0.0642687452375607648491495638154447078704833984375 * InternalPrior_49 + 0.012252449712378883639463111876466427929699420928955078125 * InternalPrior_53 + 0.0931568121547342864463558953502797521650791168212890625 * InternalPrior_68 - 0.03710255898102381155734263984413701109588146209716796875 * InternalPrior_69 + 0.26967963731755151268743020409601740539073944091796875 * InternalPrior_70 - 0.1161410144201655281204210723444703035056591033935546875 * InternalPrior_78 + 0.367632054180990375247262136326753534376621246337890625 * InternalPrior_98;
phiutauXNT = 0 - 0.11564889665670026464017183798205223865807056427001953125 * InternalPrior_48 + 0.07177227437356613337637867289231508038938045501708984375 * InternalPrior_49 + 0.01225244971237884027137621245628906763158738613128662109375 * InternalPrior_53 + 0.09315681215473432807971931879365001805126667022705078125 * InternalPrior_68 - 0.037102558981024082174204892226043739356100559234619140625 * InternalPrior_69 + 0.26967963731755195677664005415863357484340667724609375 * InternalPrior_70 - 0.11614101442016566689829915048903785645961761474609375 * InternalPrior_78 + 0.367632054180990930358774448905023746192455291748046875 * InternalPrior_98;
logit_phiiotaTX = 1.5 + 0.1279788480552080109919899086889927275478839874267578125 * InternalPrior_72 + 0.5478114714545994079486490591079927980899810791015625 * InternalPrior_73 - 0.019975139378951227431269188627993571572005748748779296875 * InternalPrior_75 + 0.7267220926874318198684932212927378714084625244140625 * InternalPrior_96;
phiiotaTX = 1 / ( 1 + exp( -( logit_phiiotaTX ) ) );
logit_phiiotaTM = 1.5 + 0.455115788136425669652140868493006564676761627197265625 * InternalPrior_72 - 0.303941066529651526817445983397192321717739105224609375 * InternalPrior_73 - 0.1317742291412773714132100622009602375328540802001953125 * InternalPrior_75 + 0.7267220926874318198684932212927378714084625244140625 * InternalPrior_96;
phiiotaTM = 1 / ( 1 + exp( -( logit_phiiotaTM ) ) );
logit_phiiotaWX = 1.5 - 0.41194531737673278914968477693037129938602447509765625 * InternalPrior_72 - 0.109976259774354989673383897752501070499420166015625 * InternalPrior_73 - 0.367534049820457175972165941857383586466312408447265625 * InternalPrior_75 + 0.7267220926874322639577030713553540408611297607421875 * InternalPrior_96;
phiiotaWX = 1 / ( 1 + exp( -( logit_phiiotaWX ) ) );
logit_phiiotaWM = 1.5 - 0.1711493188149005584275386127046658657491207122802734375 * InternalPrior_72 - 0.1338941451505929192133947935872129164636135101318359375 * InternalPrior_73 + 0.51928341834068592053341717473813332617282867431640625 * InternalPrior_75 + 0.72672209268743159782388829626142978668212890625 * InternalPrior_96;
phiiotaWM = 1 / ( 1 + exp( -( logit_phiiotaWM ) ) );
logit_phitauD = 1.5 - 0.45961940777125587231921599595807492733001708984375 * InternalPrior_74 + 0.796084166404532833638540978427045047283172607421875 * InternalPrior_92;
phitauD = 1 / ( 1 + exp( -( logit_phitauD ) ) );
logit_phitauND = 1.5 + 0.45961940777125587231921599595807492733001708984375 * InternalPrior_74 + 0.796084166404532833638540978427045047283172607421875 * InternalPrior_92;
phitauND = 1 / ( 1 + exp( -( logit_phitauND ) ) );
logit_phitauHW = 1.5 + 0.498479951089609130132629388754139654338359832763671875 * InternalPrior_91 - 0.463385886823960368996466741009498946368694305419921875 * InternalPrior_93 - 0.047235314206404359349544819224320235662162303924560546875 * InternalPrior_94 + 0.312879236574158781092336312212864868342876434326171875 * InternalPrior_95 + 0.53072277760302222215926803983165882527828216552734375 * InternalPrior_97;
phitauHW = 1 / ( 1 + exp( -( logit_phitauHW ) ) );
logit_phitauHT = 1.5 + 0.209385822443211910837135292240418493747711181640625 * InternalPrior_91 - 0.2114544449286908378571325783923384733498096466064453125 * InternalPrior_93 - 0.624604444893946730843481418560259044170379638671875 * InternalPrior_94 - 0.290941945810049007459241465767263434827327728271484375 * InternalPrior_95 + 0.53072277760302244420387296486296691000461578369140625 * InternalPrior_97;
phitauHT = 1 / ( 1 + exp( -( logit_phitauHT ) ) );
logit_phitauHNT = 1.5 + 0.66639326312013336117701101102284155786037445068359375 * InternalPrior_91 + 0.251847051586176762238977744345902465283870697021484375 * InternalPrior_93 + 0.02222776622746501506977523376917815767228603363037109375 * InternalPrior_94 - 0.23522827469783547105208754146588034927845001220703125 * InternalPrior_95 + 0.53072277760302188909236065228469669818878173828125 * InternalPrior_97;
phitauHNT = 1 / ( 1 + exp( -( logit_phitauHNT ) ) );
logit_phitauKW = 1.5 - 0.2093858224432115500146522890645428560674190521240234375 * InternalPrior_91 - 0.50630441210102550275706789761898107826709747314453125 * InternalPrior_93 + 0.50115138630181788048645330491126514971256256103515625 * InternalPrior_94 + 0.10951730907904312639633559456342482008039951324462890625 * InternalPrior_95 + 0.53072277760302222215926803983165882527828216552734375 * InternalPrior_97;
phitauKW = 1 / ( 1 + exp( -( logit_phitauKW ) ) );
logit_phitauKT = 1.5 - 0.498479951089608963599175694980658590793609619140625 * InternalPrior_91 - 0.2543729702057559993733093506307341158390045166015625 * InternalPrior_93 - 0.07621774438572483101328458587886416353285312652587890625 * InternalPrior_94 - 0.494303873305164398477273834942025132477283477783203125 * InternalPrior_95 + 0.53072277760302244420387296486296691000461578369140625 * InternalPrior_97;
phitauKT = 1 / ( 1 + exp( -( logit_phitauKT ) ) );
logit_phitauKNT = 1.5 - 0.041472510412687124681241357393446378409862518310546875 * InternalPrior_91 + 0.2089285263091116562339522033653338439762592315673828125 * InternalPrior_93 + 0.570614466735687386744757532142102718353271484375 * InternalPrior_94 - 0.43859020219295163922623714825022034347057342529296875 * InternalPrior_95 + 0.53072277760302188909236065228469669818878173828125 * InternalPrior_97;
phitauKNT = 1 / ( 1 + exp( -( logit_phitauKNT ) ) );
logit_phitauscriptXW = 1.5 - 0.1679133120305242587999572378976154141128063201904296875 * InternalPrior_91 + 0.002525918619579357697613186672924712183885276317596435546875 * InternalPrior_93 + 0.053989978158260211460461874821703531779348850250244140625 * InternalPrior_94 + 0.72953214800300048015202492024400271475315093994140625 * InternalPrior_95 + 0.530722777603021445003150802222080528736114501953125 * InternalPrior_97;
phitauscriptXW = 1 / ( 1 + exp( -( logit_phitauscriptXW ) ) );
logit_phitauscriptXT = 1.5 - 0.457007440676921838917934337587212212383747100830078125 * InternalPrior_91 + 0.25445736051484868500693892201525159180164337158203125 * InternalPrior_93 - 0.52337915252928290943401634649490006268024444580078125 * InternalPrior_94 + 0.12571096561879280262274960477952845394611358642578125 * InternalPrior_95 + 0.53072277760302222215926803983165882527828216552734375 * InternalPrior_97;
phitauscriptXT = 1 / ( 1 + exp( -( logit_phitauscriptXT ) ) );
logit_phitauscriptXNT = 1.5 + 0.717758857029715979791717472835443913936614990234375 * InternalPrior_93 + 0.1234530585921288781126037292779074050486087799072265625 * InternalPrior_94 + 0.1814246367310057284072399852448143064975738525390625 * InternalPrior_95 + 0.53072277760302188909236065228469669818878173828125 * InternalPrior_97;
phitauscriptXNT = 1 / ( 1 + exp( -( logit_phitauscriptXNT ) ) );
logit_tauKG_ = -1.5 - 0.17243176158582029788846057272166945040225982666015625 * InternalPrior_50 + 0.17397496255614142146583844805718399584293365478515625 * InternalPrior_51 + 0.62449979983983971987271388570661656558513641357421875 * InternalPrior_89;
tauKG_ = 1 / ( 1 + exp( -( logit_tauKG_ ) ) );
logit_tauHG_ = -1.5 - 0.06445085640315477426565138330261106602847576141357421875 * InternalPrior_50 - 0.2363177672306928933654290858612512238323688507080078125 * InternalPrior_51 + 0.62449979983983971987271388570661656558513641357421875 * InternalPrior_89;
tauHG_ = 1 / ( 1 + exp( -( logit_tauHG_ ) ) );
logit_tauCG_ = -1.5 + 0.2368826179889750582763241482098237611353397369384765625 * InternalPrior_50 + 0.062342804674551437205121118267925339750945568084716796875 * InternalPrior_51 + 0.62449979983983983089501634822227060794830322265625 * InternalPrior_89;
tauCG_ = 1 / ( 1 + exp( -( logit_tauCG_ ) ) );
taub_ = 0 + 0.049002499936227815469091950717483996413648128509521484375 * InternalPrior_2 + 0.000456824536327572511447414616014839339186437427997589111328125 * InternalPrior_6 + 0.0081968203290773804237101529679421219043433666229248046875 * InternalPrior_7 + 0.00106050021509443599676547620447308872826397418975830078125 * InternalPrior_10 + 0.00794660033070356507101106302570769912563264369964599609375 * InternalPrior_11 - 0.00901060642937818144504458217625142424367368221282958984375 * InternalPrior_12 - 0.0002396281500684488007142658450021599492174573242664337158203125 * InternalPrior_13 - 0.05879069596970594446805336019679089076817035675048828125 * InternalPrior_14 + 0.061322056182179895955641768523491919040679931640625 * InternalPrior_15 - 0.013174647203494323222106032744704862125217914581298828125 * InternalPrior_22 - 0.0007106648217553614144126328255879343487322330474853515625 * InternalPrior_71;
taul_ = 0 - 0.049002499936227815469091950717483996413648128509521484375 * InternalPrior_2 + 0.000456824536327572511447414616014839339186437427997589111328125 * InternalPrior_6 + 0.0081968203290773804237101529679421219043433666229248046875 * InternalPrior_7 + 0.0010605002150944268894672273262358430656604468822479248046875 * InternalPrior_10 + 0.007946600330703580683522346816971548832952976226806640625 * InternalPrior_11 - 0.00901060642937816756725677436179466894827783107757568359375 * InternalPrior_12 - 0.0002396281500684498307063297062313722562976181507110595703125 * InternalPrior_13 - 0.05879069596970591671247774456787738017737865447998046875 * InternalPrior_14 + 0.061322056182179895955641768523491919040679931640625 * InternalPrior_15 - 0.013174647203494323222106032744704862125217914581298828125 * InternalPrior_22 - 0.0007106648217553614144126328255879343487322330474853515625 * InternalPrior_71;
tauD_ = 0 + 0.049002499936227739141259007737971842288970947265625 * InternalPrior_1 + 0.000456824536327570993564373136308631728752516210079193115234375 * InternalPrior_6 + 0.0081968203290773734848162490607137442566454410552978515625 * InternalPrior_7 - 0.00106050021509412526442284185890230219229124486446380615234375 * InternalPrior_10 - 0.007946600330703768033657752312137745320796966552734375 * InternalPrior_11 + 0.009010606429378155424192442524145008064806461334228515625 * InternalPrior_12 + 0.00023962815006852916720030133301833075165632180869579315185546875 * InternalPrior_13 + 0.0587906959697062359015973243003827519714832305908203125 * InternalPrior_14 + 0.06132205618217956288873438097652979195117950439453125 * InternalPrior_15 - 0.01317464720349432495682950872151195653714239597320556640625 * InternalPrior_22 - 0.000710664821755306011681618816311356567894108593463897705078125 * InternalPrior_71;
tauND_ = 0 - 0.049002499936227732202365103830743464641273021697998046875 * InternalPrior_1 + 0.0004568245363275714814553507547856270321062766015529632568359375 * InternalPrior_6 + 0.0081968203290773804237101529679421219043433666229248046875 * InternalPrior_7 - 0.0010605002150940686690694381155708470032550394535064697265625 * InternalPrior_10 - 0.00794660033070378191144556012659450061619281768798828125 * InternalPrior_11 + 0.00901060642937816062836287045456629130057990550994873046875 * InternalPrior_12 + 0.00023962815006851832517857647797399067712831310927867889404296875 * InternalPrior_13 + 0.05879069596970622202380951648592599667608737945556640625 * InternalPrior_14 + 0.06132205618217957676652218879098654724657535552978515625 * InternalPrior_15 - 0.01317464720349432495682950872151195653714239597320556640625 * InternalPrior_22 - 0.000710664821755410854031698164590125088579952716827392578125 * InternalPrior_71;
tauNT_ = 0 + 0.06431155724293946551739509231992997229099273681640625 * InternalPrior_6 - 0.0746238374704569495943218271349905990064144134521484375 * InternalPrior_7 + 0.01376366306056819692471560045987644116394221782684326171875 * InternalPrior_15 - 0.01045832538941601254356417172175497398711740970611572265625 * InternalPrior_22 - 0.000701067311476718754183201642860012725577689707279205322265625 * InternalPrior_71;
tauLa_ = 0 - 0.07370007031290749799357087113094166852533817291259765625 * InternalPrior_6 - 0.0648745553744186354006018291329382918775081634521484375 * InternalPrior_7 + 0.013433065017487144654495523354853503406047821044921875 * InternalPrior_15 - 0.01027677661897042314664840745308538316749036312103271484375 * InternalPrior_22 - 0.00886071822166455656810679641921524307690560817718505859375 * InternalPrior_71;
logit_tauLb_ = -2.29999999999999982236431605997495353221893310546875 + 0.00100259277149590433735049099794878202374093234539031982421875 * InternalPrior_6 + 0.0009783287428478007301257957095685924286954104900360107421875 * InternalPrior_7 - 0.0004291031006972549654600312951657770099700428545475006103515625 * InternalPrior_15 + 0.00088282081805699029290745993847622230532579123973846435546875 * InternalPrior_22 - 0.6043174365997872055089601417421363294124603271484375 * InternalPrior_71;
tauLb_ = 1 / ( 1 + exp( -( logit_tauLb_ ) ) );
tauHW_ = 0 + 0.00011483536359465927102242732704695526990690268576145172119140625 * InternalPrior_6 + 0.00189353463571949082351608684149368855287320911884307861328125 * InternalPrior_7 + 0.02777701966508368258690353513884474523365497589111328125 * InternalPrior_10 + 0.053213307067146990714245902154289069585502147674560546875 * InternalPrior_11 - 0.037302704134901505661492393528533284552395343780517578125 * InternalPrior_12 + 0.035108004987915386596597500101779587566852569580078125 * InternalPrior_13 + 0.01326790787937522607398133089873226708732545375823974609375 * InternalPrior_14 - 0.006548730223727095012264953766134567558765411376953125 * InternalPrior_15 - 0.05962068642663677364712526696166605688631534576416015625 * InternalPrior_22 - 0.00074109506549137620264045001050590144586749374866485595703125 * InternalPrior_71;
tauHT_ = 0 + 0.000114835363594674273669989095214560848035034723579883575439453125 * InternalPrior_6 + 0.00189353463571943401132224860106134656234644353389739990234375 * InternalPrior_7 + 0.0307899074275547295076460585505628841929137706756591796875 * InternalPrior_10 - 0.043641966609499982521214178632362745702266693115234375 * InternalPrior_11 - 0.04458433444663519040762622580587049014866352081298828125 * InternalPrior_12 + 0.03951141868393824585492524192886776290833950042724609375 * InternalPrior_13 + 0.0013286333546191696035332352465729854884557425975799560546875 * InternalPrior_14 - 0.006548730223727236392228245875912762130610644817352294921875 * InternalPrior_15 - 0.0596206864266367875249130747761228121817111968994140625 * InternalPrior_22 - 0.000741095065491385852039785131495364112197421491146087646484375 * InternalPrior_71;
tauHNT_ = 0 + 0.000114835363594640270379354518581749289296567440032958984375 * InternalPrior_6 + 0.00189353463571944702174831842711455465178005397319793701171875 * InternalPrior_7 - 0.031450825644619949394975577661170973442494869232177734375 * InternalPrior_10 + 0.0024639651311867093175234089130754000507295131683349609375 * InternalPrior_11 - 0.0715162444924800355661176354260533116757869720458984375 * InternalPrior_12 - 0.0133150838400310604636711531156834098510444164276123046875 * InternalPrior_13 + 0.01078099059125676995041231975847040303051471710205078125 * InternalPrior_14 - 0.006548730223726972714259897401234411518089473247528076171875 * InternalPrior_15 - 0.0596206864266367320137618435182957910001277923583984375 * InternalPrior_22 - 0.0007410950654913946340773822640812795725651085376739501953125 * InternalPrior_71;
tauKW_ = 0 + 0.000114835363594678962844385095021237930268398486077785491943359375 * InternalPrior_6 + 0.00189353463571948171621783796325644289026968181133270263671875 * InternalPrior_7 - 0.0190586658713245114815659775331369019113481044769287109375 * InternalPrior_10 + 0.0474018882983230638306082482813508249819278717041015625 * InternalPrior_11 + 0.047225239164348890852362927716967533342540264129638671875 * InternalPrior_12 + 0.03951127763460415831531236108276061713695526123046875 * InternalPrior_13 - 0.0013356520915929724624415797507026582024991512298583984375 * InternalPrior_14 - 0.0065487302237269111315765002245825598947703838348388671875 * InternalPrior_15 - 0.0596206864266367875249130747761228121817111968994140625 * InternalPrior_22 - 0.000741095065491384984678047143091816906235180795192718505859375 * InternalPrior_71;
tauKT_ = 0 + 0.000114835363594683028602531915662865458216401748359203338623046875 * InternalPrior_6 + 0.00189353463571945959849351925896598913823254406452178955078125 * InternalPrior_7 - 0.016045778108853471499717358028647140599787235260009765625 * InternalPrior_10 - 0.049453385378323798382549369989646947942674160003662109375 * InternalPrior_11 + 0.039943608852615226922910807161315460689365863800048828125 * InternalPrior_12 + 0.043914691330627052268109622445990680716931819915771484375 * InternalPrior_13 - 0.013274926616349012886697522617396316491067409515380859375 * InternalPrior_14 - 0.00654873022372709327754147778932747314684092998504638671875 * InternalPrior_15 - 0.059620686426636815280488690405036322772502899169921875 * InternalPrior_22 - 0.00074109506549137837104479498151476946077309548854827880859375 * InternalPrior_71;
tauKNT_ = 0 + 0.00011483536359463471384322053037152500110096298158168792724609375 * InternalPrior_6 + 0.00189353463571946436898307819518549877102486789226531982421875 * InternalPrior_7 - 0.07828651118102787631602978990486008115112781524658203125 * InternalPrior_10 - 0.0033474536376371512129412888469914832967333495616912841796875 * InternalPrior_11 + 0.01301169880677033839633249812095527886413037776947021484375 * InternalPrior_12 - 0.00891181119334208578230960284827233408577740192413330078125 * InternalPrior_13 - 0.0038225693797114255502445079315521070384420454502105712890625 * InternalPrior_14 - 0.00654873022372680184399751368573561194352805614471435546875 * InternalPrior_15 - 0.05962068642663688466942772947732009924948215484619140625 * InternalPrior_22 - 0.000741095065491347254442444647537513446877710521221160888671875 * InternalPrior_71;
tauscriptXW_ = 0 + 0.00011483536359466561360513636724789421350578777492046356201171875 * InternalPrior_6 + 0.00189353463571946089953612624157130994717590510845184326171875 * InternalPrior_7 + 0.047496603753473365383541704431991092860698699951171875 * InternalPrior_10 + 0.046989420247137113351154624751870869658887386322021484375 * InternalPrior_11 + 0.031572635639864864154358059522564872168004512786865234375 * InternalPrior_12 - 0.03059960749059610629618788379957550205290317535400390625 * InternalPrior_13 + 0.002493936025092170945260949821431495365686714649200439453125 * InternalPrior_14 - 0.006548730223727088073371049858906189911067485809326171875 * InternalPrior_15 - 0.059620686426636704258186227889382280409336090087890625 * InternalPrior_22 - 0.000741095065491213030213490942088583324220962822437286376953125 * InternalPrior_71;
tauscriptXT_ = 0 + 0.000114835363594713521788633070475071917826426215469837188720703125 * InternalPrior_6 + 0.0018935346357194207840557442779072516714222729206085205078125 * InternalPrior_7 + 0.050509491515944353323686044632268021814525127410888671875 * InternalPrior_10 - 0.04986585342950976273979080133358365856111049652099609375 * InternalPrior_11 + 0.0242910053281311377748608038018574006855487823486328125 * InternalPrior_12 - 0.0261961937945733407129278447200704249553382396697998046875 * InternalPrior_13 - 0.0094453384996638183046524517294528777711093425750732421875 * InternalPrior_14 - 0.006548730223727246800569101736755328602157533168792724609375 * InternalPrior_15 - 0.05962068642663666262482280444601201452314853668212890625 * InternalPrior_22 - 0.0007410950654914562167607794407331311958841979503631591796875 * InternalPrior_71;
tauscriptXNT_ = 0 + 0.00011483536359465043477472157018581810916657559573650360107421875 * InternalPrior_6 + 0.00189353463571942013353444078660459126695059239864349365234375 * InternalPrior_7 - 0.01173124155623028568029564411290266434662044048309326171875 * InternalPrior_10 - 0.003759921688823109064969685277901589870452880859375 * InternalPrior_11 - 0.0026409047177137147562053787197555720922537147998809814453125 * InternalPrior_12 - 0.07902269631854241804802541082608513534069061279296875 * InternalPrior_13 + 7.018736973743593707091015243548781654681079089641571044921875e-06 * InternalPrior_14 - 0.006548730223726951897578185679549278574995696544647216796875 * InternalPrior_15 - 0.059620686426636766708231363054437679238617420196533203125 * InternalPrior_22 - 0.000741095065491374576337191282249250434688292443752288818359375 * InternalPrior_71;
log_sigmauKG = -9.90364948999999938905602903105318546295166015625 + 1.7297246081385331262225690807099454104900360107421875 * InternalPrior_122 - 0.99865696813270210530077974908635951578617095947265625 * InternalPrior_123 + 0.2385473258407291297089614090509712696075439453125 * InternalPrior_136 - 0.50792835778227873877455067486152984201908111572265625 * InternalPrior_139 - 0.78609396971149470001449799383408389985561370849609375 * InternalPrior_140 - 0.844313785600232957762045771232806146144866943359375 * InternalPrior_141 - 0.340995269055874405950135042075999081134796142578125 * InternalPrior_144 + 0.49045596003818026087373027621651999652385711669921875 * InternalPrior_150;
sigmauKG = exp( log_sigmauKG );
log_sigmauHG = -9.90364948999999938905602903105318546295166015625 - 1.729724608138532904177964155678637325763702392578125 * InternalPrior_122 - 0.9986569681327017722338723615393973886966705322265625 * InternalPrior_123 + 0.2385473258407291297089614090509712696075439453125 * InternalPrior_136 - 0.50792835778227873877455067486152984201908111572265625 * InternalPrior_139 - 0.78609396971149470001449799383408389985561370849609375 * InternalPrior_140 - 0.844313785600232957762045771232806146144866943359375 * InternalPrior_141 - 0.340995269055874405950135042075999081134796142578125 * InternalPrior_144 + 0.49045596003818026087373027621651999652385711669921875 * InternalPrior_150;
sigmauHG = exp( log_sigmauHG );
log_sigmauCG = -9.90364948999999938905602903105318546295166015625 + 1.99731393626540398855695457314141094684600830078125 * InternalPrior_123 + 0.2385473258407291297089614090509712696075439453125 * InternalPrior_136 - 0.50792835778227873877455067486152984201908111572265625 * InternalPrior_139 - 0.78609396971149470001449799383408389985561370849609375 * InternalPrior_140 - 0.844313785600232957762045771232806146144866943359375 * InternalPrior_141 - 0.340995269055874405950135042075999081134796142578125 * InternalPrior_144 + 0.49045596003818026087373027621651999652385711669921875 * InternalPrior_150;
sigmauCG = exp( log_sigmauCG );
log_sigmaub = -9.90364948999999938905602903105318546295166015625 + 1.69405792903562524287508495035581290721893310546875 * InternalPrior_124 - 0.34247236970495931185354265835485421121120452880859375 * InternalPrior_125 - 0.06948114176342194692193032778959604911506175994873046875 * InternalPrior_133 + 0.4221081365753154290842985574272461235523223876953125 * InternalPrior_136 - 0.70634387124308439798170411449973471462726593017578125 * InternalPrior_137 - 1.223423472607686246504954397096298635005950927734375 * InternalPrior_138 + 0.7538512542917212844173491248511709272861480712890625 * InternalPrior_139 - 0.1474922207699163878569237340343534015119075775146484375 * InternalPrior_144 + 0.485735007811259500432043978435103781521320343017578125 * InternalPrior_150;
sigmaub = exp( log_sigmaub );
log_sigmaul = -9.90364948999999938905602903105318546295166015625 - 1.694057929035096776715363375842571258544921875 * InternalPrior_124 + 0.342472369705931811711963064226438291370868682861328125 * InternalPrior_125 + 0.06948114176359843074948230423615314066410064697265625 * InternalPrior_133 + 0.4221081365753154290842985574272461235523223876953125 * InternalPrior_136 - 0.70634387124308439798170411449973471462726593017578125 * InternalPrior_137 - 1.2234234726081367750083472856204025447368621826171875 * InternalPrior_138 + 0.7538512542917212844173491248511709272861480712890625 * InternalPrior_139 - 0.1474922207699163878569237340343534015119075775146484375 * InternalPrior_144 + 0.485735007811259500432043978435103781521320343017578125 * InternalPrior_150;
sigmaul = exp( log_sigmaul );
log_sigmauD = -9.90364948999999938905602903105318546295166015625 - 0.11951325902805691459018788691537338308990001678466796875 * InternalPrior_124 - 0.244624798619883898620486206709756515920162200927734375 * InternalPrior_125 - 1.7081634900726800907477809232659637928009033203125 * InternalPrior_133 + 0.4221081365753154290842985574272461235523223876953125 * InternalPrior_136 - 0.70634387124308439798170411449973471462726593017578125 * InternalPrior_137 + 1.2234234726076660404459062192472629249095916748046875 * InternalPrior_138 + 0.7538512542917212844173491248511709272861480712890625 * InternalPrior_139 - 0.1474922207699163878569237340343534015119075775146484375 * InternalPrior_144 + 0.485735007811259500432043978435103781521320343017578125 * InternalPrior_150;
sigmauD = exp( log_sigmauD );
log_sigmauND = -9.90364948999999938905602903105318546295166015625 + 0.1195132590279014694889525571852573193609714508056640625 * InternalPrior_124 + 0.24462479862082042725290875750943087041378021240234375 * InternalPrior_125 + 1.7081634900722046932486364312353543937206268310546875 * InternalPrior_133 + 0.4221081365753154290842985574272461235523223876953125 * InternalPrior_136 - 0.70634387124308439798170411449973471462726593017578125 * InternalPrior_137 + 1.223423472608156981067395463469438254833221435546875 * InternalPrior_138 + 0.7538512542917212844173491248511709272861480712890625 * InternalPrior_139 - 0.1474922207699163878569237340343534015119075775146484375 * InternalPrior_144 + 0.485735007811259500432043978435103781521320343017578125 * InternalPrior_150;
sigmauND = exp( log_sigmauND );
log_sigmauNT = -9.902858099999999552665030932985246181488037109375 - 0.262735737957550286036934039657353423535823822021484375 * InternalPrior_118 + 0.1774879876793226951559034887395682744681835174560546875 * InternalPrior_119 - 0.07126799649326835683904590723614091984927654266357421875 * InternalPrior_120 - 0.302893272346296205110860455533838830888271331787109375 * InternalPrior_121 - 0.0016182114605157861368656124767539949971251189708709716796875 * InternalPrior_124 - 0.00826775478390220745772420940511437947861850261688232421875 * InternalPrior_125 + 1.6832044300021404836797955795191228389739990234375 * InternalPrior_126 + 0.89282914146704184243930058073601685464382171630859375 * InternalPrior_127 + 0.0760196953859893775895528733599348925054073333740234375 * InternalPrior_128 - 0.86005946287036649788859676846186630427837371826171875 * InternalPrior_129 + 0.034909291344221847486206655730711645446717739105224609375 * InternalPrior_130 + 0.58716739109364635140764221432618796825408935546875 * InternalPrior_131 - 0.38684245430241670504756257287226617336273193359375 * InternalPrior_132 + 0.00129723857662098949160289773629983756109140813350677490234375 * InternalPrior_133 - 0.2443782980172554963882447509604389779269695281982421875 * InternalPrior_134 + 0.02167627367930935466944220024743117392063140869140625 * InternalPrior_135 - 0.78314850338563690712589959730394184589385986328125 * InternalPrior_136 + 0.126308427547783264088820942561142146587371826171875 * InternalPrior_139 - 0.06908524060478431205734040077004465274512767791748046875 * InternalPrior_144 + 0.476560606679743148372807581836241297423839569091796875 * InternalPrior_150;
sigmauNT = exp( log_sigmauNT );
log_sigmauTX = -9.90364948999999938905602903105318546295166015625 + 0.8119244604494595396459999392391182482242584228515625 * InternalPrior_120 + 0.62974451155587807260616273197229020297527313232421875 * InternalPrior_121 - 0.079107620212673313009332787260063923895359039306640625 * InternalPrior_124 - 0.40417610517221358445993928398820571601390838623046875 * InternalPrior_125 - 0.4166588134816724409148491758969612419605255126953125 * InternalPrior_126 - 1.612511685713409637088489034795202314853668212890625 * InternalPrior_129 - 0.66662644039695628794817139350925572216510772705078125 * InternalPrior_131 + 0.06341659242224055581527153435672516934573650360107421875 * InternalPrior_133 + 0.20073373527185456310917288647033274173736572265625 * InternalPrior_134 + 0.1662505030889437074304026964455260895192623138427734375 * InternalPrior_136 - 0.18996654397074141940038316533900797367095947265625 * InternalPrior_139 + 1.0930937829124125482138651932473294436931610107421875 * InternalPrior_144 + 0.495269580617178906134512317294138483703136444091796875 * InternalPrior_150;
sigmauTX = exp( log_sigmauTX );
log_sigmauTM = -9.90364948999999938905602903105318546295166015625 + 0.86783046001120400791961628783610649406909942626953125 * InternalPrior_120 + 0.130184910165255851577370549421175383031368255615234375 * InternalPrior_121 + 0.1234359958267700896339391647416050545871257781982421875 * InternalPrior_124 + 0.6306583347747471979261035812669433653354644775390625 * InternalPrior_125 - 0.1339569934906802151086679941727197729051113128662109375 * InternalPrior_126 + 0.64230508235163485952767814524122513830661773681640625 * InternalPrior_129 + 1.6547407864290875068036257289350032806396484375 * InternalPrior_131 - 0.098952417182252394578512166845030151307582855224609375 * InternalPrior_133 + 0.355552647996663251372950753648183308541774749755859375 * InternalPrior_134 + 0.1662505030889437074304026964455260895192623138427734375 * InternalPrior_136 - 0.18996654397074141940038316533900797367095947265625 * InternalPrior_139 + 1.0930937829124125482138651932473294436931610107421875 * InternalPrior_144 + 0.495269580617178906134512317294138483703136444091796875 * InternalPrior_150;
sigmauTM = exp( log_sigmauTM );
log_sigmauWX = -9.90364948999999938905602903105318546295166015625 + 0.2884000460604678739429118650150485336780548095703125 * InternalPrior_120 - 0.62879665691364994284384692946332506835460662841796875 * InternalPrior_121 + 0.0767492900886111162339631164286402054131031036376953125 * InternalPrior_124 + 0.39212694123969826787146075730561278760433197021484375 * InternalPrior_125 + 0.7715579899804783092776006014901213347911834716796875 * InternalPrior_126 + 0.98924497069643513302850124091492034494876861572265625 * InternalPrior_129 - 1.336421009647820401511353338719345629215240478515625 * InternalPrior_131 - 0.0615260380120244143586916152344201691448688507080078125 * InternalPrior_133 - 0.697132056198086491605181436170823872089385986328125 * InternalPrior_134 + 0.1662505030889437074304026964455260895192623138427734375 * InternalPrior_136 - 0.18996654397074141940038316533900797367095947265625 * InternalPrior_139 + 1.0930937829124125482138651932473294436931610107421875 * InternalPrior_144 + 0.495269580617178906134512317294138483703136444091796875 * InternalPrior_150;
sigmauWX = exp( log_sigmauWX );
log_sigmauWM = -9.90364948999999938905602903105318546295166015625 - 1.96815496652131560750831340556032955646514892578125 * InternalPrior_120 - 0.1311327648071850260347304129027179442346096038818359375 * InternalPrior_121 - 0.1210776657026333136268902990195783786475658416748046875 * InternalPrior_124 - 0.61860917084185007563945646325009874999523162841796875 * InternalPrior_125 - 0.220942183007777293024531672926968894898891448974609375 * InternalPrior_126 - 0.0190383673348686645321325983104543411172926425933837890625 * InternalPrior_129 + 0.348306663615745915052457348792813718318939208984375 * InternalPrior_131 + 0.0970618627719763704675415283418260514736175537109375 * InternalPrior_133 + 0.140845672929431897646423976766527630388736724853515625 * InternalPrior_134 + 0.1662505030889437074304026964455260895192623138427734375 * InternalPrior_136 - 0.18996654397074141940038316533900797367095947265625 * InternalPrior_139 + 1.0930937829124125482138651932473294436931610107421875 * InternalPrior_144 + 0.495269580617178906134512317294138483703136444091796875 * InternalPrior_150;
sigmauWM = exp( log_sigmauWM );
log_sigmauLa = -9.90364948999999938905602903105318546295166015625 + 0.0936266415258185380476874115629470907151699066162109375 * InternalPrior_120 + 0.01366290194593213457030511648326864815317094326019287109375 * InternalPrior_121 - 0.04982199689977741263735566690229461528360843658447265625 * InternalPrior_124 - 0.254550201418246746509765898736077360808849334716796875 * InternalPrior_125 - 0.438551637860750520570007893184083513915538787841796875 * InternalPrior_126 - 0.13479317512458266481445434692432172596454620361328125 * InternalPrior_129 + 0.411804300900856679046313502112752757966518402099609375 * InternalPrior_131 + 0.03993978408857624951000531154932104982435703277587890625 * InternalPrior_133 - 1.591867410610749988819634381798096001148223876953125 * InternalPrior_134 + 0.4221081365753154290842985574272461235523223876953125 * InternalPrior_136 + 1.4126877424866262078495537934941239655017852783203125 * InternalPrior_137 + 0.7538512542917212844173491248511709272861480712890625 * InternalPrior_139 - 0.1474922207699163878569237340343534015119075775146484375 * InternalPrior_144 + 0.485735007811259500432043978435103781521320343017578125 * InternalPrior_150;
sigmauLa = exp( log_sigmauLa );
log_sigmauLb = -9.90364948999999938905602903105318546295166015625 - 0.093626641526023401951306368573568761348724365234375 * InternalPrior_120 - 0.01366290194449283103284020768342088558711111545562744140625 * InternalPrior_121 + 0.049821996899955749149579986578828538767993450164794921875 * InternalPrior_124 + 0.254550201419158017568378227224457077682018280029296875 * InternalPrior_125 + 0.4385516378613456556223582083475776016712188720703125 * InternalPrior_126 + 0.1347931751247164189333460626585292629897594451904296875 * InternalPrior_129 - 0.411804300901201403295459613218554295599460601806640625 * InternalPrior_131 - 0.039939784088719641752529554423745139501988887786865234375 * InternalPrior_133 + 1.5918674106111427857257467621820978820323944091796875 * InternalPrior_134 + 0.4221081365753154290842985574272461235523223876953125 * InternalPrior_136 + 1.412687742485711606121867589536122977733612060546875 * InternalPrior_137 + 0.7538512542917212844173491248511709272861480712890625 * InternalPrior_139 - 0.1474922207699163878569237340343534015119075775146484375 * InternalPrior_144 + 0.485735007811259500432043978435103781521320343017578125 * InternalPrior_150;
sigmauLb = exp( log_sigmauLb );
log_sigmauALL = -9.902858099999999552665030932985246181488037109375 - 0.63506081221130228353644042726955376565456390380859375 * InternalPrior_118 + 0.451036384749960272966262664340320043265819549560546875 * InternalPrior_119 + 0.0272324546026193568815099155244752182625234127044677734375 * InternalPrior_120 - 0.44041219937818321117362074801349081099033355712890625 * InternalPrior_121 + 0.024718778075450080489172677289388957433402538299560546875 * InternalPrior_124 + 0.1262930097036471799309964580970699898898601531982421875 * InternalPrior_125 - 0.39303150859272140138500617467798292636871337890625 * InternalPrior_126 - 1.111585569713053889273624008637852966785430908203125 * InternalPrior_127 + 0.0164208378816879108086368432850576937198638916015625 * InternalPrior_128 - 0.0577719829667686368690482368037919513881206512451171875 * InternalPrior_129 - 0.4975791996011922346809797090827487409114837646484375 * InternalPrior_130 - 0.056294742353628142439436743416081299073994159698486328125 * InternalPrior_131 - 1.19867817023064393566755825304426252841949462890625 * InternalPrior_132 - 0.0198157986572253495827222735670147812925279140472412109375 * InternalPrior_133 + 0.07496286998143476820732900023358524776995182037353515625 * InternalPrior_134 - 1.10623314198585998013868447742424905300140380859375 * InternalPrior_135 - 0.78314850338563690712589959730394184589385986328125 * InternalPrior_136 + 0.126308427547783264088820942561142146587371826171875 * InternalPrior_139 - 0.06908524060478431205734040077004465274512767791748046875 * InternalPrior_144 + 0.476560606679743148372807581836241297423839569091796875 * InternalPrior_150;
sigmauALL = exp( log_sigmauALL );
log_sigmauS1ALL = -9.902858099999999552665030932985246181488037109375 - 1.0992902860684423682613441997091285884380340576171875 * InternalPrior_118 + 0.65077707016656860528058814452379010617733001708984375 * InternalPrior_119 + 0.154434423116623642524558590594097040593624114990234375 * InternalPrior_120 + 0.2456732732808964703163923104511923156678676605224609375 * InternalPrior_121 - 0.10020333220999351475644090214700554497539997100830078125 * InternalPrior_124 - 0.5119581707682894222699587771785445511341094970703125 * InternalPrior_125 - 0.06568672778152724600619905004350584931671619415283203125 * InternalPrior_126 - 0.6236508914022966809653780728694982826709747314453125 * InternalPrior_127 + 0.055845205382791814063825341918345657177269458770751953125 * InternalPrior_128 + 0.357871388513496369032651500674546696245670318603515625 * InternalPrior_129 + 0.1757684653784776507290388281035120598971843719482421875 * InternalPrior_130 - 0.0527032961220975926242005016320035792887210845947265625 * InternalPrior_131 + 0.51125205315299260266925784890190698206424713134765625 * InternalPrior_132 + 0.08032796159242193423377642602645209990441799163818359375 * InternalPrior_133 + 0.07236809408843301871794295720974332652986049652099609375 * InternalPrior_134 + 1.5197265711327168080657656901166774332523345947265625 * InternalPrior_135 - 0.78314850338563690712589959730394184589385986328125 * InternalPrior_136 + 0.126308427547783264088820942561142146587371826171875 * InternalPrior_139 - 0.06908524060478431205734040077004465274512767791748046875 * InternalPrior_144 + 0.476560606679743148372807581836241297423839569091796875 * InternalPrior_150;
sigmauS1ALL = exp( log_sigmauS1ALL );
log_sigmauiotaALL = -9.902858099999999552665030932985246181488037109375 + 1.5155418925095525128909912382368929684162139892578125 * InternalPrior_118 - 0.399379835861479015601815945046837441623210906982421875 * InternalPrior_119 - 0.08273345227131613521809327949085854925215244293212890625 * InternalPrior_120 - 0.62807249402062981236127825468429364264011383056640625 * InternalPrior_121 + 0.1000000271924057770878135897874017246067523956298828125 * InternalPrior_124 + 0.51091944618082596463182198931463062763214111328125 * InternalPrior_125 - 0.435013421063749461392688999694655649363994598388671875 * InternalPrior_126 - 0.258526120235933742907974419722449965775012969970703125 * InternalPrior_127 - 0.1333255570831055891733996077164192683994770050048828125 * InternalPrior_128 - 0.287494401905744767500294756246148608624935150146484375 * InternalPrior_129 - 0.3804090987119648215042388983420096337795257568359375 * InternalPrior_130 - 0.045390660825201545325313645662390626966953277587890625 * InternalPrior_131 - 0.44575851918799325179776360528194345533847808837890625 * InternalPrior_132 - 0.0801649822055676697374337891233153641223907470703125 * InternalPrior_133 + 0.035348479779759627017465817289121332578361034393310546875 * InternalPrior_134 + 1.1360779771474891486349179103854112327098846435546875 * InternalPrior_135 - 0.78314850338563690712589959730394184589385986328125 * InternalPrior_136 + 0.126308427547783264088820942561142146587371826171875 * InternalPrior_139 - 0.06908524060478431205734040077004465274512767791748046875 * InternalPrior_144 + 0.476560606679743148372807581836241297423839569091796875 * InternalPrior_150;
sigmauiotaALL = exp( log_sigmauiotaALL );
log_sigmaulbALL = -9.902858099999999552665030932985246181488037109375 - 0.312611626233360306859054844608181156218051910400390625 * InternalPrior_118 + 0.45695165569262063964828257667249999940395355224609375 * InternalPrior_119 - 0.30915358205801057867034842274733819067478179931640625 * InternalPrior_120 + 0.07014444524914568990237029311174410395324230194091796875 * InternalPrior_121 + 0.208605120038282076944113896388444118201732635498046875 * InternalPrior_124 + 1.0658038341867313025801422554650343954563140869140625 * InternalPrior_125 - 1.026103827131940260386500085587613284587860107421875 * InternalPrior_126 + 1.1914750600732684215898871116223745048046112060546875 * InternalPrior_127 + 0.023151765413378273816835672960223746486008167266845703125 * InternalPrior_128 - 0.0008678356440665921205102062430114528979174792766571044921875 * InternalPrior_129 + 0.7738928647313179087774415165768004953861236572265625 * InternalPrior_130 - 0.356133697752469446928813567865290679037570953369140625 * InternalPrior_131 + 0.414399388431000492705180704433587379753589630126953125 * InternalPrior_132 - 0.1672282118852169985334654711550683714449405670166015625 * InternalPrior_133 - 0.0081038746880548739870420149600249715149402618408203125 * InternalPrior_134 - 0.379517621907588365015584486172883771359920501708984375 * InternalPrior_135 - 0.78314850338563690712589959730394184589385986328125 * InternalPrior_136 + 0.126308427547783264088820942561142146587371826171875 * InternalPrior_139 - 0.06908524060478436756849163202787167392671108245849609375 * InternalPrior_144 + 0.476560606679743148372807581836241297423839569091796875 * InternalPrior_150;
sigmaulbALL = exp( log_sigmaulbALL );
log_sigmauCALL = -9.902858099999999552665030932985246181488037109375 + 0.93860831777283737498152049738564528524875640869140625 * InternalPrior_118 + 0.0877816129993607974224545387187390588223934173583984375 * InternalPrior_119 + 0.21875851477860042137990603805519640445709228515625 * InternalPrior_120 + 1.260448374871422583254343408043496310710906982421875 * InternalPrior_121 - 0.2038597994933371848613745669354102574288845062255859375 * InternalPrior_124 - 1.041559075331724759649887346313335001468658447265625 * InternalPrior_125 + 0.12224843661073937772787445510402903892099857330322265625 * InternalPrior_126 + 0.351498654662538434489960081918979994952678680419921875 * InternalPrior_127 - 0.11395951357708640483412665389550966210663318634033203125 * InternalPrior_128 + 0.91609477584158749419174228023621253669261932373046875 * InternalPrior_129 + 0.235437798731166603172226814422174356877803802490234375 * InternalPrior_130 - 0.148610335089486067516872935811989009380340576171875 * InternalPrior_131 - 0.371054965748485676702017599382088519632816314697265625 * InternalPrior_132 + 0.1634241275491862543933763163295225240290164947509765625 * InternalPrior_133 + 0.051023065952309508419570960313649266026914119720458984375 * InternalPrior_134 - 0.492088105901920258578030598073382861912250518798828125 * InternalPrior_135 - 0.78314850338563690712589959730394184589385986328125 * InternalPrior_136 + 0.126308427547783264088820942561142146587371826171875 * InternalPrior_139 - 0.06908524060478436756849163202787167392671108245849609375 * InternalPrior_144 + 0.476560606679743148372807581836241297423839569091796875 * InternalPrior_150;
sigmauCALL = exp( log_sigmauCALL );
log_sigmauLALL = -9.902858099999999552665030932985246181488037109375 - 0.144451747814301090233612967494991607964038848876953125 * InternalPrior_118 - 1.4246548754313856921527303711627610027790069580078125 * InternalPrior_119 + 0.06272963832702431463683723222857224754989147186279296875 * InternalPrior_120 - 0.20488812766159425482470624046982266008853912353515625 * InternalPrior_121 - 0.027642582143181763931760741570542450062930583953857421875 * InternalPrior_124 - 0.141231289191839859409327573303016833961009979248046875 * InternalPrior_125 + 0.11438261795448391444640634517782018519937992095947265625 * InternalPrior_126 - 0.442040274848420178255281598467263393104076385498046875 * InternalPrior_127 + 0.0758475665954796152146144549988093785941600799560546875 * InternalPrior_128 - 0.06777248096701525559293344258549041114747524261474609375 * InternalPrior_129 - 0.3420201218677483279151374517823569476604461669921875 * InternalPrior_130 + 0.07196534104933356712496816953716916032135486602783203125 * InternalPrior_131 + 1.4766826678817983609093289487645961344242095947265625 * InternalPrior_132 + 0.022159665030494858639631416963311494328081607818603515625 * InternalPrior_133 + 0.01877966290487483036475424569289316423237323760986328125 * InternalPrior_134 - 0.69964195216321678483240020796074531972408294677734375 * InternalPrior_135 - 0.78314850338563690712589959730394184589385986328125 * InternalPrior_136 + 0.126308427547783319599972173818969167768955230712890625 * InternalPrior_139 - 0.0690852406047844092018550554712419398128986358642578125 * InternalPrior_144 + 0.476560606679743148372807581836241297423839569091796875 * InternalPrior_150;
sigmauLALL = exp( log_sigmauLALL );
log_sigmauHALL = -9.90364948999999938905602903105318546295166015625 - 0.57111479169402257216603402412147261202335357666015625 * InternalPrior_118 - 1.035994193186590361932530868216417729854583740234375 * InternalPrior_119 + 0.322916844687657855761386826998204924166202545166015625 * InternalPrior_120 - 0.665258457981007023107622444513253867626190185546875 * InternalPrior_121 - 0.1281496896107378880014238120566005818545818328857421875 * InternalPrior_124 - 0.65474150640166028924937791089178062975406646728515625 * InternalPrior_125 - 0.453718048194421796903696986191789619624614715576171875 * InternalPrior_126 + 0.632246797665104498520349807222373783588409423828125 * InternalPrior_127 + 0.0109604712839480138153458455008149030618369579315185546875 * InternalPrior_128 + 0.2333463261795571674905858117199386470019817352294921875 * InternalPrior_129 + 0.475827858117882362964934372939751483500003814697265625 * InternalPrior_130 - 0.0269620423253597273072212914257761440239846706390380859375 * InternalPrior_131 - 0.76768799843691815087964869235293008387088775634765625 * InternalPrior_132 + 0.102731147937866806874041003538877703249454498291015625 * InternalPrior_133 + 0.222831868921328835053685679667978547513484954833984375 * InternalPrior_134 + 0.2469728378938020885158266537473537027835845947265625 * InternalPrior_135 + 0.23854732584514248827645133133046329021453857421875 * InternalPrior_136 - 0.50792835778464728857528598382486961781978607177734375 * InternalPrior_139 + 1.12424417195016790316230981261469423770904541015625 * InternalPrior_140 - 0.25862045473035288889462890438153408467769622802734375 * InternalPrior_141 - 0.34099526905501509332907517091371119022369384765625 * InternalPrior_144 + 0.49045596003818026087373027621651999652385711669921875 * InternalPrior_150;
sigmauHALL = exp( log_sigmauHALL );
log_sigmauKALL = -9.90364948999999938905602903105318546295166015625 - 0.1913093364822846809136791534911026246845722198486328125 * InternalPrior_118 - 0.1709211352656565263696819556571426801383495330810546875 * InternalPrior_119 - 0.468518191784612125783127112299553118646144866943359375 * InternalPrior_120 + 1.3038586403821612602627055821358226239681243896484375 * InternalPrior_121 + 0.1792376562728428546211745242544566281139850616455078125 * InternalPrior_124 + 0.91575979175958022171499806063366122543811798095703125 * InternalPrior_125 + 0.282865074047930320499943945833365432918071746826171875 * InternalPrior_126 - 0.1692865191824379500484809568661148659884929656982421875 * InternalPrior_127 + 0.135556704211792278247372678379178978502750396728515625 * InternalPrior_128 - 0.0231121339344560507156334239198258728720247745513916015625 * InternalPrior_129 - 0.91906859883858549320478914523846469819545745849609375 * InternalPrior_130 - 0.13517515832761428651309643100830726325511932373046875 * InternalPrior_131 - 0.08470701668066181466709707592599443159997463226318359375 * InternalPrior_132 - 0.1436857961851762677252253297410788945853710174560546875 * InternalPrior_133 - 0.2829558424802993688018659668159671127796173095703125 * InternalPrior_134 + 0.186349684072716514915413199560134671628475189208984375 * InternalPrior_135 + 0.238547325837776325041517111458233557641506195068359375 * InternalPrior_136 - 0.5079283577860171927653709644800983369350433349609375 * InternalPrior_139 + 1.1242441719500322339087006184854544699192047119140625 * InternalPrior_140 - 0.258620454730763948969496368590625934302806854248046875 * InternalPrior_141 - 0.34099526905512067553871702330070547759532928466796875 * InternalPrior_144 + 0.49045596003818026087373027621651999652385711669921875 * InternalPrior_150;
sigmauKALL = exp( log_sigmauKALL );
log_sigmauXALL = -9.90364948999999938905602903105318546295166015625 + 0.76242412817680982328738537034951150417327880859375 * InternalPrior_118 + 1.20691532845255000694351110723800957202911376953125 * InternalPrior_119 + 0.1456013470967709444447990563276107423007488250732421875 * InternalPrior_120 - 0.638600182400472338173358366475440561771392822265625 * InternalPrior_121 - 0.051087966662054784539037655122228898108005523681640625 * InternalPrior_124 - 0.261018285357659751699799244306632317602634429931640625 * InternalPrior_125 + 0.170852974146852576442512372523196972906589508056640625 * InternalPrior_126 - 0.46296027848321108510987187401042319834232330322265625 * InternalPrior_127 - 0.14651717549546983132557897988590411841869354248046875 * InternalPrior_128 - 0.21023419224510941916150841279886662960052490234375 * InternalPrior_129 + 0.443240740720879655700770172188640572130680084228515625 * InternalPrior_130 + 0.1621372006529750720016380682864109985530376434326171875 * InternalPrior_131 + 0.85239501511795967569895537963020615279674530029296875 * InternalPrior_132 + 0.040954648247268223004713405543952831067144870758056640625 * InternalPrior_133 + 0.060123973558822436935589195172724430449306964874267578125 * InternalPrior_134 - 0.433322521966793383629834579551243223249912261962890625 * InternalPrior_135 + 0.238547325839715884665537259934353642165660858154296875 * InternalPrior_136 - 0.5079283577850730591052297313581220805644989013671875 * InternalPrior_139 + 1.1242441719499349783717434547725133597850799560546875 * InternalPrior_140 - 0.258620454730762616701866818402777425944805145263671875 * InternalPrior_141 - 0.34099526905558963374431868942338041961193084716796875 * InternalPrior_144 + 0.49045596003818026087373027621651999652385711669921875 * InternalPrior_150;
sigmauXALL = exp( log_sigmauXALL );
log_sigmauTALL = -9.90364948999999938905602903105318546295166015625 + 0.140959034971906593813884001065162010490894317626953125 * InternalPrior_118 - 0.425911355306133942999480268554179929196834564208984375 * InternalPrior_119 - 0.1848470040371919809185641270232736133038997650146484375 * InternalPrior_120 + 0.3397206796089362601520633688778616487979888916015625 * InternalPrior_121 + 0.07416890550773606871626242309503140859305858612060546875 * InternalPrior_124 + 0.3789432582147167494213135796599090099334716796875 * InternalPrior_125 + 0.305278735242235310654024260657024569809436798095703125 * InternalPrior_126 - 0.80849349515712998215377638189238496124744415283203125 * InternalPrior_127 + 0.726395402212490548521373057155869901180267333984375 * InternalPrior_128 - 0.1718528070564078469306679153305594809353351593017578125 * InternalPrior_129 + 1.444807095783272377076400516671128571033477783203125 * InternalPrior_130 + 0.036583841359512057900271742028053267858922481536865234375 * InternalPrior_131 - 0.274317391327152881874695822261855937540531158447265625 * InternalPrior_132 - 0.0594574737344229775626303080571233294904232025146484375 * InternalPrior_133 - 0.13245173398551879362372574178152717649936676025390625 * InternalPrior_134 + 0.01184660733825232924176784621295155375264585018157958984375 * InternalPrior_135 + 0.23854732584079474388971675580251030623912811279296875 * InternalPrior_136 - 0.50792835778089251430600370440515689551830291748046875 * InternalPrior_139 - 0.338150202241048802864753497487981803715229034423828125 * InternalPrior_140 + 1.102934240332348547752872036653570830821990966796875 * InternalPrior_141 - 0.34099526905670696219630144696566276252269744873046875 * InternalPrior_144 + 0.490455960038178206961134719676920212805271148681640625 * InternalPrior_150;
sigmauTALL = exp( log_sigmauTALL );
log_sigmauNTALL = -9.90364948999999938905602903105318546295166015625 + 0.05760594665602823682970523577751009725034236907958984375 * InternalPrior_118 + 0.423369920854257786313468159278272651135921478271484375 * InternalPrior_119 + 0.184847004036990281150565351708792150020599365234375 * InternalPrior_120 - 0.339720679608481235245420748469769023358821868896484375 * InternalPrior_121 - 0.07416890550765682654787980254695867188274860382080078125 * InternalPrior_124 - 0.378943258214311906595384016327443532645702362060546875 * InternalPrior_125 - 0.30527873524199600208106630816473625600337982177734375 * InternalPrior_126 + 0.66267411920606622555141029806691221892833709716796875 * InternalPrior_127 + 1.234650434244457084531632062862627208232879638671875 * InternalPrior_128 + 0.17185280705629912834098149687633849680423736572265625 * InternalPrior_129 - 1.1636536405692059492622547622886486351490020751953125 * InternalPrior_130 - 0.036583841359515589797268830807297490537166595458984375 * InternalPrior_131 + 0.212543999022543228516468616362544707953929901123046875 * InternalPrior_132 + 0.059457473734359396477788806123498943634331226348876953125 * InternalPrior_133 + 0.1324517339853843456154436353244818747043609619140625 * InternalPrior_134 - 0.01076553542419411875485923957285194774158298969268798828125 * InternalPrior_135 + 0.2385473258402347196405202112146071158349514007568359375 * InternalPrior_136 - 0.507928357781680883675790028064511716365814208984375 * InternalPrior_139 - 0.3381502022409819119275198318064212799072265625 * InternalPrior_140 + 1.1029342403316568788085305641288869082927703857421875 * InternalPrior_141 - 0.3409952690568565092377184555516578257083892822265625 * InternalPrior_144 + 0.4904559600381837025651066142017953097820281982421875 * InternalPrior_150;
sigmauNTALL = exp( log_sigmauNTALL );
log_sigmauWALL = -9.90364948999999938905602903105318546295166015625 - 0.1985649816276779666690543990625883452594280242919921875 * InternalPrior_118 + 0.002541434452612705528762315765334278694353997707366943359375 * InternalPrior_119 + 0.145819375950878404868404913941049017012119293212890625 * InternalPrior_127 - 1.96104583645763153043617421644739806652069091796875 * InternalPrior_128 - 0.28115345521485812785300595351145602762699127197265625 * InternalPrior_130 + 0.061773392305165396309885039727305411361157894134521484375 * InternalPrior_132 - 0.00108107191420013840597869059223512522294186055660247802734375 * InternalPrior_135 + 0.238547325840870405588844960220740176737308502197265625 * InternalPrior_136 - 0.50792835778107636723888163032825104892253875732421875 * InternalPrior_139 - 0.33815020224075553745279876238782890141010284423828125 * InternalPrior_140 + 1.1029342403314519316381847602315247058868408203125 * InternalPrior_141 - 0.340995269056650174288591870208620093762874603271484375 * InternalPrior_144 + 0.49045596003818070496294012627913616597652435302734375 * InternalPrior_150;
sigmauWALL = exp( log_sigmauWALL );

JP_ = step3GetSteady( lambda, eta, phiR, zetaR, gamma, scriptp, scriptq,  
alphaCP, alphaCD, alphah, alphaKP, alphaD, alphaND, alphaHP, alphaHW, alphaHL, alphaK, alphaKL, alphaHLX, alphaY, betabarl, 
sigma, xi, bbeta, 
h, varrhoC, eC, varrhoCP, eCP, varrhoCD, 
nuW, nuT, nuNT, nuSW, nuST, nuSNT, nuD, nuNDCG, nuK, nuH, nuh, 
rhoQB, 
thetaKU0, thetaKU1, thetaDU0, thetaDU1, 
alphaNC, eT, eW, FWCtilde, FKtilde, 
o, eKLT, eKLNT, eKLW, varrhoKL, eHLXT, eHLXNT, eHLXW, varrhoHLX, eYT, eYNT, eYW, varrhoY, 
tauKG_, tauHG_, tauCG_, taub_, tauD_, tauND_, tauNT_, tauTC_, iotaTX_, iotaTM_, iotaWX_, iotaWM_, tauLa_, tauLb_, tauHW_, tauHT_, tauHNT_, tauKW_, tauKT_, tauKNT_, tauscriptXW_, tauscriptXT_, tauscriptXNT_, 
phiiotaTX ,phiiotaTM, phiiotaWX, phiiotaWM, 
Omegah_, OmegaCP_, OmegaC_, OmegaKP_, OmegaHP_, OmegaD_, OmegaND_, OmegaKG_, OmegaHG_, OmegaCG_, OmegaY_, OmegaTC_, OmegaWP_, OmegaWC_, OmegaKT_, OmegaHLT_, OmegaKLT_, OmegaHLXT_, OmegaT_, OmegaKNT_, OmegaHLNT_, OmegaKLNT_, OmegaHLXNT_, OmegaNT_, OmegaKW_, OmegaHLW_, OmegaKLW_, OmegaHLXW_, OmegaW_, 
GN_, Z_, deltaItilde_, scriptFI_, deltaD_, kappa0_, kappah_, 
kappaT_, kappaNT_, kappaW_, kappaST_, kappaSNT_, kappaSW_, kappaD_, kappaNDCG_, kappaK_, kappaH_, 
deltaK_, deltaH_, betabarb, 
pT0, yTC0, m_, varpi_, eT0_
@#for n in 1:SN
, Ntilde@{n}_
@#endfor
);

    LW1l_ = exp( GetSolution( 1+(1-1)*28 ) );
    LT1l_ = exp( GetSolution( 2+(1-1)*28 ) );
    LNT1l_ = exp( GetSolution( 3+(1-1)*28 ) );
    LSW1l_ = exp( GetSolution( 4+(1-1)*28 ) );
    LST1l_ = exp( GetSolution( 5+(1-1)*28 ) );
    LSNT1l_ = exp( GetSolution( 6+(1-1)*28 ) );
    LNDCG1l_ = exp( GetSolution( 7+(1-1)*28 ) );
    Lh1l_ = exp( GetSolution( 8+(1-1)*28 ) );
    CD1l_ = exp( GetSolution( 9+(1-1)*28 ) );
    CND1l_ = exp( GetSolution( 10+(1-1)*28 ) );
    LNDCG1b_ = exp( GetSolution( 11+(1-1)*28 ) );
    Lh1b_ = exp( GetSolution( 12+(1-1)*28 ) );
    CD1b_ = exp( GetSolution( 13+(1-1)*28 ) );
    CND1b_ = exp( GetSolution( 14+(1-1)*28 ) );
    LKP1_ = exp( GetSolution( 15+(1-1)*28 ) );
    LHP1_ = exp( GetSolution( 16+(1-1)*28 ) );
    LND1_ = exp( GetSolution( 17+(1-1)*28 ) );
    LCG1_ = exp( GetSolution( 18+(1-1)*28 ) );
    LKG1_ = exp( GetSolution( 19+(1-1)*28 ) );
    LHG1_ = exp( GetSolution( 20+(1-1)*28 ) );
    KPT1_ = exp( GetSolution( 21+(1-1)*28 ) );
    KPNT1_ = exp( GetSolution( 22+(1-1)*28 ) );
    KPW1_ = exp( GetSolution( 23+(1-1)*28 ) );
    IKP1_ = exp( GetSolution( 24+(1-1)*28 ) );
    IHP1_ = exp( GetSolution( 25+(1-1)*28 ) );
    P1_ = exp( GetSolution( 26+(1-1)*28 ) );
    YWC1_ = exp( GetSolution( 27+(1-1)*28 ) );
    X1_ = exp( GetSolution( 28+(1-1)*28 ) );

    WD1_ = GetAdditionalSolution( 1 +(1-1)*7 );
    WW1_ = GetAdditionalSolution( 2 +(1-1)*7 );
    WT1_ = GetAdditionalSolution( 3 +(1-1)*7 );
    WNT1_ = GetAdditionalSolution( 4 +(1-1)*7 );
    WSW1_ = GetAdditionalSolution( 5 +(1-1)*7 );
    WST1_ = GetAdditionalSolution( 6 +(1-1)*7 );
    WSNT1_ = GetAdditionalSolution( 7 +(1-1)*7 );
@#for n in 2:SN
    LW@{n}l_ =      LW1l_      /Ntilde1_*Ntilde@{n}_;
    LT@{n}l_ =      LT1l_      /Ntilde1_*Ntilde@{n}_;
    LNT@{n}l_ =     LNT1l_     /Ntilde1_*Ntilde@{n}_;
    LSW@{n}l_ =     LSW1l_     /Ntilde1_*Ntilde@{n}_;
    LST@{n}l_ =     LST1l_     /Ntilde1_*Ntilde@{n}_;
    LSNT@{n}l_ =    LSNT1l_    /Ntilde1_*Ntilde@{n}_;
    LNDCG@{n}l_ =   LNDCG1l_   /Ntilde1_*Ntilde@{n}_;
    Lh@{n}l_ =      Lh1l_      /Ntilde1_*Ntilde@{n}_;
    CD@{n}l_ =      CD1l_      /Ntilde1_*Ntilde@{n}_;
    CND@{n}l_ =     CND1l_     /Ntilde1_*Ntilde@{n}_;
    LNDCG@{n}b_  =  LNDCG1b_   /Ntilde1_*Ntilde@{n}_;
    Lh@{n}b_ =      Lh1b_      /Ntilde1_*Ntilde@{n}_;
    CD@{n}b_ =      CD1b_      /Ntilde1_*Ntilde@{n}_;
    CND@{n}b_ =     CND1b_     /Ntilde1_*Ntilde@{n}_;
    LKP@{n}_ =      LKP1_      /Ntilde1_*Ntilde@{n}_;
    LHP@{n}_ =      LHP1_      /Ntilde1_*Ntilde@{n}_;
    LND@{n}_ =      LND1_      /Ntilde1_*Ntilde@{n}_;
    LCG@{n}_ =      LCG1_      /Ntilde1_*Ntilde@{n}_;
    LKG@{n}_ =      LKG1_      /Ntilde1_*Ntilde@{n}_;
    LHG@{n}_ =      LHG1_      /Ntilde1_*Ntilde@{n}_;
    KPT@{n}_ =      KPT1_      /Ntilde1_*Ntilde@{n}_;
    KPNT@{n}_ =     KPNT1_     /Ntilde1_*Ntilde@{n}_;
    KPW@{n}_ =      KPW1_      /Ntilde1_*Ntilde@{n}_;
    IKP@{n}_ =      IKP1_      /Ntilde1_*Ntilde@{n}_;
    IHP@{n}_ =      IHP1_      /Ntilde1_*Ntilde@{n}_;
    P@{n}_ =        P1_        ;
    YWC@{n}_ =      YWC1_      /Ntilde1_*Ntilde@{n}_;
    X@{n}_ =        X1_        /Ntilde1_*Ntilde@{n}_;

    WD@{n}_    = WD1_    ;
    WW@{n}_    = WW1_    ;
    WT@{n}_    = WT1_    ;
    WNT@{n}_   = WNT1_   ;
    WSW@{n}_   = WSW1_   ;
    WST@{n}_   = WST1_   ;
    WSNT@{n}_  = WSNT1_  ;
@#endfor

@#for n in 1:SN
    tauKG@{n}_        = tauKG_       ;
    tauHG@{n}_        = tauHG_       ;
    tauCG@{n}_        = tauCG_       ;
    tau@{n}b_         = taub_        ;
    tau@{n}l_         = taul_        ;
    tauD@{n}_         = tauD_        ;
    tauND@{n}_        = tauND_       ;
    tauNT@{n}_        = tauNT_       ;
    tauTC@{n}_        = tauTC_       ;
    iotaTX@{n}_       = iotaTX_      ;
    iotaTM@{n}_       = iotaTM_      ;
    iotaWX@{n}_       = iotaWX_      ;
    iotaWM@{n}_       = iotaWM_      ;
    tauLa@{n}_        = tauLa_       ;
    tauLb@{n}_        = tauLb_       ;
    tauHW@{n}_        = tauHW_       ;
    tauHT@{n}_        = tauHT_       ;
    tauHNT@{n}_       = tauHNT_      ;
    tauKW@{n}_        = tauKW_       ;
    tauKT@{n}_        = tauKT_       ;
    tauKNT@{n}_       = tauKNT_      ;
    tauscriptXW@{n}_  = tauscriptXW_ ;
    tauscriptXT@{n}_  = tauscriptXT_ ;
    tauscriptXNT@{n}_ = tauscriptXNT_;
@#endfor

alphaHG = alphaHP;
alphaKG = alphaKP;
alphaCG = alphaND;

%growth rate
tt3 = (alphaK * alphaY);
tt4 = (tt3 * alphaHG);
tt6 = (alphaHW * alphaKG * alphaKL);
tt10 = (alphaHW * alphaKL * alphaKP);
tt13 = (alphaY * alphaHG);
tt15 = (alphaHLX * alphaHP);
tt16 = (tt15 * alphaHW);
tt21 = (alphaK * alphaHG);
tt26 = (alphaHW ^ 2);
tt31 = (alphaY * alphaHL);
tt33 = (alphaKG * alphaKL);
tt35 = (alphaKL * alphaKP);
tt37 = (alphaK * alphaHW);
tt44 = 2 * tt4 * tt6 - 2 * tt4 * tt10 - 2 * tt13 * alphaHL * tt16 + tt3 * tt6 - tt3 * tt10 - 2 * tt21 * tt6 + 2 * tt21 * tt10 - tt13 * alphaHLX * tt26 + 2 * tt13 * tt10 - tt31 * tt16 - tt3 * tt33 + tt3 * tt35 - tt37 * tt33 + tt37 * tt35 + tt13 * alphaHLX * alphaHW + tt13 * tt26 + tt31 * tt15;
tt45 = alphaY * alphaHLX;
tt47 = alphaY * alphaHW;
tt49 = alphaHW * alphaHG;
tt64 = alphaK * alphaKG * alphaKL - alphaK * alphaKL * alphaKP - alphaY * alphaKL * alphaKP + alphaY * tt26 - tt13 * alphaHW - tt45 * tt26 + tt47 * tt35 - 2 * tt49 * tt35 + 2 * tt45 * alphaHW + alphaY - tt10 + tt35 - tt45 - 2 * tt47 + 2 * tt49 + alphaHW - 1;
b_ = (-1 + alphaHLX) * alphaY / (tt44 + tt64) * (tt49 + alphaHW - 1) * (-1 + alphaHW);
c_ =b_*alphaHG/(1-alphaHW-alphaHW*alphaHG);
d_ =(b_-c_*alphaHW)/(1-alphaHW);
a_ = b_+1;

%%
%some aggregation and population
@#for n in 1:SN
    CND@{n}_ = CND@{n}b_ + CND@{n}l_;
    LNDCG@{n}_ = LNDCG@{n}b_ + LNDCG@{n}l_;
    N@{n}b_ = 100*Ntilde@{n}_ * varpi_;
    N@{n}l_ = 100*Ntilde@{n}_ * (1-varpi_);
    N@{n}_ = N@{n}b_ + N@{n}l_;
@#endfor

NN_ = 0 
    @#for n in 1:SN
        + N@{n}_
    @#endfor
    ;

N0_ = 100 - NN_;

X_ = 0 
@#for n in 1:SN
    + X@{n}_ 
@#endfor
;
YWC_ = 0 
@#for n in 1:SN
    + YWC@{n}_ 
@#endfor
;

@#for n in 1:SN
    OmegaY@{n}__ = OmegaY_ *Ntilde@{n}_ /Ntilde1_;
@#endfor

%a few equations from the production of IND and CG, in order to get beta first.
%also the production of public goods
@#for n in 1:SN
    Y@{n}_ = OmegaY@{n}__;
    YND@{n}_ = ( CND@{n}_ / OmegaND_ / LND@{n}_ ^ ( 1 - alphaND ) ) ^ ( 1 / alphaND );
    PND@{n}_DIVIDEDP@{n}_ = YND@{n}_ / CND@{n}_ / alphaND;
    PND@{n}_ = PND@{n}_DIVIDEDP@{n}_ * P@{n}_;
    beta@{n}b_ = betabarb - bbeta * log( CND@{n}_ * PND@{n}_DIVIDEDP@{n}_ / Y@{n}_ );
    beta@{n}l_ = betabarl - bbeta * log( CND@{n}_ * PND@{n}_DIVIDEDP@{n}_ / Y@{n}_ );
    
    YCG@{n}_ = tauCG_ * alphaCG * Y@{n}_;
    CG@{n}_ = OmegaCG_ * YCG@{n}_ ^ alphaCG * LCG@{n}_ ^ ( 1 - alphaCG );
    PCG@{n}_ = P@{n}_ * YCG@{n}_ / alphaCG / CG@{n}_;
@#endfor

%%
%engineering sector
muP_ = lambda * eta * JP_ / ( JP_ - ( 1 - eta ) );
omegaP_ = JP_ * ( 1 - eta ) / ( JP_ - ( 1 - eta ) ) ^ 2 / ( 1 + muP_ ); 
scriptdP_ = 1 - omegaP_ / ( 1 + omegaP_ ) * ( lambda - muP_ ) * ( muP_ - eta * lambda ) / lambda / ( 1 - eta ) / muP_;
ScriptFRP_ = muP_ * scriptp / ( scriptdP_ - muP_ * scriptp * gamma ) / Z_;
GAs_ = ( 1 + gamma * Z_ * ScriptFRP_ ) ^ ( 1 / gamma );
GERP_ = ( GAs_ ^ ( b_ * phiR - zetaR ) * GN_ ^ phiR ) ^ ( 1 / ( 1 - phiR ) );    
GII_ = GERP_ * GN_ * GAs_ ^ b_;
scripts_ = ( 1 - ( 1 - deltaItilde_ ) / GII_ ) / ( 1 - ( 1 - deltaItilde_ ) / GII_ * ( 1 - scriptq ) );
mu_ = ( ( 1 - scripts_ ) * ( 1 / ( 1 + eta * lambda ) ) ^ ( 1 / lambda ) + scripts_ * ( 1 / ( 1 + muP_ ) ) ^ ( 1 / lambda ) ) ^ ( -lambda ) - 1;
AN_ = ( ( 1 - ( 1 - deltaItilde_ ) / GII_ * ( 1 - scripts_ ) / ( 1 - scripts_ ) ) / ( 1 - ( 1 - deltaItilde_ ) / GII_ * ( 1 - scripts_ ) / ( 1 - scripts_ ) * ( GAs_ ) ^ ( -1 / lambda ) ) ) ^ lambda;
%aggregate productivity of engineering and engineering productivity law of motion
PWC_ = ( ( 1 - scripts_ ) * ( AN_ / ( 1 + eta * lambda ) / GAs_ ) ^ ( 1 / lambda ) + scripts_ * ( 1 / ( 1 + muP_ ) ) ^ ( 1 / lambda ) ) ^ lambda;
A_ = PWC_ * ( 1 + mu_ );

gII_ = GN_ * GAs_ ^ b_;
gB_ = GN_ * GAs_ ^ a_;
gYS_ = GN_ * GAs_ ^ d_;
gPS_ = GN_ * GAs_ ^ a_ / gYS_;
gYWC_ = GN_ * GAs_ ^ b_;
gX_ = GN_ * GAs_ ^ a_;
gKP_ = GN_ * GAs_ ^ ( d_ * alphaKP );
gHP_ = GN_ * GAs_ ^ ( d_ * alphaHP );
gPKP_ = GN_ * GAs_ ^ a_ / gKP_;
gPHP_ = GN_ * GAs_ ^ a_ / gHP_;
gKG_ = GN_ * GAs_ ^ ( d_ * alphaKG );
gHG_ = GN_ * GAs_ ^ ( d_ * alphaHG );
gYHL_ = GN_ * GAs_ ^ ( d_ * alphaHP * alphaHL );
gPHL_ = GN_ * GAs_ ^ a_ / gYHL_;
gK_ = gKG_ ^ alphaK * gKP_ ^ ( 1 - alphaK );
gRK_ = GN_ * GAs_ ^ a_ / gK_;
gYKL_ = gK_ ^ alphaKL * GN_ ^ ( 1 - alphaKL );
gPKL_ = GN_ * GAs_ ^ a_ / gYKL_;
gKBar_ = gK_ / GN_;
gYHLX_ = gYHL_ ^ alphaHLX * ( GN_ * GAs_ ^ a_ ) ^ ( 1 - alphaHLX );
gPHLX_ = GN_ * GAs_ ^ a_ / gYHLX_;
gYHLBar_ = gYHL_ / ( GN_ * GAs_ ^ a_ );
gYHLXBar_ = gYHLX_ / gYKL_;
gCG_ = GN_ * GAs_ ^ ( d_ * alphaCG );
gCND_ = GN_ * GAs_ ^ ( d_ * alphaND );
gD_ = GN_ * GAs_ ^ ( d_ * alphaD );
gPD_ = GN_ * GAs_ ^ a_ / gD_;
gPND_ = GN_ * GAs_ ^ a_ / gCND_;
gCD_ = GN_ * GAs_ ^ ( d_ * alphaD * alphah );
gCDBar_ = gCD_ / gCND_;
gCP_ = gCDBar_ ^ alphaCD * gCND_;
gCPBar_ = gCP_ / gCG_;
gC_ = gCPBar_ ^ alphaCP * gCG_;
gCBar_ = gC_;
gV_ = gCBar_ * GN_ ^ ( xi / ( 1 - sigma ) - 1 );
glambda_C_ = GN_ ^ ( xi / ( 1 - sigma ) - 1 );
glambda_CPBar_ = gC_ / gCPBar_ * glambda_C_;
glambda_CP_ = glambda_CPBar_ / gCG_;
glambda_CDBar_ = glambda_CP_ * gCP_ / gCDBar_;
glambda_CD_ = glambda_CDBar_ / gCND_;
glambda_B_ = glambda_CP_ * GAs_ ^ ( alphaCD * ( d_ * alphaD * alphah - d_ * alphaND ) - a_ + d_ * alphaND );
glambda_GD_ = glambda_CP_ * GAs_ ^ ( alphaCD * ( d_ * alphaD * alphah - d_ * alphaND ) + d_ * alphaND - d_ * alphaD );
glambda_D_ = glambda_GD_;
glambda_GK_ = glambda_CP_ * GAs_ ^ ( alphaCD * ( d_ * alphaD * alphah - d_ * alphaND ) + d_ * alphaND - d_ * alphaKP );
glambda_K_ = glambda_GK_;
glambda_GH_ = glambda_CP_ * GAs_ ^ ( alphaCD * ( d_ * alphaD * alphah - d_ * alphaND ) + d_ * alphaND - d_ * alphaHP );
glambda_H_ = glambda_GH_;

%%
%Consumption composite
@#for n in 1:SN
    @#for m in Members
        CDBar@{n}@{m}_ = CD@{n}@{m}_ / CND@{n}@{m}_ * gCDBar_ ^ ( -varrhoCD / ( 1 - varrhoCD ) );
        CP@{n}@{m}_ = N@{n}@{m}_ * OmegaCP_ * ( CDBar@{n}@{m}_ / gCDBar_ ) ^ alphaCD * ( alphaCD * ( CD@{n}@{m}_ / N@{n}@{m}_ / ( CDBar@{n}@{m}_ / gCDBar_ ) ) ^ ( ( eCP - 1 ) / eCP )  +  ( 1 - alphaCD ) * ( CND@{n}@{m}_ / N@{n}@{m}_ ) ^ ( ( eCP - 1 ) / eCP ) ) ^ ( eCP / ( eCP - 1 ) );
        CPBar@{n}@{m}_ = CP@{n}@{m}_ / CG@{n}_ * ( N@{n}b_ + N@{n}l_ ) / N@{n}@{m}_ * gCPBar_ ^ ( -varrhoCP / ( 1 - varrhoCP ) );
        C@{n}@{m}_ = N@{n}@{m}_ * OmegaC_ * ( CPBar@{n}@{m}_ / gCPBar_ ) ^ alphaCP * ( alphaCP * ( CP@{n}@{m}_ / N@{n}@{m}_ / ( CPBar@{n}@{m}_ / gCPBar_ ) ) ^ ( ( eC - 1 ) / eC )  +  ( 1 - alphaCP ) * ( CG@{n}_ / ( N@{n}b_ + N@{n}l_ ) ) ^ ( ( eC - 1 ) / eC ) ) ^ ( eC / ( eC - 1 ) );
        CBar@{n}@{m}_ = N@{n}@{m}_ * ( C@{n}@{m}_ / N@{n}@{m}_ ) * ( gCBar_ / GN_ ) ^ ( -varrhoC / ( 1 - varrhoC ) );
    @#endfor
@#endfor

%STD and 2 engineering equations
@#for n in 1:SN
    VV@{n}l_=beta@{n}l_ * gV_ ^ -sigma;
    VV@{n}b_=beta@{n}b_ * gV_ ^ -sigma;
    Xi@{n}_ = VV@{n}l_ * glambda_B_;
@#endfor
    Xi_ = Xi1_;
    Q_ = Xi_;
@#for n in 1:SN
    QB@{n}_ = VV@{n}b_ * glambda_B_;
    lambda_F@{n}_DIVIDEDlambda_B@{n}b_ = ( Q_ - VV@{n}b_ * glambda_B_ ) /  ( 1 - VV@{n}b_ * glambda_B_ * rhoQB );
@#endfor
II_ = 1 / JP_ * muP_ / ( 1 + muP_ ) * ( ( 1 + mu_ ) / ( 1 + muP_ ) ) ^ ( 1 / lambda ) * Xi_ * GN_ * GAs_ ^ a_ * X_ * A_ ^ ( - 1 / lambda ) / ( ScriptFRP_ * PWC_ / scriptp ); %zero profit of engineering sector
VI_ = scriptFI_ * PWC_; %zero profit of invention

%phsical/human capital related (KPS@{n}_ PKP@{n}_ IKPS@{n}_ are solved from production side)
@#for n in 1:SN    
    @#for S in Sectors0
        lambda_GK@{S}@{n}_=0;
        lambda_GH@{S}@{n}_=0;
        KU@{S}@{n}_ = ( ( 1 - VV@{n}l_ * glambda_K_ * ( 1 - deltaK_ ) ) / ( thetaKU0 / gKP_ - VV@{n}l_ * glambda_K_ * thetaKU0 / ( 1+thetaKU1 ) ) ) ^ ( 1 / ( 1+thetaKU1 ) );
        RKP@{S}@{n}_DIVIDEDPKP@{n}_ = thetaKU0 * KU@{S}@{n}_ ^ thetaKU1 / gKP_ / ( 1 - tauK@{S}_ );
        RHP@{S}@{n}_DIVIDEDPHP@{n}_ = ( 1 - VV@{n}l_ * glambda_H_ * ( 1 - deltaH_ ) ) / ( 1 - tauH@{S}_ );
    @#endfor
@#endfor

%Durable stock and home production related
@#for n in 1:SN 
    lambda_GD@{n}l_=0;
    lambda_GD@{n}b_=0;
    
    DU@{n}l_ = ( ( 1 - VV@{n}l_ * glambda_D_ * ( 1 - deltaD_ ) ) / ( thetaDU0 / gD_ - VV@{n}l_ * glambda_D_ * thetaDU0 / ( 1+thetaDU1 ) ) ) ^ ( 1 / ( 1+thetaDU1 ) );
    DU@{n}b_ = ( ( 1 - VV@{n}b_ * glambda_D_ * ( 1 - deltaD_ ) - lambda_F@{n}_DIVIDEDlambda_B@{n}b_ * ( 1 - rhoQB ) * m_ / ( 1 + tauD_ ) ) / ( thetaDU0 / gD_ - VV@{n}b_ * glambda_D_ * thetaDU0 / ( 1+thetaDU1 ) ) ) ^ ( 1 / ( 1+thetaDU1 ) );
    
    @#for m in Members
        D@{n}@{m}_ = ( CD@{n}@{m}_ / Lh@{n}@{m}_ ^ ( 1 - alphah ) / Omegah_ ) ^ ( 1 / alphah ) / DU@{n}@{m}_;
        DP@{n}@{m}_ = D@{n}@{m}_ * gD_;    
        ID@{n}@{m}_ = ( D@{n}@{m}_ - D@{n}@{m}_ / gD_ * ( 1 - deltaD_ - thetaDU0 / ( 1 + thetaDU1 ) * DU@{n}@{m}_ ^ ( 1 + thetaDU1 ) ) );
    @#endfor
    
    ID@{n}_ = ID@{n}b_ + ID@{n}l_;
@#endfor

%production of specialized goods and labor supply
@#for n in 1:SN
%ND in @{n}
    WNDCG@{n}_ = PND@{n}_ * ( 1 - alphaND ) * CND@{n}_ / LND@{n}_;
    tauLNDCG@{n}_ = tauLa_ + tauLb_ * log( WNDCG@{n}_ );
    @#for m in Members
        V@{n}@{m}_DIVIDEDU@{n}@{m}_ = ( ( 1 - beta@{n}@{m}_ ) * N@{n}@{m}_ ^ ( xi - 1 + sigma ) / ( 1 - beta@{n}@{m}_ * gV_ ^ ( 1 - sigma ) ) ) ^ ( 1 / ( 1 - sigma ) );
        lambda_B@{n}@{m}_ = ( V@{n}@{m}_DIVIDEDU@{n}@{m}_ ) ^ sigma  * ( 1 - beta@{n}@{m}_ ) * N@{n}@{m}_ ^ ( xi - 1 + sigma ) * kappaNDCG_ * ( LNDCG@{n}@{m}_ / N@{n}@{m}_ ) ^ nuNDCG * CBar@{n}@{m}_ / N@{n}@{m}_ / ( gCBar_ / GN_ ) / WNDCG@{n}_ / ( 1 - tauLNDCG@{n}_ );
    @#endfor
%D in @{n}
%   WD@{n}_ = (( 
%       ( 1 - tauLD@{n}_ ) ^ ( 1 / nuD ) * ( 
%       ( lambda_B@{n}l_ / ( V@{n}l_DIVIDEDU@{n}l_ ) ^ sigma / ( 1 - beta@{n}l_ ) / N@{n}l_ ^ ( xi - 1 + sigma ) / ( CBar@{n}l_ / gCBar_ / ( N@{n}l_ / GN_ ) ) / kappaD_ ) ^ ( 1 / nuD ) * N@{n}l_ + 
%       ( lambda_B@{n}b_ / ( V@{n}b_DIVIDEDU@{n}b_ ) ^ sigma / ( 1 - beta@{n}b_ ) / N@{n}b_ ^ ( xi - 1 + sigma ) / ( CBar@{n}b_ / gCBar_ / ( N@{n}b_ / GN_ ) ) / kappaD_ ) ^ ( 1 / nuD ) * N@{n}b_ 
%       ) * OmegaD_ / ID@{n}_ / ( ( 1 - alphaD ) / alphaD ) ^ alphaD / P@{n}_ ^ alphaD 
%       ) ^ ( -1 / ( alphaD + 1 / nuD ) )); 
    tauLD@{n}_ = tauLa_ + tauLb_ * log( WD@{n}_ );

    @#for m in Members
        LD@{n}@{m}_ = (( ( V@{n}@{m}_DIVIDEDU@{n}@{m}_ ) ^ sigma  * ( 1 - beta@{n}@{m}_ ) * N@{n}@{m}_ ^ ( xi - 1 + sigma ) * kappaD_ * CBar@{n}@{m}_ / N@{n}@{m}_ ^ ( 1 + nuD ) / ( gCBar_ / GN_ ) / lambda_B@{n}@{m}_ / ( 1 - tauLD@{n}_ ) / WD@{n}_ ) ^ ( -1 / nuD ));
    @#endfor
    LD@{n}_ = LD@{n}b_ + LD@{n}l_;
    YD@{n}_ = ( ID@{n}_ / LD@{n}_ ^ ( 1 - alphaD ) / OmegaD_ ) ^ ( 1 / alphaD );
    PD@{n}_ = YD@{n}_ / ID@{n}_ / alphaD * P@{n}_;
    
%H in @{n}
    WH@{n}_ = ( ( 1 - alphaHP ) / alphaHP ) * ( IHP@{n}_ / LHP@{n}_ / OmegaHP_ ) ^ ( 1 / alphaHP ) * P@{n}_;
    tauLH@{n}_ = tauLa_ + tauLb_ * log( WH@{n}_ );
    @#for m in Members
        LH@{n}@{m}_ = (( ( V@{n}@{m}_DIVIDEDU@{n}@{m}_ ) ^ sigma  * ( 1 - beta@{n}@{m}_ ) * N@{n}@{m}_ ^ ( xi - 1 + sigma ) * kappaH_ * CBar@{n}@{m}_ / N@{n}@{m}_ ^ ( 1 + nuH ) / ( gCBar_ / GN_ ) / lambda_B@{n}@{m}_ / ( 1 - tauLH@{n}_ ) / WH@{n}_ ) ^ ( -1 / nuH ));
    @#endfor
    YHP@{n}_ = ( IHP@{n}_ / LHP@{n}_ ^ ( 1 - alphaHP ) / OmegaHP_ ) ^ ( 1 / alphaHP );
    PHP@{n}_ = YHP@{n}_ / IHP@{n}_ / alphaHP * P@{n}_;
    
    YHG@{n}_ = tauHG_ * alphaHG * Y@{n}_;
    IHG@{n}_ = OmegaHG_ * YHG@{n}_ ^ alphaHG * LHG@{n}_ ^ ( 1 - alphaHG );
    HG@{n}_ = IHG@{n}_ / ( 1 - ( 1 - deltaH_ ) / gHG_ );
    PHG@{n}_ = P@{n}_ * YHG@{n}_ / alphaHG / IHG@{n}_;
    
%K in @{n}
    WK@{n}_ = ( ( 1 - alphaKP ) / alphaKP ) * ( IKP@{n}_ / LKP@{n}_ / OmegaKP_ ) ^ ( 1 / alphaKP ) * P@{n}_;
    tauLK@{n}_ = tauLa_ + tauLb_ * log( WK@{n}_ );
    @#for m in Members
        LK@{n}@{m}_ = (( ( V@{n}@{m}_DIVIDEDU@{n}@{m}_ ) ^ sigma  * ( 1 - beta@{n}@{m}_ ) * N@{n}@{m}_ ^ ( xi - 1 + sigma ) * kappaK_ * CBar@{n}@{m}_ / N@{n}@{m}_ ^ ( 1 + nuK ) / ( gCBar_ / GN_ ) / lambda_B@{n}@{m}_ / ( 1 - tauLK@{n}_ ) / WK@{n}_ ) ^ ( -1 / nuK ));
    @#endfor
    YKP@{n}_ = ( IKP@{n}_ / LKP@{n}_ ^ ( 1 - alphaKP ) / OmegaKP_ ) ^ ( 1 / alphaKP );
    PKP@{n}_ = YKP@{n}_ / IKP@{n}_ / alphaKP * P@{n}_;
    
    YKG@{n}_ = tauKG_ * alphaKG * Y@{n}_;
    IKG@{n}_ = OmegaKG_ * YKG@{n}_ ^ alphaKG * LKG@{n}_ ^ ( 1 - alphaKG );
    KG@{n}_ = IKG@{n}_ / ( 1 - ( 1 - deltaK_ ) / gKG_ );
    PKG@{n}_ = P@{n}_ * YKG@{n}_ / alphaKG / IKG@{n}_;
@#endfor

%Labor supply in W/T/NT, SW/ST/SNT, h
@#for n in 1:SN
    @#for S in [ "W", "T", "NT", "SW", "ST", "SNT" ]
        %W@{S}@{n}_ = ( V@{n}l_DIVIDEDU@{n}l_ ) ^ sigma  * ( 1 - beta@{n}l_ ) * N@{n}l_ ^ ( xi - 1 + sigma ) * kappa@{S}_ * L@{S}@{n}l_ ^ nu@{S} * CBar@{n}l_ / N@{n}l_ ^ ( 1 + nu@{S} ) / ( gCBar_ / GN_ ) / lambda_B@{n}l_ / ( 1 - tauL@{S}@{n}_ );
        tauL@{S}@{n}_ = tauLa_ + tauLb_ * log( W@{S}@{n}_ );
    @#endfor
    
    @#for S in [ "W", "T", "NT" ]
        L@{S}@{n}b_ = ( ( V@{n}b_DIVIDEDU@{n}b_ ) ^ sigma  * ( 1 - beta@{n}b_ ) * N@{n}b_ ^ ( xi - 1 + sigma ) * kappa@{S}_ * CBar@{n}b_ / N@{n}b_ ^ ( 1 + nu@{S} ) / ( gCBar_ / GN_ ) / lambda_B@{n}b_ / ( 1 - tauL@{S}@{n}_ ) / W@{S}@{n}_ ) ^ ( -1 / nu@{S} );
    @#endfor
    
    @#for S in [ "W", "T", "NT" ]
        LS@{S}@{n}b_ = ( ( V@{n}b_DIVIDEDU@{n}b_ ) ^ sigma  * ( 1 - beta@{n}b_ ) * N@{n}b_ ^ ( xi - 1 + sigma ) * kappaS@{S}_ * CBar@{n}b_ / N@{n}b_ ^ ( 1 + nuS@{S} ) / ( gCBar_ / GN_ ) / lambda_B@{n}b_ / ( 1 - tauL@{S}@{n}_ ) / W@{S}@{n}_ ) ^ ( -1 / nuS@{S} );
    @#endfor

    @#for m in Members
        lambda_CD@{n}@{m}_ = - ( V@{n}@{m}_DIVIDEDU@{n}@{m}_ ) ^ sigma  * ( 1 - beta@{n}@{m}_ ) * N@{n}@{m}_ ^ ( xi - 1 + sigma ) * kappah_ * Lh@{n}@{m}_ ^ nuh * CBar@{n}@{m}_ / N@{n}@{m}_ ^ ( 1 + nuh ) / ( gCBar_ / GN_ ) * Lh@{n}@{m}_ / CD@{n}@{m}_ / ( 1 - alphah );
    @#endfor
    
    LW@{n}_ = LW@{n}l_ + LW@{n}b_ + LSW@{n}b_;
    LT@{n}_ = LT@{n}l_ + LT@{n}b_ + LST@{n}b_;
    LNT@{n}_ = LNT@{n}l_ + LNT@{n}b_ + LSNT@{n}b_;
    LSW@{n}_ = LSW@{n}l_;
    LST@{n}_ = LST@{n}l_;
    LSNT@{n}_ = LSNT@{n}l_;
@#endfor

%Utility related
@#for n in 1:SN
    @#for m in Members
        kappaTemp@{n}@{m}_ = kappa0_ + kappaW_ / ( 1 + nuW ) * ( LW@{n}@{m}_ / N@{n}@{m}_ ) ^ ( 1 + nuW ) + kappaT_ / ( 1 + nuT ) * ( LT@{n}@{m}_ / N@{n}@{m}_ ) ^ ( 1 + nuT ) + kappaNT_ / ( 1 + nuNT ) * ( LNT@{n}@{m}_ / N@{n}@{m}_ ) ^ ( 1 + nuNT )
            + kappaSW_ / ( 1 + nuSW ) * ( LSW@{n}@{m}_ / N@{n}@{m}_ ) ^ ( 1 + nuSW ) + kappaST_ / ( 1 + nuST ) * ( LST@{n}@{m}_ / N@{n}@{m}_ ) ^ ( 1 + nuST ) + kappaSNT_ / ( 1 + nuSNT ) * ( LSNT@{n}@{m}_ / N@{n}@{m}_ ) ^ ( 1 + nuSNT )
            + kappaD_ / ( 1 + nuD ) * ( LD@{n}@{m}_ / N@{n}@{m}_ ) ^ ( 1 + nuD )    + kappaNDCG_ / ( 1 + nuNDCG ) * ( LNDCG@{n}@{m}_ / N@{n}@{m}_ ) ^ ( 1 + nuNDCG ) + kappaK_ / ( 1 + nuK ) * ( LK@{n}@{m}_ / N@{n}@{m}_ ) ^ ( 1 + nuK ) + kappaH_ / ( 1 + nuH ) * ( LH@{n}@{m}_ / N@{n}@{m}_ ) ^ ( 1 + nuH )
            + kappah_ / ( 1 + nuh ) * ( Lh@{n}@{m}_ / N@{n}@{m}_ ) ^ ( 1 + nuh );

        U@{n}@{m}_ = C@{n}@{m}_ - h * C@{n}@{m}_ / ( gCBar_ / GN_ ) - CBar@{n}@{m}_ / ( gCBar_ / GN_ )* kappaTemp@{n}@{m}_;

        V@{n}@{m}_ = U@{n}@{m}_ * ( ( 1 - beta@{n}@{m}_ ) * N@{n}@{m}_ ^ ( xi - 1 + sigma ) / ( 1 - beta@{n}@{m}_ * gV_ ^ ( 1 - sigma ) ) ) ^ ( 1 / ( 1 - sigma ) );

        EV@{n}@{m}_ = V@{n}@{m}_ * gV_;
    @#endfor
@#endfor

%Solve other multipliers
@#for n in 1:SN
    @#for m in Members
        %FOC of Cbar
        lambda_CBar@{n}@{m}_ = VV@{n}@{m}_ * ( V@{n}@{m}_DIVIDEDU@{n}@{m}_ * gV_ / gC_ ) ^ sigma  * ( 1 - beta@{n}@{m}_ ) * ( N@{n}@{m}_ * GN_ ) ^ ( xi - 1 + sigma ) * GN_ * kappaTemp@{n}@{m}_ / ( VV@{n}@{m}_ * glambda_C_ * ( C@{n}@{m}_ * gCBar_ / GN_ / N@{n}@{m}_ )^ ( 1 - varrhoC) * GN_ * varrhoC * ( CBar@{n}@{m}_ / N@{n}@{m}_ ) ^ ( varrhoC -1 ) - 1 );
        %FOC of C
        lambda_C@{n}@{m}_ = - ( V@{n}@{m}_DIVIDEDU@{n}@{m}_ ) ^ sigma  * ( 1 - beta@{n}@{m}_ ) * ( N@{n}@{m}_ ^ ( xi - 1 + sigma ) - VV@{n}@{m}_ * ( gV_ / gC_ ) ^ sigma * ( N@{n}@{m}_ * GN_ ) ^ ( xi - 1 + sigma ) * GN_ * h ) - lambda_CBar@{n}@{m}_ * ( 1 - varrhoC ) * ( C@{n}@{m}_ / N@{n}@{m}_ ) ^ ( -varrhoC ) * ( CBar@{n}@{m}_ / N@{n}@{m}_ / ( gCBar_ / GN_ ) ) ^ varrhoC;
        %FOC of CPBar
        lambda_CPBar@{n}@{m}_ = VV@{n}@{m}_ * lambda_C@{n}@{m}_ * glambda_C_ * ( alphaCP * C@{n}@{m}_ * gC_ / CPBar@{n}@{m}_ - OmegaC_ * CPBar@{n}@{m}_ ^ ( ( alphaCP - 1 ) * ( 1 - 1 / eC ) - 1 ) * ( C@{n}@{m}_ * gC_ / OmegaC_ ) ^ ( 1 / eC ) * alphaCP * ( CP@{n}@{m}_ * gCP_ ) ^ ( 1 - 1 / eC ) )
            / ( 1 - VV@{n}@{m}_ * glambda_CPBar_ * ( CP@{n}@{m}_ * gCP_ / CG@{n}_ / gCG_ * ( N@{n}b_ + N@{n}l_ ) / N@{n}@{m}_ ) ^ ( 1 - varrhoCP ) * varrhoCP * CPBar@{n}@{m}_ ^ ( varrhoCP - 1 ) );
        %FOC of CP
        lambda_CP@{n}@{m}_ = lambda_C@{n}@{m}_ * OmegaC_ * ( CPBar@{n}@{m}_ / gCPBar_ ) ^ ( ( alphaCP - 1 ) * ( eC - 1 ) / eC ) * alphaCP * ( C@{n}@{m}_ / CP@{n}@{m}_ / OmegaC_ ) ^ ( 1 / eC ) + lambda_CPBar@{n}@{m}_ * ( ( N@{n}b_ + N@{n}l_ ) / N@{n}@{m}_ / CG@{n}_ ) ^ ( 1 - varrhoCP ) * ( CPBar@{n}@{m}_ / gCPBar_ ) ^ varrhoCP * ( 1 - varrhoCP ) * CP@{n}@{m}_ ^ ( -varrhoCP );
        %FOC of CDBar
        lambda_CDBar@{n}@{m}_ = VV@{n}@{m}_ * lambda_CP@{n}@{m}_ * glambda_CP_ * ( alphaCD * CP@{n}@{m}_ * gCP_ / CDBar@{n}@{m}_ - OmegaCP_ * CDBar@{n}@{m}_ ^ ( ( alphaCD - 1 ) * ( 1 - 1 / eCP ) - 1 ) * ( CP@{n}@{m}_ * gCP_ / OmegaCP_ ) ^ ( 1 / eCP ) * alphaCD * ( CD@{n}@{m}_ * gCD_ ) ^ ( 1 - 1 / eCP ) )
            / ( 1 - VV@{n}@{m}_ * glambda_CDBar_ * ( CD@{n}@{m}_ * gCD_ / CND@{n}@{m}_ / gCND_ ) ^ ( 1 - varrhoCD ) * varrhoCD * CDBar@{n}@{m}_ ^ ( varrhoCD - 1 ) );
    @#endfor
@#endfor

%%
%production sectors
%first, built prices from down to up

@#for n in 1:SN
    lambda_F@{n}_ = lambda_F@{n}_DIVIDEDlambda_B@{n}b_ * lambda_B@{n}b_;
    @#for S in Sectors0
        RKP@{S}@{n}_ = RKP@{S}@{n}_DIVIDEDPKP@{n}_ * PKP@{n}_;
        RHP@{S}@{n}_ = RHP@{S}@{n}_DIVIDEDPHP@{n}_ * PHP@{n}_;
    @#endfor
    
    %scriptX
    YX@{n}_ = YWC@{n}_;
    scriptX@{n}_ = X@{n}_ * exp( -o * ( log( X@{n}_ / X_ ) - log( YX@{n}_ / YWC_ ) ) ^ 2 );
    PscriptX@{n}_ = 1 / ( exp( -o * ( log( X@{n}_ / X_ ) - log( YX@{n}_ / YWC_ ) ) ^ 2 ) - scriptX@{n}_ * 2 * o * ( log( X@{n}_ / X_ ) - log( YX@{n}_ / YWC_ ) ) * (X_ - X@{n}_) / X@{n}_ / X_ );
    PX@{n}_ = PscriptX@{n}_ * scriptX@{n}_ * 2 * o * ( log( X@{n}_ / X_ ) - log( YX@{n}_ / YWC_ ) ) * ( YWC_ - YX@{n}_ ) / YX@{n}_ / YWC_;
    
    @#for S in Sectors0
        %HL in @{S}@{n}
        PHL@{S}@{n}_ = 1 / ( ( alphaHL / RHP@{S}@{n}_ ) ^ alphaHL * ( ( 1 - alphaHL ) / WS@{S}@{n}_ ) ^ ( 1 - alphaHL ) * OmegaHL@{S}_ );
        
        %KGKP
        %I can't form the price easily because decreasing return to scale for firms. So I have to guess KP@{S}@{n}_
        %Can I decompose total spendings on factors untill I got RK@{S}@{n}_TIMESK@{S}@{n}_ in each S0? Yes for nontradable but No for widget and tradable due to CES
        FK@{S}@{n}_ = OmegaKW_ * ( KG@{n}_  / gKG_ ) ^ alphaK * ( KUW@{n}_ * KPW@{n}_ ) ^ ( 1 - alphaK ) * FKtilde / ( 1 + FKtilde );
        K@{S}@{n}_ = OmegaK@{S}_ * ( KG@{n}_ / gKG_ ) ^ alphaK * ( KU@{S}@{n}_ * KP@{S}@{n}_ ) ^ ( 1 - alphaK ) - FK@{S}@{n}_;
        RK@{S}@{n}_ = RKP@{S}@{n}_ * KU@{S}@{n}_ * KP@{S}@{n}_ / ( 1 - alphaK ) / ( K@{S}@{n}_ + FK@{S}@{n}_ );
        
        %KL in @{S}@{n}
        %auxilary, gether growth terms in production of capital engineering composite
        YKLTemp@{S}@{n}_ = OmegaKL@{S}_ * gKBar_ ^ ( -alphaKL / ( 1 - varrhoKL ) ) * ( alphaKL * gKBar_ ^ ( 1 / ( 1 - varrhoKL ) * ( eKL@{S} - 1 ) / eKL@{S} ) + 1 - alphaKL ) ^ ( eKL@{S} / ( eKL@{S} - 1 ) );
        %auxilary, gether growth terms in FOC of capital and engineering
        PKLTemp@{S}@{n}_ = OmegaKL@{S}_ ^ ( 1 - 1 / eKL@{S} ) * gKBar_ ^ ( -1 / ( 1 - varrhoKL ) * ( alphaKL - 1 ) * ( eKL@{S} - 1 ) / eKL@{S} ) * YKLTemp@{S}@{n}_ ^ ( 1/ eKL@{S} - 1 )
            - Xi@{n}_ * OmegaKL@{S}_ ^ ( 1 - 1 / eKL@{S} ) * gK_ * gPKL_ * gKBar_ ^ ( -varrhoKL / ( 1 - varrhoKL ) * ( alphaKL - 1 ) * ( eKL@{S} - 1 ) / eKL@{S} ) * ( gYKL_ / gK_ ) ^ ( 1 / eKL@{S} ) * YKLTemp@{S}@{n}_ ^ ( 1/ eKL@{S} - 1 )
            + Xi@{n}_ * GN_ * GAs_ ^ a_ * ( 1 - varrhoKL );
        
        PKL@{S}@{n}_ = 1 / ( ( PKLTemp@{S}@{n}_ * alphaKL / ( 1 - varrhoKL * Xi@{n}_ * GN_ * GAs_ ^ a_ ) / RK@{S}@{n}_ ) ^ alphaKL * ( 1 / W@{S}@{n}_ - PKLTemp@{S}@{n}_ * alphaKL / ( 1 - varrhoKL * Xi@{n}_ * GN_ * GAs_ ^ a_ ) / W@{S}@{n}_ ) ^ ( 1 - alphaKL ) * YKLTemp@{S}@{n}_ );

        %HLX in @{S}@{n}
        YHLXTemp@{S}@{n}_ = OmegaHLX@{S}_ * gYHLBar_ ^ ( -alphaHLX / ( 1 - varrhoHLX ) ) * ( alphaHLX * gYHLBar_ ^ ( 1 / ( 1 - varrhoHLX ) * ( eHLX@{S} - 1 ) / eHLX@{S} ) + 1 - alphaHLX ) ^ ( eHLX@{S} / ( eHLX@{S} - 1 ) );
        PHLXTemp@{S}@{n}_ = OmegaHLX@{S}_ ^ ( 1 - 1 / eHLX@{S} ) * gYHLBar_ ^ ( -1 / ( 1 - varrhoHLX ) * ( alphaHLX - 1 ) * ( eHLX@{S} - 1 ) / eHLX@{S} ) * YHLXTemp@{S}@{n}_ ^ ( 1/ eHLX@{S} - 1 )
            - Xi@{n}_ * OmegaHLX@{S}_ ^ ( 1 - 1 / eHLX@{S} ) * gYHL_ * gPHLX_ * gYHLBar_^ ( -varrhoHLX / ( 1 - varrhoHLX ) * ( alphaHLX - 1 ) * ( eHLX@{S} - 1 ) / eHLX@{S} ) *  ( gYHLX_ / gYHL_ ) ^ ( 1 / eHLX@{S}  ) * YHLXTemp@{S}@{n}_ ^ ( 1/ eHLX@{S} - 1 )
            + Xi@{n}_ * GN_ * GAs_ ^ a_ * ( 1 - varrhoHLX );
        
        PHLX@{S}@{n}_ = 1 / ( ( PHLXTemp@{S}@{n}_ * alphaHLX / ( 1 - varrhoHLX * Xi@{n}_ * GN_ * GAs_ ^ a_ ) / PHL@{S}@{n}_ ) ^ alphaHLX * ( 1 / ( 1 + tauscriptX@{S}_ ) / PscriptX@{n}_ - PHLXTemp@{S}@{n}_ * alphaHLX / ( 1 - varrhoHLX * Xi@{n}_ * GN_ * GAs_ ^ a_ ) / ( 1 + tauscriptX@{S}_ )  / PscriptX@{n}_ ) ^ ( 1 - alphaHLX ) * YHLXTemp@{S}@{n}_ );

        %Y in @{S}@{n}
        YTemp@{S}@{n}_ = Omega@{S}_ * gYHLXBar_ ^ ( -alphaY / ( 1 - varrhoY ) ) * ( alphaY * gYHLXBar_ ^ ( 1 / ( 1 - varrhoY ) * ( eY@{S} - 1 ) / eY@{S} ) + 1 - alphaY ) ^ ( eY@{S} / ( eY@{S} - 1 ) );
        PTemp@{S}@{n}_ = Omega@{S}_ ^ ( 1 - 1 / eY@{S} ) * gYHLXBar_ ^ ( -1 / ( 1 - varrhoY ) * ( alphaY - 1 ) * ( eY@{S} - 1 ) / eY@{S} ) * YTemp@{S}@{n}_ ^ ( 1/ eY@{S} - 1 )
            - Xi@{n}_ * Omega@{S}_ ^ ( 1 - 1 / eY@{S} ) * gYHLX_ * gPS_ * gYHLXBar_ ^ (  -varrhoY / ( 1 - varrhoY ) * ( alphaY - 1 ) * ( eY@{S} - 1 ) / eY@{S} ) *  ( gYS_ / gYHLX_ ) ^ ( 1 / eY@{S}  ) * YTemp@{S}@{n}_ ^ ( 1/ eY@{S} - 1 )
            + Xi@{n}_ * GN_ * GAs_ ^ a_ * ( 1 - varrhoY );
        
        P@{S}@{n}_ = 1 / ( ( PTemp@{S}@{n}_ * alphaY / ( 1 - varrhoY * Xi@{n}_ * GN_ * GAs_ ^ a_ ) / PHLX@{S}@{n}_ ) ^ alphaY * ( 1 / PKL@{S}@{n}_ - PTemp@{S}@{n}_ * alphaY / ( 1 - varrhoY * Xi@{n}_ * GN_ * GAs_ ^ a_ ) / PKL@{S}@{n}_ ) ^ ( 1 - alphaY ) * YTemp@{S}@{n}_ );
    @#endfor
@#endfor

%-----------------------------ROW-----------------------------
PT0_ = PT1_ * pT0;
iotaTM0_ = 0;
iotaTX0_ = 0;
%-----------------------------ROW-----------------------------


@#for n in 1:SN
    PTC@{n}_ = ( 
        @#for m in 0:SN
            + N@{m}_ * ( PT@{m}_ * ( 
            @#if n == m
                1 
            @#else
                1 + iotaTM_ + iotaTX_ 
            @#endif
            ) ) ^ ( 1 - eT ) 
        @#endfor
    ) ^ ( 1 / ( 1 - eT ) ) / OmegaTC_;
    
    PWP@{n}_ = ( 
        @#for m in 1:SN
            + N@{m}_ / NN_ * ( PW@{m}_ * ( 
            @#if n == m
                1 
            @#else
                1 + iotaWM_ + iotaWX_ 
            @#endif
            ) ) ^ ( 1 - eW ) 
        @#endfor
    ) ^ ( 1 / ( 1 - eW ) ) / OmegaWP_;
    
    %PWC_ is in residual, PX@{n}_ is above
    %I don't form P here because we already use the production function of Y (and effectively the market clearing condition of Y)
@#endfor

%%
%then, get quantity by demand from up to down
@#for n in 1:SN
    YNT@{n}_ = alphaNC * P@{n}_ * Y@{n}_ / PNT@{n}_ / ( 1 + tauNT_ );

    YTC@{n}_ = ( 1 - alphaNC ) * P@{n}_ * Y@{n}_ / PTC@{n}_ / ( 1 + tauTC_ );

    FWC@{n}_=FWCtilde * YWC@{n}_;
    %YWC@{n}_ is guessed, demand of YWP is in the residual
    YWP@{n}_ = ( ( YWC@{n}_ + FWC@{n}_ ) / OmegaWC_ / ( HG@{n}_ / gHG_ ) ^ alphaHW ) ^ ( 1 / ( 1 - alphaHW ) );
    
    @#for m in 0:SN
        YT@{n}@{m}_ = ( PTC@{n}_ * OmegaTC_ / ( PT@{m}_ * ( 
        @#if n == m
            1 
        @#else
            1 + iotaTM_ + iotaTX_ 
        @#endif
        ) ) ) ^ eT * YTC@{n}_ / OmegaTC_ * N@{m}_;
    @#endfor
    
    @#for m in 1:SN
        YW@{n}@{m}_ = ( PWP@{n}_ * OmegaWP_/ ( PW@{m}_ * ( 
        @#if n == m
            1 
        @#else
            1 + iotaWM_ + iotaWX_ 
        @#endif
        ) ) ) ^ eW * YWP@{n}_ / OmegaWP_ * N@{m}_ / NN_;
    @#endfor      
@#endfor

%-----------------------------ROW-----------------------------
YTC0_ = YTC1_ / N1_ * N0_ * yTC0;
@#for m in 1:SN
    YT0@{m}_ = ( PT0_ / ( PT@{m}_ * ( 1 + iotaTM_ + iotaTX_ ) ) ) ^ eT0_ * YTC0_ * N@{m}_;
@#endfor
%-----------------------------ROW-----------------------------                                                        

@#for n in 1:SN
    YT@{n}_ = YT0@{n}_ * ( 1 + ( 1 - phiiotaTX ) * iotaTX_ )
    @#for m in 1:SN
        + YT@{m}@{n}_ * 
        @#if n == m
            1 
        @#else
            ( 1 + ( 1 - phiiotaTX ) * iotaTX_ + ( 1 - phiiotaTM ) * iotaTM_ ) 
        @#endif
    @#endfor
    ;
    
    YW@{n}_ = 0 
    @#for m in 1:SN
        + YW@{m}@{n}_ * 
        @#if n == m
            1 
        @#else
            ( 1 + ( 1 - phiiotaWX ) * iotaWX_ + ( 1 - phiiotaWM ) * iotaWM_ ) 
        @#endif
    @#endfor
    ;
@#endfor

@#for n in 1:SN
    @#for S in Sectors0
%Demand of HLX in @{S}@{n}
    YHLX@{S}@{n}_ = P@{S}@{n}_ * Y@{S}@{n}_ * alphaY * PTemp@{S}@{n}_ / ( 1 - varrhoY * Xi@{n}_ * GN_ * GAs_ ^ a_ ) / PHLX@{S}@{n}_;

%demand of KL in @{S}@{n}
    YKL@{S}@{n}_ = P@{S}@{n}_ * Y@{S}@{n}_ * ( 1 - alphaY * PTemp@{S}@{n}_ / ( 1 - varrhoY * Xi@{n}_ * GN_ * GAs_ ^ a_ ) ) / PKL@{S}@{n}_;
    
%demand of HL in @{S}@{n}
    YHL@{S}@{n}_ = PHLX@{S}@{n}_ * YHLX@{S}@{n}_ * alphaHLX * PHLXTemp@{S}@{n}_ / ( 1 - varrhoHLX * Xi@{n}_ * GN_ * GAs_ ^ a_ ) / PHL@{S}@{n}_;

%demand of scriptX in @{S}@{n}
    scriptX@{S}@{n}_ = PHLX@{S}@{n}_ * YHLX@{S}@{n}_ * ( 1 - alphaHLX * PHLXTemp@{S}@{n}_ / ( 1 - varrhoHLX * Xi@{n}_ * GN_ * GAs_ ^ a_ ) ) / ( 1 + tauscriptX@{S}_ ) / PscriptX@{n}_;
    
%demand of K in @{S}@{n}
    %demand in residual
    KPP@{S}@{n}_ = KP@{S}@{n}_ * gKP_;
    IKP@{S}@{n}_ = ( 1 - ( 1 - deltaK_ - thetaKU0 / ( 1+thetaKU1 ) * KU@{S}@{n}_ ^ ( 1+thetaKU1 ) ) / gKP_ ) * KP@{S}@{n}_;

%demand of H in @{S}@{n}
    HP@{S}@{n}_ = PHL@{S}@{n}_ * YHL@{S}@{n}_ * alphaHL / RHP@{S}@{n}_;
    HPP@{S}@{n}_ = HP@{S}@{n}_ * gHP_;
    IHP@{S}@{n}_ = ( 1 - ( 1 - deltaH_ ) / gHP_ ) * HP@{S}@{n}_;

%define all production habit in @{S}@{n}
    YHLXBar@{S}@{n}_ = YHLX@{S}@{n}_ / YKL@{S}@{n}_ * gYHLXBar_ ^ ( -varrhoY / ( 1 - varrhoY ) );
    YHLBar@{S}@{n}_ = YHL@{S}@{n}_ / scriptX@{S}@{n}_ * gYHLBar_ ^ ( -varrhoHLX / ( 1 - varrhoHLX ) );
    KBar@{S}@{n}_ = K@{S}@{n}_ / L@{S}@{n}_ * gKBar_ ^ ( -varrhoKL / ( 1 - varrhoKL ) );
    @#endfor
@#endfor

%Impatient's collateral constraint
@#for n in 1:SN
    B@{n}_ = ( 1 - rhoQB ) * m_ * D@{n}b_ * PD@{n}_ / ( 1 - rhoQB / ( GN_ * GAs_ ^ ( 1 + b_ ) ) );
@#endfor

%variables in measurement equations
@#for n in 1:SN
    GDP@{n}_ = 
    PKP@{n}_ * IKP@{n}_ + PHP@{n}_ * IHP@{n}_ + PD@{n}_ * ID@{n}_ + PND@{n}_ * CND@{n}_ + PKG@{n}_ * IKG@{n}_ + PHG@{n}_ * IHG@{n}_ + PCG@{n}_ * CG@{n}_ 
            + ( 1 + ( 1 - phiiotaTX ) * iotaTX_ ) * YT0@{n}_ * PT@{n}_
            - ( 1 + ( 1 - phiiotaTM ) * iotaTM_ ) * YT@{n}0_ * PT0_
    @#for m in 1:SN
        @#if n == m
            + 0 
        @#else
            + ( 1 + ( 1 - phiiotaTX ) * iotaTX_ + ( 1 - phiiotaTM ) * iotaTM_ ) * YT@{m}@{n}_ * PT@{n}_ + ( 1 + ( 1 - phiiotaWX ) * iotaWX_ + ( 1 - phiiotaWM ) * iotaWM_ ) * YW@{m}@{n}_ * PW@{n}_ 
            - ( 1 + ( 1 - phiiotaTX ) * iotaTX_ + ( 1 - phiiotaTM ) * iotaTM_ ) * YT@{n}@{m}_ * PT@{m}_ - ( 1 + ( 1 - phiiotaWX ) * iotaWX_ + ( 1 - phiiotaWM ) * iotaWM_ ) * YW@{n}@{m}_ * PW@{m}_ 
        @#endif
    @#endfor
    + YWC@{n}_ * PWC_ * ( scriptFI_ * II_ * ( scripts_ - ( 1 - scriptq ) * ( 1 - deltaItilde_ ) * scripts_ / GII_ ) + II_ * scripts_ * ScriptFRP_ * JP_ ) / YWC_;
    GDPplagqlag@{n}_ = GDP@{n}_ / gB_;
    GDPplag@{n}_ = 
    PKP@{n}_ / gPKP_ * IKP@{n}_ + PHP@{n}_ / gPHP_ * IHP@{n}_ + PD@{n}_ / gPD_ * ID@{n}_ + PND@{n}_ / gPND_ * CND@{n}_ + PKG@{n}_ / (gB_ / gKG_) * IKG@{n}_ + PHG@{n}_ / (gB_ / gHG_) * IHG@{n}_ + PCG@{n}_ / (gB_ / gCG_) * CG@{n}_ 
            + ( 1 + ( 1 - phiiotaTX ) * iotaTX_ ) * YT0@{n}_ * PT@{n}_ / gPS_
            - ( 1 + ( 1 - phiiotaTM ) * iotaTM_ ) * YT@{n}0_ * PT0_ / gPS_
    @#for m in 1:SN
        @#if n == m
            + 0 
        @#else
            + ( 1 + ( 1 - phiiotaTX ) * iotaTX_ + ( 1 - phiiotaTM ) * iotaTM_ ) * YT@{m}@{n}_ * PT@{n}_ / gPS_ + ( 1 + ( 1 - phiiotaWX ) * iotaWX_ + ( 1 - phiiotaWM ) * iotaWM_ ) * YW@{m}@{n}_ * PW@{n}_ / gPS_ 
            - ( 1 + ( 1 - phiiotaTX ) * iotaTX_ + ( 1 - phiiotaTM ) * iotaTM_ ) * YT@{n}@{m}_ * PT@{m}_ / gPS_ - ( 1 + ( 1 - phiiotaWX ) * iotaWX_ + ( 1 - phiiotaWM ) * iotaWM_ ) * YW@{n}@{m}_ * PW@{m}_ / gPS_ 
        @#endif
    @#endfor
    + YWC@{n}_ * PWC_ / GAs_ * ( scriptFI_ * II_ * ( scripts_ - ( 1 - scriptq ) * ( 1 - deltaItilde_ ) * scripts_ / GII_ ) + II_ * scripts_ * ScriptFRP_ * JP_ ) / YWC_;
    GDPqlag@{n}_ = 
    PKP@{n}_ * IKP@{n}_ / gKP_ + PHP@{n}_ * IHP@{n}_ / gHP_ + PD@{n}_ * ID@{n}_ / gD_ + PND@{n}_ * CND@{n}_ / gCND_ + PKG@{n}_ * IKG@{n}_ / gKG_ + PHG@{n}_ * IHG@{n}_ / gHG_ + PCG@{n}_ * CG@{n}_ / gCG_ 
            + ( 1 + ( 1 - phiiotaTX ) * iotaTX_ ) * YT0@{n}_ * PT@{n}_ / gYS_
            - ( 1 + ( 1 - phiiotaTM ) * iotaTM_ ) * YT@{n}0_ * PT0_ / gYS_
    @#for m in 1:SN
        @#if n == m
            + 0 
        @#else
            + ( 1 + ( 1 - phiiotaTX ) * iotaTX_ + ( 1 - phiiotaTM ) * iotaTM_ ) * YT@{m}@{n}_ / gYS_ * PT@{n}_ + ( 1 + ( 1 - phiiotaWX ) * iotaWX_ + ( 1 - phiiotaWM ) * iotaWM_ ) * YW@{m}@{n}_ / gYS_ * PW@{n}_ 
            - ( 1 + ( 1 - phiiotaTX ) * iotaTX_ + ( 1 - phiiotaTM ) * iotaTM_ ) * YT@{n}@{m}_ / gYS_ * PT@{m}_ - ( 1 + ( 1 - phiiotaWX ) * iotaWX_ + ( 1 - phiiotaWM ) * iotaWM_ ) * YW@{n}@{m}_ / gYS_ * PW@{m}_ 
        @#endif
    @#endfor
    + YWC@{n}_ / gYWC_ * PWC_ * ( scriptFI_ * II_ / gII_ * ( scripts_ - ( 1 - scriptq ) * ( 1 - deltaItilde_ ) * scripts_ / GII_ ) + II_ / gII_ * scripts_ * ScriptFRP_ * JP_ ) / YWC_ * gYWC_;
    GDPInflation@{n}_ = log( ( GDP@{n}_ / GDPplag@{n}_ * GDPqlag@{n}_ / GDPplagqlag@{n}_ ) ^ ( 1 / 2 ) );

    @#for m in Members
        Dtilde@{n}@{m}_ = ID@{n}@{m}_ / ( 1 - ( 1 - deltaD_ ) / gD_ );
        deltaDtildeAUXD@{n}@{m}_ = Dtilde@{n}@{m}_;
        deltaDtildeAUXN@{n}@{m}_ = Dtilde@{n}@{m}_ * deltaD_;
    @#endfor
    @#for S in Sectors0
        KPtilde@{S}@{n}_ = IKP@{S}@{n}_ / ( 1 - ( 1 - deltaK_ ) / gKP_ );
        deltaKPtildeAUXD@{S}@{n}_ = KPtilde@{S}@{n}_;
        deltaKPtildeAUXN@{S}@{n}_ = KPtilde@{S}@{n}_ * deltaK_;
    @#endfor

    deltaKGtildeAUXD@{n}_ = IKG@{n}_ / ( 1- ( 1 - deltaK_ ) / gKG_ );
    deltaKGtildeAUXN@{n}_ = deltaKGtildeAUXD@{n}_ * deltaK_;

    deltaHGtildeAUXD@{n}_ = IHG@{n}_ / ( 1 - ( 1 - deltaH_ ) / gHG_ );
    deltaHGtildeAUXN@{n}_ = deltaHGtildeAUXD@{n}_ * deltaH_;
@#endfor

GDPW_ = 0 
    @#for n in 1:SN
        + GDP@{n}_ 
    @#endfor
    ;
GDPWplagqlag_ = 0 
    @#for n in 1:SN
        + GDPplagqlag@{n}_ 
    @#endfor
    ;
GDPWplag_ = 0 
    @#for n in 1:SN
        + GDPplag@{n}_ 
    @#endfor
    ;
GDPWqlag_ = 0 
    @#for n in 1:SN
        + GDPqlag@{n}_ 
    @#endfor
    ;
GRGDPW_ = log( ( GDPW_ / GDPWqlag_ * GDPWplag_ / GDPWplagqlag_ ) ^ ( 1 / 2 ) );

@#for n in 1:SN
%PCE (personal consumption expenditure + government expenditure on education) and deflator
    PCE@{n}_ = PHP@{n}_ * IHP@{n}_ + PD@{n}_ * ID@{n}_ * ( 1 - alpha_resid_ ) + PND@{n}_ * CND@{n}_;
    PCEplagqlag@{n}_ = PCE@{n}_ / gB_;
    PCEplag@{n}_ = PHP@{n}_ / gPHP_ * IHP@{n}_ + PD@{n}_ / gPD_ * ID@{n}_ * ( 1 - alpha_resid_ ) + PND@{n}_ / gPND_ * CND@{n}_;
    PCEqlag@{n}_ = PHP@{n}_ * IHP@{n}_ / gHP_ + PD@{n}_ * ID@{n}_ / gD_ * ( 1 - alpha_resid_ ) + PND@{n}_ * CND@{n}_ / gCND_;
    PCEInflation@{n}_ = log( ( PCE@{n}_ / PCEplag@{n}_ * PCEqlag@{n}_ / PCEplagqlag@{n}_ ) ^ ( 1 / 2 ) ) ;

%DND (personal consumption expenditure except education) and deflator
    DND@{n}_ = PD@{n}_ * ID@{n}_ * ( 1 - alpha_resid_ ) + PND@{n}_ * CND@{n}_;
    DNDplagqlag@{n}_ = DND@{n}_ / gB_;
    DNDplag@{n}_ = PD@{n}_ / gPD_ * ID@{n}_ * ( 1 - alpha_resid_ ) + PND@{n}_ / gPND_ * CND@{n}_;
    DNDqlag@{n}_ = PD@{n}_ * ID@{n}_ / gD_ * ( 1 - alpha_resid_ ) + PND@{n}_ * CND@{n}_ / gCND_;
    DNDInflation@{n}_ = log( ( DND@{n}_ / DNDplag@{n}_ * DNDqlag@{n}_ / DNDplagqlag@{n}_ ) ^ ( 1 / 2 ) ) ;

%PDI (private domestic investment) and deflator
    PDI@{n}_ = 
    PKP@{n}_ * IKP@{n}_ + PD@{n}_ * ID@{n}_ * alpha_resid_ 
    + YWC@{n}_ * PWC_ * ( scriptFI_ * II_ * ( scripts_ - ( 1 - scriptq ) * ( 1 - deltaItilde_ ) * scripts_ / GII_ ) + II_ * scripts_ * ScriptFRP_ * JP_ ) / YWC_;
    PDIplagqlag@{n}_ = PDI@{n}_ / gB_;
    PDIplag@{n}_ = 
    PKP@{n}_ / gPKP_ * IKP@{n}_ + PD@{n}_ / gPD_ * ID@{n}_ * alpha_resid_ 
    + YWC@{n}_ * PWC_ / GAs_ * ( scriptFI_ * II_ * ( scripts_ - ( 1 - scriptq ) * ( 1 - deltaItilde_ ) * scripts_ / GII_ ) + II_ * scripts_ * ScriptFRP_ * JP_ ) / YWC_;
    PDIqlag@{n}_ = 
    PKP@{n}_ * IKP@{n}_ / gKP_ + PD@{n}_ * ID@{n}_ / gD_ * alpha_resid_ 
    + YWC@{n}_ / gYWC_ * PWC_ * ( scriptFI_ * II_ / gII_ * ( scripts_ - ( 1 - scriptq ) * ( 1 - deltaItilde_ ) * scripts_ / GII_ ) + II_ / gII_ * scripts_ * ScriptFRP_ * JP_ ) / YWC_ *  gYWC_;
    PDIInflation@{n}_ = log( ( PDI@{n}_ / PDIplag@{n}_ * PDIqlag@{n}_ / PDIplagqlag@{n}_ ) ^ ( 1 / 2 ) );

%GCE (government consumption expenditures) and deflator
    GCE@{n}_ = PCG@{n}_ * CG@{n}_;
    GCEplagqlag@{n}_ = GCE@{n}_ / gB_;
    GCEplag@{n}_ = PCG@{n}_ / (gB_ / gCG_) * CG@{n}_;
    GCEqlag@{n}_ = PCG@{n}_ * CG@{n}_ / gCG_;
    GCEInflation@{n}_ = log( ( GCE@{n}_ / GCEplag@{n}_ * GCEqlag@{n}_ / GCEplagqlag@{n}_ ) ^ ( 1 / 2 ) );

%GGI (government gross investment) and deflator
    GGI@{n}_ = PKG@{n}_ * IKG@{n}_ + PHG@{n}_ * IHG@{n}_;
    GGIplagqlag@{n}_ = GGI@{n}_ / gB_;
    GGIplag@{n}_ = PKG@{n}_ / (gB_ / gKG_) * IKG@{n}_ + PHG@{n}_ / (gB_ / gHG_) * IHG@{n}_;
    GGIqlag@{n}_ = PKG@{n}_ * IKG@{n}_ / gKG_ + PHG@{n}_ * IHG@{n}_ / gHG_;
    GGIInflation@{n}_ = log( ( GGI@{n}_ / GGIplag@{n}_ * GGIqlag@{n}_ / GGIplagqlag@{n}_ ) ^ ( 1 / 2 ) );

%GDI (gross domestic investment) and deflator
    GDI@{n}_ = GGI@{n}_ + PDI@{n}_;
    GDIplagqlag@{n}_ = GGIplagqlag@{n}_ + PDIplagqlag@{n}_;
    GDIplag@{n}_ = GGIplag@{n}_ + PDIplag@{n}_;
    GDIqlag@{n}_ = GGIqlag@{n}_ + PDIqlag@{n}_;
    GDIInflation@{n}_ = log( ( GDI@{n}_ / GDIplag@{n}_ * GDIqlag@{n}_ / GDIplagqlag@{n}_ ) ^ ( 1 / 2 ) );

%GERD (Gross domestic expenditure on R&D, or R&D intensity)
    GERD@{n}_ = ( PHG@{n}_ * IHG@{n}_ + YWC@{n}_ * PWC_ * ( scriptFI_ * II_ * ( scripts_ - ( 1 - scriptq ) * ( 1 - deltaItilde_ ) * scripts_ / GII_ ) + II_ * scripts_ * ScriptFRP_ * JP_ ) / YWC_ ) / GDP@{n}_;
        
%Export and deflator
    Export@{n}_ = ( 1 + ( 1 - phiiotaTX ) * iotaTX_ ) * YT0@{n}_ * PT@{n}_
    @#for m in 1:SN
        @#if n == m
            + 0 
        @#else
            + ( 1 + ( 1 - phiiotaTX ) * iotaTX_ + ( 1 - phiiotaTM ) * iotaTM_ ) * YT@{m}@{n}_ * PT@{n}_ + ( 1 + ( 1 - phiiotaWX ) * iotaWX_ + ( 1 - phiiotaWM ) * iotaWM_ ) * YW@{m}@{n}_ * PW@{n}_ 
        @#endif
    @#endfor
    ;
    Exportplagqlag@{n}_ = Export@{n}_ / gB_;
    Exportplag@{n}_ = ( 1 + ( 1 - phiiotaTX ) * iotaTX_ ) * YT0@{n}_ * PT@{n}_ / gPS_
    @#for m in 1:SN
        @#if n == m
            + 0 
        @#else
            + ( 1 + ( 1 - phiiotaTX ) * iotaTX_ + ( 1 - phiiotaTM ) * iotaTM_ ) * YT@{m}@{n}_ * PT@{n}_ / gPS_ + ( 1 + ( 1 - phiiotaWX ) * iotaWX_ + ( 1 - phiiotaWM ) * iotaWM_ ) * YW@{m}@{n}_ * PW@{n}_ / gPS_ 
        @#endif
    @#endfor
    ;
    Exportqlag@{n}_ = ( 1 + ( 1 - phiiotaTX ) * iotaTX_ ) * YT0@{n}_ * PT@{n}_ / gYS_
    @#for m in 1:SN
        @#if n == m
            + 0 
        @#else
            + ( 1 + ( 1 - phiiotaTX ) * iotaTX_ + ( 1 - phiiotaTM ) * iotaTM_ ) * YT@{m}@{n}_ / gYS_ * PT@{n}_ + ( 1 + ( 1 - phiiotaWX ) * iotaWX_ + ( 1 - phiiotaWM ) * iotaWM_ ) * YW@{m}@{n}_ / gYS_ * PW@{n}_ 
        @#endif
    @#endfor
    ;
    ExportInflation@{n}_ = log( ( Export@{n}_ / Exportplag@{n}_ * Exportqlag@{n}_ / Exportplagqlag@{n}_ ) ^ ( 1 / 2 ) );

%Import and deflator
    Import@{n}_ = ( 1 + ( 1 - phiiotaTM ) * iotaTM_ ) * YT@{n}0_ * PT0_
    @#for m in 1:SN
        @#if n == m
            + 0 
        @#else
            + ( 1 + ( 1 - phiiotaTX ) * iotaTX_ + ( 1 - phiiotaTM ) * iotaTM_ ) * YT@{n}@{m}_ * PT@{m}_ + ( 1 + ( 1 - phiiotaWX ) * iotaWX_ + ( 1 - phiiotaWM ) * iotaWM_ ) * YW@{n}@{m}_ * PW@{m}_ 
        @#endif
    @#endfor
    ;
    Importplagqlag@{n}_ = Import@{n}_ / gB_;
    Importplag@{n}_ = ( 1 + ( 1 - phiiotaTM ) * iotaTM_ ) * YT@{n}0_ * PT0_ / gPS_
    @#for m in 1:SN
        @#if n == m
            + 0 
        @#else
            + ( 1 + ( 1 - phiiotaTX ) * iotaTX_ + ( 1 - phiiotaTM ) * iotaTM_ ) * YT@{n}@{m}_ * PT@{m}_ / gPS_ + ( 1 + ( 1 - phiiotaWX ) * iotaWX_ + ( 1 - phiiotaWM ) * iotaWM_ ) * YW@{n}@{m}_ * PW@{m}_ / gPS_ 
        @#endif
    @#endfor
    ;
    Importqlag@{n}_ = ( 1 + ( 1 - phiiotaTM ) * iotaTM_ ) * YT@{n}0_ * PT0_ / gYS_
    @#for m in 1:SN
        @#if n == m
            + 0 
        @#else
            + ( 1 + ( 1 - phiiotaTX ) * iotaTX_ + ( 1 - phiiotaTM ) * iotaTM_ ) * YT@{n}@{m}_ / gYS_ * PT@{m}_ + ( 1 + ( 1 - phiiotaWX ) * iotaWX_ + ( 1 - phiiotaWM ) * iotaWM_ ) * YW@{n}@{m}_ / gYS_ * PW@{m}_ 
        @#endif
    @#endfor
    ;
    ImportInflation@{n}_ = log( ( Import@{n}_ / Importplag@{n}_ * Importqlag@{n}_ / Importplagqlag@{n}_ ) ^ ( 1 / 2 ) );

%cfc of durable goods stock
    @#for m in Members
        deltaDtilde@{n}@{m}_ = deltaD_;
        Dcfc@{n}@{m}_ = deltaDtilde@{n}@{m}_ * Dtilde@{n}@{m}_ / gD_ * PD@{n}_;
    @#endfor
%cfc of private physical capital stock
    @#for S in Sectors0
        deltaKPtilde@{S}@{n}_ = deltaK_;
        KPcfc@{S}@{n}_ = deltaKPtilde@{S}@{n}_ * KPtilde@{S}@{n}_ / gKP_ * PKP@{n}_;
    @#endfor
%cfc of public physical capital stock
    deltaKGtilde@{n}_ = deltaK_;
    KGcfc@{n}_ = deltaKGtilde@{n}_ * KG@{n}_ / gKG_ * PKG@{n}_;
%cfc of public R&D capital stock
    deltaHGtilde@{n}_ = deltaH_;
    HGcfc@{n}_ = deltaHGtilde@{n}_ * HG@{n}_ / gHG_ * PHG@{n}_;
%cfc
    CFC@{n}_ = Dcfc@{n}l_ * alpha_resid_ + Dcfc@{n}b_ * alpha_resid_ + KPcfcT@{n}_ + KPcfcNT@{n}_ + KPcfcW@{n}_ + KGcfc@{n}_ + HGcfc@{n}_;
    deltaALL@{n}_ = CFC@{n}_ / ( Dtilde@{n}l_ / gD_ * PD@{n}_ * alpha_resid_ + Dtilde@{n}b_ / gD_ * PD@{n}_ * alpha_resid_ 
                              + KPtildeT@{n}_ / gKP_ * PKP@{n}_ + KPtildeNT@{n}_ / gKP_ * PKP@{n}_ + KPtildeW@{n}_ / gKP_ * PKP@{n}_ 
                              + KG@{n}_ / gKG_ * PKG@{n}_ + HG@{n}_ / gHG_ * PHG@{n}_ );

%Labour income
    LabourIncome@{n}_ = 0 
    @#for S in [ "W", "T", "NT", "D", "NDCG", "K", "H" ]
      + W@{S}@{n}_ * L@{S}@{n}b_ 
    @#endfor
    @#for S in [ "W", "T", "NT" ]
      + W@{S}@{n}_ * LS@{S}@{n}b_ 
    @#endfor
    @#for S in Sectors2
      + W@{S}@{n}_ * L@{S}@{n}l_ 
    @#endfor
    @#for S in Sectors0
      + RHP@{S}@{n}_ * HP@{S}@{n}_
    @#endfor
    ;

%HoursWorkedPerCapita
    Log_HoursWorkedPerCapita@{n}_ = log( ( 
    @#for S in Sectors2
      + L@{S}@{n}l_ + L@{S}@{n}b_ 
    @#endfor
    ) / ( N@{n}l_ + N@{n}b_ ) );

%ex post real exchange rate (t-1 to t)
    ExPostR@{n}_ = log( 1 / Q_ ) - GDPInflation@{n}_;

%Spread
    Spread@{n}_ = ( log( 1 / QB@{n}_ ) - log( 1 / Q_ ) );
    
%government revenue
    GovRev@{n}_ =
    ( 
    @#for m in 0:SN
        @#if n == m
            + 0 
        @#else
            + YT@{m}@{n}_ * PT@{n}_ 
        @#endif
    @#endfor
    ) * iotaTX_ * phiiotaTX 
    + ( 
    @#for m in 0:SN
        @#if n == m
            + 0 
        @#else
            + YT@{n}@{m}_ * PT@{m}_ 
        @#endif
    @#endfor
    ) * iotaTM_ * phiiotaTM 
    + ( 
    @#for m in 1:SN
        @#if n == m
            + 0 
        @#else
            + YW@{m}@{n}_ * PW@{n}_ 
        @#endif
    @#endfor
    ) * iotaWX_ * phiiotaWX 
    + ( 
    @#for m in 1:SN
        @#if n == m
            + 0 
        @#else
            + YW@{n}@{m}_ * PW@{m}_ 
        @#endif
    @#endfor
    ) * iotaWM_ * phiiotaWM 
    + YNT@{n}_ * PNT@{n}_ * tauNT_ * phitauNT + YTC@{n}_ * PTC@{n}_ * tauTC_ * phitauTC 
    + ID@{n}b_ * PD@{n}_ * tauD_ * phitauD + CND@{n}b_ * PND@{n}_ * tauND_ * phitauND + ID@{n}l_ * PD@{n}_ * tauD_ * phitauD + CND@{n}l_ * PND@{n}_ * tauND_ * phitauND 
    @#for S in [ "W", "T", "NT", "D", "NDCG", "K", "H" ]
      + W@{S}@{n}_ * tauL@{S}@{n}_ * L@{S}@{n}b_ * phitauL 
    @#endfor
    @#for S in [ "W", "T", "NT" ]
      + W@{S}@{n}_ * tauL@{S}@{n}_ * LS@{S}@{n}b_ * phitauL 
    @#endfor
    @#for S in Sectors2
      + W@{S}@{n}_ * tauL@{S}@{n}_ * L@{S}@{n}l_ * phitauL 
    @#endfor
    @#for S in Sectors0
      + RHP@{S}@{n}_ * HP@{S}@{n}_ * tauH@{S}_ * phitauH@{S} 
      + KU@{S}@{n}_ * RKP@{S}@{n}_ * KP@{S}@{n}_ * tauK@{S}_ * phitauK@{S} 
      + PscriptX@{n}_ * scriptX@{S}@{n}_ * tauscriptX@{S}_ * phitauscriptX@{S} 
    @#endfor
    + ( taub_ + taul_ ) * Y@{n}_ * P@{n}_;
@#endfor

%observable
%World
gryW = GRGDPW_;
gpopW = log( GN_ );
@#for n in 1:SN-1
    yshare@{n} = GDP@{n}_ / GDPW_;
@#endfor
@#for n in 1:SN
    popshare@{n} = Ntilde@{n}_;
@#endfor

@#if SN > 0
%US
ESrdy1 = exp(rdy_) * GERD1_;
BEAgiy1 = GGI1_ / GDP1_;
BEAgcy1 = ( GCE1_ + GGI1_ ) / GDP1_  / ( 1 - alpha_pubedu_ ) - BEAgiy1;
BEAcy1 = PCE1_ / GDP1_ - ( BEAgcy1 + BEAgiy1 ) * alpha_pubedu_;
OECDgihy1 = alpha_pubedu_ * (BEAgiy1 + BEAgcy1);
OECDpihy1 = PHP1_ * IHP1_ / GDP1_ - OECDgihy1;
JSTiy1 = GDI1_ / GDP1_;
JSTxy1 = Export1_ / GDP1_;
BEAgpcgpy1 = DNDInflation1_ - GDPInflation1_;
BEAgpigpy1 = PDIInflation1_ - GDPInflation1_;
BEAgpgcgpy1 = GCEInflation1_ - GDPInflation1_;
BEAgpgigpy1 = GGIInflation1_ - GDPInflation1_;
BEAgpxgpy1 = ExportInflation1_ - GDPInflation1_;
BEAgpmgpy1 = ImportInflation1_ - GDPInflation1_;
BEAhpop1 = hpop_;
BEAwhy1 = LabourIncome1_ / GDP1_;
BEAcfcy1 = CFC1_ / GDP1_;
JSTexpostr1 = ExPostR1_;
FREDlrni1 = Spread1_;
JSTtauy1 = GovRev1_ / GDP1_;
@#endif

@#if SN > 1
%Germany
ESrdy2 = exp(rdy_) * GERD2_;
JSTgy2 = ( GCE2_ + GGI2_ ) / GDP2_ / ( 1 - alpha_pubedu_ );
PWTcy2 = PCE2_ / GDP2_ - JSTgy2 * alpha_pubedu_;
OECDgihy2 = alpha_pubedu_ * JSTgy2;
OECDpihy2 = PHP2_ * IHP2_ / GDP2_ - OECDgihy2;
JSTiy2 = GDI2_ / GDP2_;
JSTxy2 = Export2_ / GDP2_;
PWTgpcgpy2 = DNDInflation2_ - GDPInflation2_;
PWTgpigpy2 = GDIInflation2_ - GDPInflation2_;
PWTgpgcgpy2 = GCEInflation2_ - GDPInflation2_;
PWTgpxgpy2 = ExportInflation2_ - GDPInflation2_;
PWTgpmgpy2 = ImportInflation2_ - GDPInflation2_;
PWThpop2 = hpop_;
PWTwhy2 = LabourIncome2_ / GDP2_;
PWTdelta2 = deltaALL2_;
JSTexpostr2 = ExPostR2_;
DBlrni2 = Spread2_;
JSTtauy2 = GovRev2_ / GDP2_;
@#endif

@#if SN > 2
%UK
ESrdy3 = exp(rdy_) * GERD3_;
MILLgiy3 = GGI3_ / GDP3_;
MILLgcy3 = ( GCE3_ + GGI3_ ) / GDP3_ / ( 1 - alpha_pubedu_ ) - MILLgiy3;
MILLcy3 = PCE3_ / GDP3_ - ( MILLgcy3 + MILLgiy3 ) * alpha_pubedu_;
OECDgihy3 = alpha_pubedu_ * (MILLgcy3 + MILLgiy3);
OECDpihy3 = PHP3_ * IHP3_ / GDP3_ - OECDgihy3;
MILLiy3 = GDI3_ / GDP3_;
MILLxy3 = Export3_ / GDP3_;
MILLgpcgpy3 = DNDInflation3_ - GDPInflation3_;
MILLgpigpy3 = GDIInflation3_ - GDPInflation3_;
MILLgpgcgpy3 = GCEInflation3_ - GDPInflation3_;
MILLgpxgpy3 = ExportInflation3_ - GDPInflation3_;
MILLgpmgpy3 = ImportInflation3_ - GDPInflation3_;
MILLhpop3 = hpop_;
MILLwhy3 = LabourIncome3_ / GDP3_;
MILLcfcy3 = CFC3_ / GDP3_;
MILLexpostr3 = ExPostR3_;
MILLlrni3 = Spread3_;
MILLtauy3 = GovRev3_ / GDP3_;
@#endif

@#if SN > 3
%France
ESrdy4 = exp(rdy_) * GERD4_;
JSTgy4 = ( GCE4_ + GGI4_ ) / GDP4_ / ( 1 - alpha_pubedu_ );
PWTcy4 = PCE4_ / GDP4_ - JSTgy4 * alpha_pubedu_;
OECDgihy4 = alpha_pubedu_ * JSTgy4;
OECDpihy4 = PHP4_ * IHP4_ / GDP4_ - OECDgihy4;
JSTiy4 = GDI4_ / GDP4_;
JSTxy4 = Export4_ / GDP4_;
PWTgpcgpy4 = DNDInflation4_ - GDPInflation4_;
PWTgpigpy4 = GDIInflation4_ - GDPInflation4_;
PWTgpgcgpy4 = GCEInflation4_ - GDPInflation4_;
PWTgpxgpy4 = ExportInflation4_ - GDPInflation4_;
PWTgpmgpy4 = ImportInflation4_ - GDPInflation4_;
PWThpop4 = hpop_;
PWTwhy4 = LabourIncome4_ / GDP4_;
PWTdelta4 = deltaALL4_;
JSTexpostr4 = ExPostR4_;
BDFlrni4 = Spread4_;
JSTtauy4 = GovRev4_ / GDP4_;
@#endif

@#if SN > 4
%EURO
ESrdy5 = exp(rdy_) * GERD5_;
JSTgy5 = ( GCE5_ + GGI5_ ) / GDP5_ / ( 1 - alpha_pubedu_ );
PWTcy5 = PCE5_ / GDP5_ - JSTgy5 * alpha_pubedu_;
OECDgihy5 = alpha_pubedu_ * JSTgy5;
OECDpihy5 = PHP5_ * IHP5_ / GDP5_ - OECDgihy5;
JSTiy5 = GDI5_ / GDP5_;
JSTxy5 = Export5_ / GDP5_;
PWTgpcgpy5 = DNDInflation5_ - GDPInflation5_;
PWTgpigpy5 = GDIInflation5_ - GDPInflation5_;
PWTgpgcgpy5 = GCEInflation5_ - GDPInflation5_;
PWTgpxgpy5 = ExportInflation5_ - GDPInflation5_;
PWTgpmgpy5 = ImportInflation5_ - GDPInflation5_;
PWThpop5 = hpop_;
PWTwhy5 = LabourIncome5_ / GDP5_;
PWTcfcy5 = CFC5_ / GDP5_;
JSTexpostr5 = ExPostR5_;
JSTtauy5 = GovRev5_ / GDP5_;
@#endif

@#if SN > 5
%ROW
ESrdy6 = exp(rdy_) * GERD6_;
JSTgy6 = ( GCE6_ + GGI6_ ) / GDP6_ / ( 1 - alpha_pubedu_ );
PWTcy6 = PCE6_ / GDP6_ - JSTgy6 * alpha_pubedu_;
OECDgihy6 = alpha_pubedu_ * JSTgy6;
OECDpihy6 = PHP6_ * IHP6_ / GDP6_ - OECDgihy6;
JSTiy6 = GDI6_ / GDP6_;
JSTxy6 = Export6_ / GDP6_;
PWTgpcgpy6 = DNDInflation6_ - GDPInflation6_;
PWTgpigpy6 = GDIInflation6_ - GDPInflation6_;
PWTgpgcgpy6 = GCEInflation6_ - GDPInflation6_;
PWTgpxgpy6 = ExportInflation6_ - GDPInflation6_;
PWTgpmgpy6 = ImportInflation6_ - GDPInflation6_;
PWThpop6 = hpop_;
PWTwhy6 = LabourIncome6_ / GDP6_;
PWTcfcy6 = CFC6_ / GDP6_;
JSTexpostr6 = ExPostR6_;
JSTtauy6 = GovRev6_ / GDP6_;
@#endif

log_gII=log(gII_);
log_gB=log(gB_);
log_gYS=log(gYS_);
log_gPS=log(gPS_);
log_gYWC=log(gYWC_);
log_gX=log(gX_);
log_gKP=log(gKP_);
log_gHP=log(gHP_);
log_gPKP=log(gPKP_);
log_gPHP=log(gPHP_);
log_gKG=log(gKG_);
log_gHG=log(gHG_);
log_gPHL=log(gPHL_);
log_gPKL=log(gPKL_);
log_gKBar=log(gKBar_);
log_gPHLX=log(gPHLX_);
log_gYHLBar=log(gYHLBar_);
log_gYHLXBar=log(gYHLXBar_);
log_gCND=log(gCND_);
log_gD=log(gD_);
log_gCDBar=log(gCDBar_);
log_gCPBar=log(gCPBar_);
log_gCBar=log(gCBar_);
log_gV=log(gV_);
log_glambda_C=log(glambda_C_);
log_glambda_B=log(glambda_B_);
log_glambda_CPBar=log(glambda_CPBar_);
log_glambda_CP=log(glambda_CP_);
log_glambda_CDBar=log(glambda_CDBar_);
log_glambda_CD=log(glambda_CD_);
log_glambda_GD=log(glambda_GD_);
log_glambda_GK=log(glambda_GK_);
log_glambda_GH=log(glambda_GH_);
log_gPD=log(gPD_);
log_gPND=log(gPND_);
log_gCG=log(gCG_);

@#include "InsertNewSteadyStateEquations.mod"

@#if ExtraVariable == 1
    @#include "ExtraVariable_part3.mod"
@#endif
