nuW    = nuPriorALL * nuPriorS0ALL  * nuPriorWALL   ;
nuT    = nuPriorALL * nuPriorS0ALL  * nuPriorTALL   ;
nuNT   = nuPriorALL * nuPriorS0ALL  * nuPriorNTALL  ;
nuSW   = nuPriorALL * nuPriorSS0ALL * nuPriorWALL   ;
nuST   = nuPriorALL * nuPriorSS0ALL * nuPriorTALL   ;
nuSNT  = nuPriorALL * nuPriorSS0ALL * nuPriorNTALL  ;
nuD    = nuPriorALL * nuPriorS1ALL  * nuPriorDi     ;
nuNDCG = nuPriorALL * nuPriorS1ALL  * nuPriorNDCGi  ;
nuK    = nuPriorALL * nuPriorS1ALL  * nuPriorKi     ;
nuH    = nuPriorALL * nuPriorS1ALL  * nuPriorHi     ;
nuh    = nuPriorALL                 * nuPriorhi     ;

eKLT      =      eKLPriorALL     *   eKLTPriori    ;
eHLXT     =      eHLXPriorALL    *   eHLXTPriori   ;
eYT       =      eYPriorALL      *   eYTPriori     ;
eKLNT     =      eKLPriorALL     *   eKLNTPriori   ;
eHLXNT    =      eHLXPriorALL    *   eHLXNTPriori  ;
eYNT      =      eYPriorALL      *   eYNTPriori    ;
eKLW      =      eKLPriorALL     *   eKLWPriori    ;
eHLXW     =      eHLXPriorALL    *   eHLXWPriori   ;
eYW       =      eYPriorALL      *   eYWPriori     ;

rhoOmegaALL      =1 / ( 1 + exp( - rhoOmegaPriorALL -                           rhoOmegaPriorALLi      ));     
rhoOmegaS0ALL    =1 / ( 1 + exp( - rhoOmegaPriorALL -                           rhoOmegaPriorS0ALLi    ));     
rhoOmegaTALL     =1 / ( 1 + exp( - rhoOmegaPriorALL - rhoOmegaPriorS0ALL     -  rhoOmegaPriorTALLi     ));     
rhoOmegaNTALL    =1 / ( 1 + exp( - rhoOmegaPriorALL - rhoOmegaPriorS0ALL     -  rhoOmegaPriorNTALLi    ));     
rhoOmegaWALL     =1 / ( 1 + exp( - rhoOmegaPriorALL - rhoOmegaPriorS0ALL     -  rhoOmegaPriorWALLi     ));     
rhoOmegaKKALL    =1 / ( 1 + exp( - rhoOmegaPriorALL - rhoOmegaPriorStepALL   -  rhoOmegaPriorKKALLi    ));     
rhoOmegaHLALL    =1 / ( 1 + exp( - rhoOmegaPriorALL - rhoOmegaPriorStepALL   -  rhoOmegaPriorHLALLi    ));     
rhoOmegaKLALL    =1 / ( 1 + exp( - rhoOmegaPriorALL - rhoOmegaPriorStepALL   -  rhoOmegaPriorKLALLi    ));     
rhoOmegaHLXALL   =1 / ( 1 + exp( - rhoOmegaPriorALL - rhoOmegaPriorStepALL   -  rhoOmegaPriorHLXALLi   ));     
rhoOmegaHLXKLALL =1 / ( 1 + exp( - rhoOmegaPriorALL - rhoOmegaPriorStepALL   -  rhoOmegaPriorHLXKLALLi ));     
rhoOmegaS1ALL    =1 / ( 1 + exp( - rhoOmegaPriorALL -                           rhoOmegaPriorS1ALLi    ));     
rhoOmegaKALL     =1 / ( 1 + exp( - rhoOmegaPriorALL - rhoOmegaPriorS1ALL     -  rhoOmegaPriorKALLi     ));     
rhoOmegaHALL     =1 / ( 1 + exp( - rhoOmegaPriorALL - rhoOmegaPriorS1ALL     -  rhoOmegaPriorHALLi     ));     
rhoOmegaCALL     =1 / ( 1 + exp( - rhoOmegaPriorALL - rhoOmegaPriorS1ALL     -  rhoOmegaPriorCALLi     ));     
rhoOmegaDi       =1 / ( 1 + exp( - rhoOmegaPriorALL -                           rhoOmegaPriorDii       ));     
rhoOmegaPALL     =1 / ( 1 + exp( - rhoOmegaPriorALL - rhoOmegaPriorPGALL     -  rhoOmegaPriorPALLi     ));     
rhoOmegaGALL     =1 / ( 1 + exp( - rhoOmegaPriorALL - rhoOmegaPriorPGALL     -  rhoOmegaPriorGALLi     ));     
rhoOmegaDemandALL=1 / ( 1 + exp( - rhoOmegaPriorALL -                           rhoOmegaPriorDemandALLi));     
rhoOmegahi       =1 / ( 1 + exp( - rhoOmegaPriorALL -                           rhoOmegaPriorhii       ));     
rhoOmegaCPi      =1 / ( 1 + exp( - rhoOmegaPriorALL -                           rhoOmegaPriorCPii      ));     
rhoOmegaCi       =1 / ( 1 + exp( - rhoOmegaPriorALL -                           rhoOmegaPriorCii       ));     
rhoOmegaTradeALL =1 / ( 1 + exp( - rhoOmegaPriorALL -                           rhoOmegaPriorTradeALLi ));     
rhoOmegaYi       =1 / ( 1 + exp( - rhoOmegaPriorALL -                           rhoOmegaPriorYii       ));     
rhoOmegaTCi      =1 / ( 1 + exp( - rhoOmegaPriorALL -                           rhoOmegaPriorTCii      ));     
rhoOmegaWPi      =1 / ( 1 + exp( - rhoOmegaPriorALL -                           rhoOmegaPriorWPii      ));     
rhoOmegaWCi      =1 / ( 1 + exp( - rhoOmegaPriorALL -                           rhoOmegaPriorWCii      ));     
sigmaOmegaALL      =sigmaOmegaPriorALL *                             sigmaOmegaPriorALLi      ;
sigmaOmegaS0ALL    =sigmaOmegaPriorALL *                             sigmaOmegaPriorS0ALLi    ;
sigmaOmegaTALL     =sigmaOmegaPriorALL * sigmaOmegaPriorS0ALL     *  sigmaOmegaPriorTALLi     ;
sigmaOmegaNTALL    =sigmaOmegaPriorALL * sigmaOmegaPriorS0ALL     *  sigmaOmegaPriorNTALLi    ;
sigmaOmegaWALL     =sigmaOmegaPriorALL * sigmaOmegaPriorS0ALL     *  sigmaOmegaPriorWALLi     ;
sigmaOmegaKKALL    =sigmaOmegaPriorALL * sigmaOmegaPriorStepALL   *  sigmaOmegaPriorKKALLi    ;
sigmaOmegaHLALL    =sigmaOmegaPriorALL * sigmaOmegaPriorStepALL   *  sigmaOmegaPriorHLALLi    ;
sigmaOmegaKLALL    =sigmaOmegaPriorALL * sigmaOmegaPriorStepALL   *  sigmaOmegaPriorKLALLi    ;
sigmaOmegaHLXALL   =sigmaOmegaPriorALL * sigmaOmegaPriorStepALL   *  sigmaOmegaPriorHLXALLi   ;
sigmaOmegaHLXKLALL =sigmaOmegaPriorALL * sigmaOmegaPriorStepALL   *  sigmaOmegaPriorHLXKLALLi ;
sigmaOmegaS1ALL    =sigmaOmegaPriorALL *                             sigmaOmegaPriorS1ALLi    ;
sigmaOmegaKALL     =sigmaOmegaPriorALL * sigmaOmegaPriorS1ALL     *  sigmaOmegaPriorKALLi     ;
sigmaOmegaHALL     =sigmaOmegaPriorALL * sigmaOmegaPriorS1ALL     *  sigmaOmegaPriorHALLi     ;
sigmaOmegaCALL     =sigmaOmegaPriorALL * sigmaOmegaPriorS1ALL     *  sigmaOmegaPriorCALLi     ;
sigmaOmegaDi       =sigmaOmegaPriorALL *                             sigmaOmegaPriorDii       ;
sigmaOmegaPALL     =sigmaOmegaPriorALL * sigmaOmegaPriorPGALL     *  sigmaOmegaPriorPALLi     ;
sigmaOmegaGALL     =sigmaOmegaPriorALL * sigmaOmegaPriorPGALL     *  sigmaOmegaPriorGALLi     ;
sigmaOmegaDemandALL=sigmaOmegaPriorALL *                             sigmaOmegaPriorDemandALLi;
sigmaOmegahi       =sigmaOmegaPriorALL *                             sigmaOmegaPriorhii       ;
sigmaOmegaCPi      =sigmaOmegaPriorALL *                             sigmaOmegaPriorCPii      ;
sigmaOmegaCi       =sigmaOmegaPriorALL *                             sigmaOmegaPriorCii       ;
sigmaOmegaTradeALL =sigmaOmegaPriorALL *                             sigmaOmegaPriorTradeALLi ;
sigmaOmegaYi       =sigmaOmegaPriorALL *                             sigmaOmegaPriorYii       ;
sigmaOmegaTCi      =sigmaOmegaPriorALL *                             sigmaOmegaPriorTCii      ;
sigmaOmegaWPi      =sigmaOmegaPriorALL *                             sigmaOmegaPriorWPii      ;
sigmaOmegaWCi      =sigmaOmegaPriorALL *                             sigmaOmegaPriorWCii      ;

phiLtauKG = phiLtauSG1PriorALL + phiLtauKGPriori ;
phiLtauHG = phiLtauSG1PriorALL + phiLtauHGPriori ;
phiLtauCG = phiLtauSG1PriorALL + phiLtauCGPriori ;
phiLtaub  = phiLtaulbPriorALL  + phiLtaubPriori  ;
phiLtaul  = phiLtaulbPriorALL  + phiLtaulPriori  ;

phiYtauKG = phiYtauSG1PriorALL + phiYtauKGPriori ;
phiYtauHG = phiYtauSG1PriorALL + phiYtauHGPriori ;
phiYtauCG = phiYtauSG1PriorALL + phiYtauCGPriori ;
phiYtaub  = phiYtaulbPriorALL  + phiYtaubPriori  ;
phiYtaul  = phiYtaulbPriorALL  + phiYtaulPriori  ;

  phiuiotaTX   =  phiutauPriorALL     +   phiuiotaPriorALL    + phiuiotaTXPriori   ;
  phiuiotaTM   =  phiutauPriorALL     +   phiuiotaPriorALL    + phiuiotaTMPriori   ;
  phiuiotaWX   =  phiutauPriorALL     +   phiuiotaPriorALL    + phiuiotaWXPriori   ;
  phiuiotaWM   =  phiutauPriorALL     +   phiuiotaPriorALL    + phiuiotaWMPriori   ;
  phiutauKG    =                          phiutauSG1PriorALL  + phiutauKGPriori    ;
  phiutauHG    =                          phiutauSG1PriorALL  + phiutauHGPriori    ;
  phiutauCG    =                          phiutauSG1PriorALL  + phiutauCGPriori    ;
  phiutaub     =  phiutauPriorALL     +   phiutaulbPriorALL   + phiutaubPriori     ;
  phiutaul     =  phiutauPriorALL     +   phiutaulbPriorALL   + phiutaulPriori     ;
  phiutauD     =  phiutauPriorALL     +   phiutauCPriorALL    + phiutauDPriori     ;
  phiutauND    =  phiutauPriorALL     +   phiutauCPriorALL    + phiutauNDPriori    ;
  phiutauNT    =  phiutauPriorALL     +                       + phiutauNTPriori    ;
  phiutauLa    =  phiutauPriorALL     +   phiutauLPriorALL    + phiutauLaPriori    ;
  phiutauLb    =  phiutauPriorALL     +   phiutauLPriorALL    + phiutauLbPriori    ;
  phiutauHW    =  phiutauPriorALL     +   phiutauHPriorALL    + phiutauWPriorALL   ;
  phiutauHT    =  phiutauPriorALL     +   phiutauHPriorALL    + phiutauTPriorALL   ;
  phiutauHNT   =  phiutauPriorALL     +   phiutauHPriorALL    + phiutauNTPriorALL  ;
  phiutauKW    =  phiutauPriorALL     +   phiutauKPriorALL    + phiutauWPriorALL   ;
  phiutauKT    =  phiutauPriorALL     +   phiutauKPriorALL    + phiutauTPriorALL   ;
  phiutauKNT   =  phiutauPriorALL     +   phiutauKPriorALL    + phiutauNTPriorALL  ;
  phiutauXW    =  phiutauPriorALL     +   phiutauXPriorALL    + phiutauWPriorALL   ;
  phiutauXT    =  phiutauPriorALL     +   phiutauXPriorALL    + phiutauTPriorALL   ;
  phiutauXNT   =  phiutauPriorALL     +   phiutauXPriorALL    + phiutauNTPriorALL  ;

  phiiotaTX       = 1 / ( 1 + exp( - phiiotaPriorALL - phiiotaTXPriori ))     ;
  phiiotaTM       = 1 / ( 1 + exp( - phiiotaPriorALL - phiiotaTMPriori ))     ;
  phiiotaWX       = 1 / ( 1 + exp( - phiiotaPriorALL - phiiotaWXPriori ))     ;
  phiiotaWM       = 1 / ( 1 + exp( - phiiotaPriorALL - phiiotaWMPriori ))     ;
  phitauD         = 1 / ( 1 + exp( - phitauCPriorALL - phitauDPriori   ))     ;
  phitauND        = 1 / ( 1 + exp( - phitauCPriorALL - phitauNDPriori  ))     ;
  phitauHW        = 1 / ( 1 + exp( - phitauHPriorALL - phitauWPriorALL   ))     ;
  phitauHT        = 1 / ( 1 + exp( - phitauHPriorALL - phitauTPriorALL   ))     ;
  phitauHNT       = 1 / ( 1 + exp( - phitauHPriorALL - phitauNTPriorALL  ))     ;
  phitauKW        = 1 / ( 1 + exp( - phitauKPriorALL - phitauWPriorALL   ))     ;
  phitauKT        = 1 / ( 1 + exp( - phitauKPriorALL - phitauTPriorALL   ))     ;
  phitauKNT       = 1 / ( 1 + exp( - phitauKPriorALL - phitauNTPriorALL  ))     ;
  phitauscriptXW  = 1 / ( 1 + exp( - phitauXPriorALL - phitauWPriorALL   ))     ;
  phitauscriptXT  = 1 / ( 1 + exp( - phitauXPriorALL - phitauTPriorALL   ))     ;
  phitauscriptXNT = 1 / ( 1 + exp( - phitauXPriorALL - phitauNTPriorALL  ))     ;

  tauKG_          =  1 / ( 1 + exp(   -   tauSG1PriorALL_  - tauKGPriori_ ));
  tauHG_          =  1 / ( 1 + exp(   -   tauSG1PriorALL_  - tauHGPriori_ ));
  tauCG_          =  1 / ( 1 + exp(   -   tauSG1PriorALL_  - tauCGPriori_ ));
  taub_           =  tauPriorALL_     +   taulbPriorALL_   + taubPriori_     ;
  taul_           =  tauPriorALL_     +   taulbPriorALL_   + taulPriori_     ;
  tauD_           =  tauPriorALL_     +   tauCPriorALL_    + tauDPriori_     ;
  tauND_          =  tauPriorALL_     +   tauCPriorALL_    + tauNDPriori_    ;
  tauNT_          =  tauPriorALL_     +                    + tauNTPriori_    ;
  tauLa_          =  tauPriorALL_     +   tauLPriorALL_    + tauLaPriori_    ;
  tauLb_          =  1 / ( 1 + exp(   -   tauPriorALL_     - tauLPriorALL_   - tauLbPriori_ ))    ;
  tauHW_          =  tauPriorALL_     +   tauHPriorALL_    + tauWPriorALL_   ;
  tauHT_          =  tauPriorALL_     +   tauHPriorALL_    + tauTPriorALL_   ;
  tauHNT_         =  tauPriorALL_     +   tauHPriorALL_    + tauNTPriorALL_  ;
  tauKW_          =  tauPriorALL_     +   tauKPriorALL_    + tauWPriorALL_   ;
  tauKT_          =  tauPriorALL_     +   tauKPriorALL_    + tauTPriorALL_   ;
  tauKNT_         =  tauPriorALL_     +   tauKPriorALL_    + tauNTPriorALL_  ;
  tauscriptXW_    =  tauPriorALL_     +   tauXPriorALL_    + tauWPriorALL_   ;
  tauscriptXT_    =  tauPriorALL_     +   tauXPriorALL_    + tauTPriorALL_   ;
  tauscriptXNT_   =  tauPriorALL_     +   tauXPriorALL_    + tauNTPriorALL_  ;

  sigmauKG      = sigmauPriorALL * sigmauSG1PriorALL   * sigmauKGPriori  ;
  sigmauHG      = sigmauPriorALL * sigmauSG1PriorALL   * sigmauHGPriori  ;
  sigmauCG      = sigmauPriorALL * sigmauSG1PriorALL   * sigmauCGPriori  ;
  sigmaub       = sigmauPriorALL * sigmaulbPriorALL    * sigmaubPriori   ;
  sigmaul       = sigmauPriorALL * sigmaulbPriorALL    * sigmaulPriori   ;
  sigmauD       = sigmauPriorALL * sigmauCPriorALL     * sigmauDPriori   ;
  sigmauND      = sigmauPriorALL * sigmauCPriorALL     * sigmauNDPriori  ;
  sigmauNT      = sigmauPriorALL                       * sigmauNTPriori  ;
  sigmauTX      = sigmauPriorALL * sigmauiotaPriorALL  * sigmauTXPriori  ;
  sigmauTM      = sigmauPriorALL * sigmauiotaPriorALL  * sigmauTMPriori  ;
  sigmauWX      = sigmauPriorALL * sigmauiotaPriorALL  * sigmauWXPriori  ;
  sigmauWM      = sigmauPriorALL * sigmauiotaPriorALL  * sigmauWMPriori  ;
  sigmauLa      = sigmauPriorALL * sigmauLPriorALL     * sigmauLaPriori  ;
  sigmauLb      = sigmauPriorALL * sigmauLPriorALL     * sigmauLbPriori  ;
  sigmauALL     = sigmauPriorALL                       * sigmauALLPriori     ;
  sigmauS1ALL   = sigmauPriorALL                       * sigmauS1ALLPriori   ;
  sigmauiotaALL = sigmauPriorALL                       * sigmauiotaALLPriori ;
  sigmaulbALL   = sigmauPriorALL                       * sigmaulbALLPriori   ;
  sigmauCALL    = sigmauPriorALL                       * sigmauCALLPriori    ;
  sigmauLALL    = sigmauPriorALL                       * sigmauLALLPriori    ;
  sigmauHALL    = sigmauPriorALL * sigmauPriorHKXALL   * sigmauHALLPriori    ;
  sigmauKALL    = sigmauPriorALL * sigmauPriorHKXALL   * sigmauKALLPriori    ;
  sigmauXALL    = sigmauPriorALL * sigmauPriorHKXALL   * sigmauXALLPriori    ;
  sigmauTALL    = sigmauPriorALL * sigmauPriorS0ALL    * sigmauTALLPriori    ;
  sigmauNTALL   = sigmauPriorALL * sigmauPriorS0ALL    * sigmauNTALLPriori   ;
  sigmauWALL    = sigmauPriorALL * sigmauPriorS0ALL    * sigmauWALLPriori    ;